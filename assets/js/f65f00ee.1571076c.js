"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[717],{3905:(e,a,n)=>{n.d(a,{Zo:()=>o,kt:()=>N});var t=n(7294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function m(e,a){if(null==e)return{};var n,t,s=function(e,a){if(null==e)return{};var n,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=t.createContext({}),l=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):p(p({},a),e)),n},o=function(e){var a=l(e.components);return t.createElement(i.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,o=m(e,["components","mdxType","originalType","parentName"]),c=l(n),d=s,N=c["".concat(i,".").concat(d)]||c[d]||u[d]||r;return n?t.createElement(N,p(p({ref:a},o),{},{components:n})):t.createElement(N,p({ref:a},o))}));function N(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=n.length,p=new Array(r);p[0]=d;var m={};for(var i in a)hasOwnProperty.call(a,i)&&(m[i]=a[i]);m.originalType=e,m[c]="string"==typeof e?e:s,p[1]=m;for(var l=2;l<r;l++)p[l]=n[l];return t.createElement.apply(null,p)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3528:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>m,toc:()=>l});var t=n(7462),s=(n(7294),n(3905));const r={title:"Fonctions : D\xe9couper son code",tags:["C++"],sidebar_position:6},p="Introduction",m={unversionedId:"Lessons/Functions",id:"Lessons/Functions",title:"Fonctions : D\xe9couper son code",description:"J'ai \xe9voqu\xe9 rapidement le terme de fonctions et de m\xe9thodes lors du pr\xe9c\xe9dent chapitre sur les tableaux, parlons en plus en d\xe9tails.",source:"@site/content/Lessons/Functions.md",sourceDirName:"Lessons",slug:"/Lessons/Functions",permalink:"/Learn--cpp_programming/Lessons/Functions",draft:!1,tags:[{label:"C++",permalink:"/Learn--cpp_programming/tags/c"}],version:"current",sidebarPosition:6,frontMatter:{title:"Fonctions : D\xe9couper son code",tags:["C++"],sidebar_position:6},sidebar:"sidebar",previous:{title:"Des tableaux",permalink:"/Learn--cpp_programming/Lessons/Arrays"}},i={},l=[{value:"Structure d&#39;une fonction",id:"structure-dune-fonction",level:2},{value:"Choisir un nom",id:"choisir-un-nom",level:3},{value:"Type de retour",id:"type-de-retour",level:3},{value:"Des param\xe8tres",id:"des-param\xe8tres",level:3},{value:"Petit point vocabulaire: les m\xe9thodes",id:"petit-point-vocabulaire-les-m\xe9thodes",level:3},{value:"Une port\xe9e limit\xe9e",id:"une-port\xe9e-limit\xe9e",level:2},{value:"Un petit probl\xe8me de copie",id:"un-petit-probl\xe8me-de-copie",level:2},{value:"R\xe9f\xe9rence",id:"r\xe9f\xe9rence",level:2},{value:"Passage par r\xe9f\xe9rence",id:"passage-par-r\xe9f\xe9rence",level:2},{value:"R\xe9f\xe9rence constante",id:"r\xe9f\xe9rence-constante",level:3},{value:"Le cas des litt\xe9raux",id:"le-cas-des-litt\xe9raux",level:3},{value:"Retour par r\xe9f\xe9rence",id:"retour-par-r\xe9f\xe9rence",level:3},{value:"Signature et fonctions surcharg\xe9es",id:"signature-et-fonctions-surcharg\xe9es",level:2},{value:"Prototype: d\xe9claration des fonctions",id:"prototype-d\xe9claration-des-fonctions",level:2},{value:"Prototype vs signature",id:"prototype-vs-signature",level:3},{value:"R\xe9cursivit\xe9",id:"r\xe9cursivit\xe9",level:2},{value:"Un petit exemple",id:"un-petit-exemple",level:3},{value:"R\xe9sum\xe9",id:"r\xe9sum\xe9",level:2}],o={toc:l},c="wrapper";function u(e){let{components:a,...n}=e;return(0,s.kt)(c,(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"J'ai \xe9voqu\xe9 rapidement le terme de ",(0,s.kt)("strong",{parentName:"p"},"fonctions")," et de ",(0,s.kt)("strong",{parentName:"p"},"m\xe9thodes")," lors du pr\xe9c\xe9dent chapitre sur les tableaux, parlons en plus en d\xe9tails."),(0,s.kt)("p",null,"Nos programmes deviennent plus complexes et il va devenir int\xe9ressant d'isoler certaines portions d'",(0,s.kt)("strong",{parentName:"p"},"instructions")," afin de mieux les identifier, les s\xe9parer et les r\xe9utiliser au besoin. Cela va permettre d'\xe9viter de copier des parties, factoriser le code similaire et identifier plus facilement de potentielles erreurs."),(0,s.kt)("h2",{id:"structure-dune-fonction"},"Structure d'une fonction"),(0,s.kt)("p",null,"Une ",(0,s.kt)("strong",{parentName:"p"},"fonction")," est un ensemble d'instructions d\xe9limit\xe9 par des accolades ",(0,s.kt)("kbd",null,"{")," et ",(0,s.kt)("kbd",null,"}")," ce qui d\xe9fini sa ",(0,s.kt)("strong",{parentName:"p"},"port\xe9e")," (scope)."),(0,s.kt)("p",null,"Elle a un ",(0,s.kt)("strong",{parentName:"p"},"nom")," et peut ",(0,s.kt)("strong",{parentName:"p"},"ou non")," prendre des informations en entr\xe9e et peut ",(0,s.kt)("strong",{parentName:"p"},"ou non")," fournir ",(0,s.kt)("strong",{parentName:"p"},"une")," information en sortie."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"type_de_retour nom(param\xe8tres)\n{\n    instructions\n}\n")),(0,s.kt)("admonition",{title:"Un exemple bien connu",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"D\xe8s notre premier programme nous avions rencontr\xe9 une fonction, la fonction ",(0,s.kt)("strong",{parentName:"p"},"main"),". Celle-ci est le ",(0,s.kt)("strong",{parentName:"p"},"point d\u2019entr\xe9e")," de tous les programmes que nous codons en ",(0,s.kt)("strong",{parentName:"p"},"C++"),"."),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int main()\n{\n    // Instructions diverses\n    return 0;\n}\n")),(0,s.kt)("p",{parentName:"admonition"},"Ici, ",(0,s.kt)("strong",{parentName:"p"},"main")," est le ",(0,s.kt)("strong",{parentName:"p"},"nom")," de la fonction. Le ",(0,s.kt)("strong",{parentName:"p"},"int")," situ\xe9 juste avant indique son ",(0,s.kt)("strong",{parentName:"p"},"type de retour"),". Dans ce cas, la fonction renvoie une valeur ",(0,s.kt)("strong",{parentName:"p"},"enti\xe8re")," (via le ",(0,s.kt)("inlineCode",{parentName:"p"},"return 0;"),") qui indique que tout s\u2019est bien pass\xe9."),(0,s.kt)("p",{parentName:"admonition"},"Apr\xe8s, le nom, il y a des parenth\xe8ses vides ",(0,s.kt)("kbd",null,"()"),", ce qui signifie que la fonction n\u2019attend aucune information en entr\xe9e.\nEnfin, entre les accolades ",(0,s.kt)("kbd",null,"{}"),", nous avons les instructions qui la composent.")),(0,s.kt)("h3",{id:"choisir-un-nom"},"Choisir un nom"),(0,s.kt)("p",null,"Les r\xe8gles de nommage des fonctions sont les m\xeames que pour nommer nos ",(0,s.kt)("strong",{parentName:"p"},"variables"),", vous pouvez aller les relire ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/Learn--cpp_programming/Lessons/Variables#quelques-r%C3%A8gles-de-nommage"},"ici"))," si n\xe9cessaire."),(0,s.kt)("p",null,"De m\xeame que pour les variables, il est important de donner un nom explicite aux ",(0,s.kt)("strong",{parentName:"p"},"fonctions")," afin de d\xe9finir clairement ce qu\u2019elles font."),(0,s.kt)("h3",{id:"type-de-retour"},"Type de retour"),(0,s.kt)("p",null,"Une fonction peut ou non renvoyer une valeur de retour, comme nous l\u2019avons vu avec la fonction ",(0,s.kt)("inlineCode",{parentName:"p"},"main"),". Il faut simplement pr\xe9ciser le ",(0,s.kt)("strong",{parentName:"p"},"type")," de la valeur \xe0 retourner comme vu pr\xe9c\xe9demment."),(0,s.kt)("p",null,"Pour renvoyer une valeur, on utilise le mot-cl\xe9 ",(0,s.kt)("inlineCode",{parentName:"p"},"return"),", exactement comme dans la fonction ",(0,s.kt)("inlineCode",{parentName:"p"},"main"),"."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Il peut y avoir plusieurs ",(0,s.kt)("inlineCode",{parentName:"p"},"return")," dans une fonction, un si un ",(0,s.kt)("strong",{parentName:"p"},"if")," est ",(0,s.kt)("strong",{parentName:"p"},"vrai"),", l\u2019autre s\u2019il est ",(0,s.kt)("strong",{parentName:"p"},"faux")," par exemple."),(0,s.kt)("p",{parentName:"admonition"},"Mais d\xe8s que l'instruction ",(0,s.kt)("inlineCode",{parentName:"p"},"return")," est ex\xe9cut\xe9e, on ",(0,s.kt)("strong",{parentName:"p"},"sort")," de la fonction en cours et ",(0,s.kt)("strong",{parentName:"p"},"tout le code restant n\u2019est pas ex\xe9cut\xe9"),"."),(0,s.kt)("p",{parentName:"admonition"},"Cela coupe le flot d\u2019ex\xe9cution de la fonction comme avec les mots-cl\xe9s ",(0,s.kt)("inlineCode",{parentName:"p"},"break")," et ",(0,s.kt)("inlineCode",{parentName:"p"},"continue")," avec les ",(0,s.kt)("a",{parentName:"p",href:"/Learn--cpp_programming/Lessons/Loops#contr%C3%B4ler-lex%C3%A9cution"},"boucles"),".")),(0,s.kt)("p",null,"Si votre fonction ne doit ",(0,s.kt)("strong",{parentName:"p"},"rien renvoyer"),", alors on utilise le mot-cl\xe9 ",(0,s.kt)("strong",{parentName:"p"},"void"),", qui signifie \"vide\" et qui, dans ce contexte, indique que la fonction ne retourne pas d'information (dans ce cas il n'est pas n\xe9cessaire d'utiliser l'instruction ",(0,s.kt)("inlineCode",{parentName:"p"},"return")," mais peut tout de m\xeame \xeatre utilis\xe9e pour couper le flot d\u2019ex\xe9cution)."),(0,s.kt)("h3",{id:"des-param\xe8tres"},"Des param\xe8tres"),(0,s.kt)("p",null,"Maintenant, parlons des ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tres"),". C'est via des ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tres")," que la fonction d\xe9crit ce qu'elle attend pour travailler."),(0,s.kt)("p",null,"On les d\xe9clare entre les parenth\xe8ses (",(0,s.kt)("kbd",null,"()"),"). Il faut que chaque param\xe8tre ait un ",(0,s.kt)("strong",{parentName:"p"},"type")," et un ",(0,s.kt)("strong",{parentName:"p"},"nom"),". S\u2019il y en a plusieurs, ils seront s\xe9par\xe9s par des virgules."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Des exemples"',title:'"Des','exemples"':!0},'#include <iostream>\n\nint sum (int a, int b)\n{\n    return a + b;\n}\n\nint pgcd(int a, int b)\n{\n    int r { a % b };\n    while (r != 0)\n    {\n        a = b;\n        b = r;\n        r = a % b;\n    }\n\n    // On peut tout \xe0 fait renvoyer la valeur d\'un param\xe8tre\n    return b;\n}\n\nint main()\n{\n    int const a { 42 };\n    int const b { 27 };\n\n    std::cout << "La somme de " << a << " et " << b << " vaut " << sum(a, b) << "." << std::endl;\n    std::cout << "Le PGCD de " << a << " et " << b << " vaut " << pgcd(a, b) << "." << std::endl;\n\n    return 0;\n}\n')),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"Une fonction doit \xeatre ",(0,s.kt)("strong",{parentName:"p"},"d\xe9clar\xe9e avant son utilisation"),".\nIl faut donc la d\xe9clarer ",(0,s.kt)("strong",{parentName:"p"},"avant")," la fonction ",(0,s.kt)("inlineCode",{parentName:"p"},"main")," afin d'\xeatre en mesure de l'utiliser dans la fonction ",(0,s.kt)("inlineCode",{parentName:"p"},"main")," par exemple.")),(0,s.kt)("p",null,"Le nom donn\xe9 aux param\xe8tres d'une fonction est sp\xe9cifique \xe0 cette fonction et n'est pas partag\xe9 par le reste du code.\nIl est possible de donner en ",(0,s.kt)("strong",{parentName:"p"},"argument")," \xe0 une fonction une variable qui porte le m\xeame nom qu\u2019un des ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tres"),". "),(0,s.kt)("p",null,"Inversement, il n\u2019est pas possible d\u2019utiliser un ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tre de fonction")," en ",(0,s.kt)("strong",{parentName:"p"},"dehors")," de celle-ci. Le code suivant produit donc une erreur."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int function(int parameter)\n{\n    parameter += 5;\n    return parameter;\n}\n\nint main()\n{\n    int const a { function(37) };\n    int const b { function(a) };\n\n    // La variable parameter n'existe pas ici\n    parameter = 410;\n    return 0;\n}\n")),(0,s.kt)("admonition",{title:"Argument vs param\xe8tre",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Attention, il faut bien faire la distinction entre ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tre")," et ",(0,s.kt)("strong",{parentName:"p"},"argument"),"."),(0,s.kt)("p",{parentName:"admonition"},"Un ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tre"),", c\u2019est ce qu\u2019attend une fonction pour travailler et qui est inscrit dans sa d\xe9claration, le nom du param\xe8tre est propre \xe0 la fonction et utilisable uniquement dans celle-ci.\nUn ",(0,s.kt)("strong",{parentName:"p"},"argument"),", c\u2019est la valeur transmise \xe0 la fonction quand on l\u2019utilise."),(0,s.kt)("p",{parentName:"admonition"},"Dans notre exemple pr\xe9c\xe9dent ",(0,s.kt)("inlineCode",{parentName:"p"},"parameter")," est le ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tre")," de la fonction. ",(0,s.kt)("inlineCode",{parentName:"p"},"37")," est l'argument de la fonction pour l'assignation de la variable ",(0,s.kt)("inlineCode",{parentName:"p"},"a"),".\nEnsuite ",(0,s.kt)("inlineCode",{parentName:"p"},"a")," devient lui m\xeame ",(0,s.kt)("strong",{parentName:"p"},"argument")," de la fonction pour l'assignation de ",(0,s.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,s.kt)("p",{parentName:"admonition"},"En pratique, il y a souvent un abus de langage et les deux termes s'utilisent de fa\xe7on ",(0,s.kt)("strong",{parentName:"p"},"interchangeable")," et je ne vous en voudrais si vous faites de m\xeame mais je tenais \xe0 vous expliquer la diff\xe9rence.")),(0,s.kt)("h3",{id:"petit-point-vocabulaire-les-m\xe9thodes"},"Petit point vocabulaire: les m\xe9thodes"),(0,s.kt)("p",null,"Dans le pr\xe9c\xe9dent chapitre sur les tableaux nous avons vu des ",(0,s.kt)("strong",{parentName:"p"},"fonctions propres")," ou ",(0,s.kt)("strong",{parentName:"p"},"m\xe9thodes"),"."),(0,s.kt)("p",null,"On parle de ",(0,s.kt)("strong",{parentName:"p"},"m\xe9thode")," quand une fonction est associ\xe9e \xe0 un objet. C'est le cas par exemple de la fonction ",(0,s.kt)("inlineCode",{parentName:"p"},"size()")," sur l'objet ",(0,s.kt)("inlineCode",{parentName:"p"},"std::vector"),".\nElle s'utilise avec un point ",(0,s.kt)("kbd",null,".")," apr\xe8s le ",(0,s.kt)("strong",{parentName:"p"},"nom")," de la variable en question.\nOn dit que ",(0,s.kt)("inlineCode",{parentName:"p"},"size()")," est une ",(0,s.kt)("strong",{parentName:"p"},"m\xe9thode")," de ",(0,s.kt)("inlineCode",{parentName:"p"},"std::vector"),".\nUne ",(0,s.kt)("strong",{parentName:"p"},"m\xe9thode"),' a donc "connaissance" de l\'objet en question pour le modifier, lire des informations, etc.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<int> const array { 12, 18, 8, 4, 9 };\nstd::size_t const size { array.size() };\n")),(0,s.kt)("p",null,"Nous y reviendrons plus tard, pour l'instant gardez simplement \xe0 l'esprit que c'est r\xe9serv\xe9 \xe0 des variables \"particuli\xe8res\" comme le ",(0,s.kt)("inlineCode",{parentName:"p"},"std::vector")," ou ",(0,s.kt)("inlineCode",{parentName:"p"},"std::string")," et que l'on appelle \xe7a des ",(0,s.kt)("strong",{parentName:"p"},"m\xe9thodes"),"."),(0,s.kt)("h2",{id:"une-port\xe9e-limit\xe9e"},"Une port\xe9e limit\xe9e"),(0,s.kt)("p",null,"J'avais d\xe9j\xe0 \xe9voqu\xe9 la notion de port\xe9e (ou ",(0,s.kt)("strong",{parentName:"p"},"scope"),") lors de l'introduction des stuctures de contr\xf4le. Cette notion est aussi vraie avec les fonctions. Les instructions d'une fonction sont contenues entre des ",(0,s.kt)("strong",{parentName:"p"},"accolades")," et donc restreignent la ",(0,s.kt)("strong",{parentName:"p"},"port\xe9e")," des variables \xe0 l'int\xe9rieur de ce bloc."),(0,s.kt)("p",null,"C\u2019est une bonne pratique de d\xe9clarer ses variables dans ",(0,s.kt)("strong",{parentName:"p"},"la plus petite port\xe9e possible"),"."),(0,s.kt)("p",null,"Cela permet premi\xe8rement de limiter son utilisation \xe0 cette port\xe9e et \xe9viter un usage malencontreux plus tard. D\xe9clarer une variable proche de son utilisation \xe9vite de devoir chercher et parcourir un code parfois long et complexe pour comprendre pourquoi cette variable est utilis\xe9e \xe0 cet endroit pr\xe9cis. Cela aide donc \xe0 la lecture et la compr\xe9hension du code."),(0,s.kt)("p",null,"Enfin, lorsqu\u2019on atteint la fin d'un bloc (accolade ",(0,s.kt)("kbd",null,"}"),"), le programme lib\xe8re dans la m\xe9moire les emplacements qu\u2019il avait r\xe9serv\xe9s pour les variables du bloc en question.\nC'est donc plus propre et plus performant (niveau m\xe9moire) de d\xe9clarer les variables \xe0 l\u2019int\xe9rieur d'un bloc (fonction, condition, etc) si elles ne sont pas destin\xe9es \xe0 \xeatre utilis\xe9es ailleurs."),(0,s.kt)("h2",{id:"un-petit-probl\xe8me-de-copie"},"Un petit probl\xe8me de copie"),(0,s.kt)("p",null,"J\u2019ai expliqu\xe9 pr\xe9c\xe9demment que les param\xe8tres d\u2019une fonction \xe9taient dans une port\xe9e diff\xe9rente concernant le nommage.\nOn peux donc nommer nos param\xe8tres avec le m\xeame nom qu'une de nos variables."),(0,s.kt)("p",null,"Mais que se passe t'il si j'\xe9cris \xe7a ?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nvoid addOne(int a)\n{\n    a += 1;\n}\n\nint main()\n{\n    int a { 8 };\n    \n    addOne(a);\n\n    std::cout << a << std::endl;\n\n    return 0;\n}\n")),(0,s.kt)("p",null,"On pourrait penser que cela va afficher ",(0,s.kt)("inlineCode",{parentName:"p"},"9")," mais en r\xe9alit\xe9 ",(0,s.kt)("inlineCode",{parentName:"p"},"a")," est toujours \xe9gal \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"8"),"."),(0,s.kt)("p",null,"La port\xe9e diff\xe9rente implique ici une ",(0,s.kt)("strong",{parentName:"p"},"copie"),". Pour chaque utilisation de la fonction, le compilateur va r\xe9server un nouvel espace m\xe9moire et ",(0,s.kt)("strong",{parentName:"p"},"copier")," l'",(0,s.kt)("strong",{parentName:"p"},"argument")," (la variable) qu\u2019on lui passe en param\xe8tre. La variable ",(0,s.kt)("inlineCode",{parentName:"p"},"a")," dans la fonction est donc ",(0,s.kt)("strong",{parentName:"p"},"totalement diff\xe9rente"),". C\u2019est ce qu'on appelle le ",(0,s.kt)("strong",{parentName:"p"},"passage par copie"),"."),(0,s.kt)("p",null,"Dans le cas d\u2019un entier ou d\u2019un caract\xe8re par exemple ce n'est pas tr\xe8s grave, ",(0,s.kt)("strong",{parentName:"p"},"mais")," dans le cas d\u2019un tableau de plusieurs d\u2019\xe9l\xe9ments, on perd du temps inutilement \xe0 copier toutes les valeurs du tableau (m\xeame si on ne veut en lire que quelques unes dans la fonction)."),(0,s.kt)("h2",{id:"r\xe9f\xe9rence"},"R\xe9f\xe9rence"),(0,s.kt)("p",null,"Mais, en ",(0,s.kt)("strong",{parentName:"p"},"C++"),", il existe un moyen de cr\xe9er un alias, une ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence")," vers une variable.\nCette ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence")," devient manipulable comme si nous avions la variable originale entre les mains."),(0,s.kt)("p",null,"On indique qu'une variable est une ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence")," vers une autre en ajoutant une ",(0,s.kt)("strong",{parentName:"p"},"esperluette")," (",(0,s.kt)("kbd",null,"&"),") apr\xe8s le type de notre variable."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    int a { 8 };\n    \n    // refA est une r\xe9f\xe9rence vers la variable a\n    int & refA { a };\n    \n    // ici je modifie donc la variable a\n    refA += 1;\n    \n    std::cout << a << std::endl;\n\n    return 0;\n}\n")),(0,s.kt)("admonition",{type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"On ne peut pas cr\xe9er de r\xe9f\xe9rence qui ne cible rien, ni changer la cible d\u2019une r\xe9f\xe9rence une fois qu\u2019on l\u2019a cr\xe9\xe9e.\nUne r\xe9f\xe9rence est un alias vers une autre variable, si on essaye de l'assigner de nouveau cela revient \xe0 modifier la variable originale et pas \xe0 r\xe9atribuer la r\xe9f\xe9rence."),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    int a { 8 };\n    int b { 42 };\n    \n    int & refA { a };\n    \n    refA += 1;\n    \n    std::cout << a << ';' << b << std::endl;\n    \n    // ici refA reste une r\xe9f\xe9rence vers la variable et prend la valeur de b\n    // refA ne devient PAS une r\xe9f\xe9rence vers la variable b\n    refA = b;\n    \n    // Je modifie ici toujours la variable a\n    refA += 1;\n\n    std::cout << a << ';' << b << std::endl;\n\n    return 0;\n}\n"))),(0,s.kt)("h2",{id:"passage-par-r\xe9f\xe9rence"},"Passage par r\xe9f\xe9rence"),(0,s.kt)("p",null,"Cela devient int\xe9ressant dans nos fonctions o\xf9 il va aussi \xeatre possible de d\xe9clarer un ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tre")," en tant que ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence")," et non pas comme une copie de la variable originale."),(0,s.kt)("p",null,"Pour indiquer que l'on souhaite recevoir une r\xe9f\xe9rence il faut ajouter une esperluette (",(0,s.kt)("kbd",null,"&"),") apr\xe8s le type de notre ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tre"),"."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Bien entendu on ne pourra passer en argument qu'une ",(0,s.kt)("strong",{parentName:"p"},"variable")," du ",(0,s.kt)("strong",{parentName:"p"},"m\xeame type")," que le type de la r\xe9f\xe9rence attendue par la fonction.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n// highlight-next-line\nvoid addOne(int & a)\n{\n    a += 1;\n}\n\nint main()\n{\n    int a { 8 };\n    \n    addOne(a);\n\n    std::cout << a << std::endl;\n\n    return 0;\n}\n")),(0,s.kt)("h3",{id:"r\xe9f\xe9rence-constante"},"R\xe9f\xe9rence constante"),(0,s.kt)("p",null,"Je vous avais dit que les ",(0,s.kt)("strong",{parentName:"p"},"variables constantes")," allaient prendre tout leur importance et bien c'est ici ! \ud83e\udd73"),(0,s.kt)("p",null,"En effet, si on manipule une ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence"),", on peut tr\xe8s bien ",(0,s.kt)("strong",{parentName:"p"},"modifier")," la variable originale comme vu pr\xe9c\xe9demment. Mais parfois on aimerait utiliser une r\xe9f\xe9rence (pour \xe9viter une copie d'un tableau par exemple) mais prot\xe9ger la variable originale et ",(0,s.kt)("strong",{parentName:"p"},"interdire les modifications")," de celle-ci, un mode ",(0,s.kt)("strong",{parentName:"p"},"lecture seule"),"."),(0,s.kt)("p",null,"On peut donc rajouter le mot cl\xe9 ",(0,s.kt)("inlineCode",{parentName:"p"},"const")," dans notre param\xe8tre comme cela:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <vector>\n\nfloat sum(std::vector<float> const& list)\n{\n    float sum {0};\n\n    for(float const value: list)\n    {\n        sum += value;\n    }\n\n    return sum; \n}\n\nint main()\n{\n    std::vector<float> list { 8.f, 4.2f, 3.1415f, 43.8f };\n    \n    float sum { sum(list) };\n\n    std::cout << "La somme des valeurs de mon tableau est de " << sum << std::endl;\n\n    return 0;\n}\n')),(0,s.kt)("p",null,"Si vous essayez de modifier un param\xe8tre constant vous allez obtenir une erreur (et c'est tant mieux !)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nvoid addOne(int const& a)\n{\n    a += 1;\n}\n\nint main()\n{\n    int a { 8 };\n    \n    addOne(a);\n\n    std::cout << a << std::endl;\n\n    return 0;\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"main.cpp: In function \u2018void addOne(const int&)\u2019:\nmain.cpp:4:7: error: assignment of read-only reference \u2018a\u2019\n    4 |     a += 1;\n      |     ~~^~~~\n")),(0,s.kt)("p",null,"Le compilateur nous indique qu'il y a une tentative de modification d'un param\xe8tre d\xe9clar\xe9 comme constant."),(0,s.kt)("p",null,"C'est donc une s\xe9curit\xe9 importante pour \xe9viter des erreurs et je vous recommande d'utiliser des ",(0,s.kt)("strong",{parentName:"p"},"variables ou param\xe8tres constants d\xe8s que possible"),"."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Une ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence")," constante ne peut \xe9videmment pas redevenir modifiable et le code ci-dessous va aussi produire une erreur de compilation."),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nvoid addOne(int & a)\n{\n    a += 1;\n}\n\nvoid readyOnlyFunction(int const & a)\n{\n    addOne(a);\n}\n\nint main()\n{\n    int a { 8 };\n    \n    readyOnlyFunction(a);\n\n    std::cout << a << std::endl;\n\n    return 0;\n}\n"))),(0,s.kt)("h3",{id:"le-cas-des-litt\xe9raux"},"Le cas des litt\xe9raux"),(0,s.kt)("p",null,"Avec les ",(0,s.kt)("strong",{parentName:"p"},"lit\xe9raux")," il se passe un autre m\xe9canisme."),(0,s.kt)("p",null,"Le code ci-dessous ne va pas compiler, \xe0 cause de la ligne 15."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"showLineNumbers",showLineNumbers:!0},"#include <iostream>\n\nvoid display(int & a)\n{\n    std::cout << a << std::endl;\n}\n\nvoid displayConst(int const & a)\n{\n    std::cout << a << std::endl;\n}\n\nint main()\n{\n    // highlight-next-line\n    display(42);\n    displayConst(42);\n    return 0;\n}\n")),(0,s.kt)("p",null,"En effet, nous passons un lit\xe9ral \xe0 notre fonction qui attend une ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence"),", un alias, sur une variable modifiable.\nUn lit\xe9ral n'est pas \xe0 proprement parl\xe9 une variable, il est invariable et n\u2019existe nulle part en m\xe9moire, il n'est pas modifiable."),(0,s.kt)("p",null,"Par contre, supprimez-la et le code compilera, la fonction ",(0,s.kt)("strong",{parentName:"p"},"displayConst")," ne pose pas de probl\xe8me de compilation.\nLa seule diff\xe9rence entre les deux fonctions, c\u2019est la pr\xe9sence du mot-cl\xe9 ",(0,s.kt)("inlineCode",{parentName:"p"},"const"),"."),(0,s.kt)("p",null,"Ici, le compilateur va cr\xe9er une ",(0,s.kt)("strong",{parentName:"p"},"variable constante temporaire"),", qui n\u2019",(0,s.kt)("strong",{parentName:"p"},"existera que le temps que la fonction"),", et va lui assigner le lit\xe9ral comme valeur.\nCela revient \xe0 faire cela par exemple:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nvoid displayConst(int const & a)\n{\n    std::cout << a << std::endl;\n}\n\nint main()\n{\n    {\n        int const temporaryVariable { 42 };\n        displayConst(temporaryVariable);\n        // A la sortie de ce scope (d\xe9limit\xe9 entre accolades) la variable temporaire va \xeatre d\xe9truite\n    }\n    \n    return 0;\n}\n")),(0,s.kt)("p",null,"C'est donc ",(0,s.kt)("strong",{parentName:"p"},"pr\xe9f\xe9rable")," d'utiliser des ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tres constants")," car cela permet \xe9galement de rendre ",(0,s.kt)("strong",{parentName:"p"},"compatible")," nos fonctions avec les ",(0,s.kt)("strong",{parentName:"p"},"litt\xe9raux"),"."),(0,s.kt)("h3",{id:"retour-par-r\xe9f\xe9rence"},"Retour par r\xe9f\xe9rence"),(0,s.kt)("p",null,"Les ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rences")," ont une contrainte particuli\xe8re\u202f: elles doivent ",(0,s.kt)("strong",{parentName:"p"},"toujours \xeatre valides"),"."),(0,s.kt)("p",null,"Dans le cas d\u2019un param\xe8tre de fonction il n'y a pas de probl\xe8me car l\u2019argument transmis \xe0 la fonction existera toujours quand celle-ci se terminera:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nvoid addOne(int & a)\n{\n    a += 1;\n}\n\nint main()\n{\n    int a { 8 };\n    \n    // la variable a est pass\xe9e en argument\n    addOne(a);\n    // Ici la variable a existe toujours \n    return 0;\n}\n")),(0,s.kt)("p",null,"Mais, dans le cas o\xf9 l\u2019on souhaite qu\u2019une fonction ",(0,s.kt)("strong",{parentName:"p"},"retourne une r\xe9f\xe9rence"),", cela peut \xeatre dangereux et on peut renvoyer une r\xe9f\xe9rence sur une variable qui n\u2019existera plus \xe0 la fin de la fonction\u202f!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nint& test()\n{\n    int a { 33 };\n    return a;\n    // A la fin du scope de la fonction la variable 'a' va \xeatre d\xe9truite\n}\n\nint main()\n{\n    int & reference { test() };\n    // ici notre r\xe9f\xe9rence est invalide !\n\n    return 0;\n}\n")),(0,s.kt)("p",null,"C'est un ",(0,s.kt)("strong",{parentName:"p"},"comportement ind\xe9termin\xe9"),". Il ne produira pas d'erreur de compilation mais l'utilisation de la r\xe9f\xe9rence est invalide."),(0,s.kt)("admonition",{type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"Il ne faut ",(0,s.kt)("strong",{parentName:"p"},"jamais")," renvoyer une ",(0,s.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence")," vers une ",(0,s.kt)("strong",{parentName:"p"},"variable locale")," \xe0 une fonction.")),(0,s.kt)("h2",{id:"signature-et-fonctions-surcharg\xe9es"},"Signature et fonctions surcharg\xe9es"),(0,s.kt)("p",null,"Ce qui diff\xe9rencie deux ",(0,s.kt)("strong",{parentName:"p"},"fonctions"),", \xe7a n\u2019est pas seulement leur ",(0,s.kt)("strong",{parentName:"p"},"nom")," mais \xe9galement leurs ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tres"),". C\u2019est ce qu\u2019on appelle la ",(0,s.kt)("strong",{parentName:"p"},"signature")," d\u2019une fonction."),(0,s.kt)("p",null,"On peut donc tr\xe8s bien avoir deux fonctions qui ont le m\xeame nom mais pas les m\xeames param\xe8tres:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nvoid testDisplay(int const a)\n{\n    std::cout << a << std::endl;\n}\n\nvoid testDisplay(float const a)\n{\n    std::cout << a << std::endl;\n}\n\nint main()\n{\n    testDisplay(42);\n    testDisplay(63.5f);\n\n    return 0;\n}\n")),(0,s.kt)("p",null,"Ici, le compilateur voit deux signatures diff\xe9rentes ",(0,s.kt)("inlineCode",{parentName:"p"},"testDisplay(int const a)")," et ",(0,s.kt)("inlineCode",{parentName:"p"},"testDisplay(float const a)")," il n'y a donc pas de probl\xe8me."),(0,s.kt)("p",null,"On appelle cela la ",(0,s.kt)("strong",{parentName:"p"},"surcharge"),', de l\u2019anglais "',(0,s.kt)("strong",{parentName:"p"},"overloading"),'". Cela rend le code plus simple et le compilateur appelle la bonne surcharge de la fonction pour les arguments pr\xe9cis\xe9s (si elle existe \xe9videmment).'),(0,s.kt)("p",null,"Par contre, le type de retour n'est pas une forme de surcharge. Deux fonctions avec le ",(0,s.kt)("strong",{parentName:"p"},"m\xeame nom"),", les ",(0,s.kt)("strong",{parentName:"p"},"m\xeames param\xe8tres")," et des ",(0,s.kt)("strong",{parentName:"p"},"types de retour diff\xe9rents")," ne compileront pas. Et c\u2019est logique, car comment savoir quelle fonction utiliser et quoi retourner sans ambigu\xeft\xe9 sinon ?"),(0,s.kt)("h2",{id:"prototype-d\xe9claration-des-fonctions"},"Prototype: d\xe9claration des fonctions"),(0,s.kt)("p",null,"J'ai expliqu\xe9 pr\xe9c\xe9demment qu'une fonction a besoin d'\xeatre ",(0,s.kt)("strong",{parentName:"p"},"d\xe9clar\xe9e avant son utilisation"),". C'est vrai mais incomplet."),(0,s.kt)("p",null,"Cette d\xe9claration peut se faire \xe0 l'aide de ce qu'on appelle le ",(0,s.kt)("strong",{parentName:"p"},"prototype")," de la ",(0,s.kt)("strong",{parentName:"p"},"fonction"),"."),(0,s.kt)("p",null,"Le ",(0,s.kt)("strong",{parentName:"p"},"prototype")," est tr\xe8s similaire \xe0 la ",(0,s.kt)("strong",{parentName:"p"},"signature")," et est compos\xe9 du ",(0,s.kt)("strong",{parentName:"p"},"nom"),", des ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tres"),"(et leur type) ",(0,s.kt)("strong",{parentName:"p"},"ET")," du ",(0,s.kt)("strong",{parentName:"p"},"type de retour")," de la fonction."),(0,s.kt)("p",null,"Voil\xe0 un petit exemple de fonction et son ",(0,s.kt)("strong",{parentName:"p"},"prototype"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// la d\xe9claration de la fonction sum avec son prototype\nint sum (int a, int b);\n\n// Le corps de la fonction qui contient les instructions de la fonction\nint sum (int a, int b)\n{\n    return a + b;\n}\n")),(0,s.kt)("p",null,"Il est possible d'",(0,s.kt)("strong",{parentName:"p"},"utiliser")," une ",(0,s.kt)("strong",{parentName:"p"},"fonction")," d\xe8s lors qu'elle est ",(0,s.kt)("strong",{parentName:"p"},"d\xe9clar\xe9e")," avec son ",(0,s.kt)("strong",{parentName:"p"},"prototype")," seulement."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint sum (int const a, int const b);\n\nint main()\n{\n    int const a { 42 };\n    int const b { 27 };\n\n    std::cout << "La somme de " << a << " et " << b << " vaut " << sum(a, b) << "." << std::endl;\n\n    return 0;\n}\n\nint sum (int const a, int const b)\n{\n    return a + b;\n}\n')),(0,s.kt)("p",null,"Je compl\xe8te donc:"),(0,s.kt)("p",null,"Une fonction doit \xeatre ",(0,s.kt)("strong",{parentName:"p"},"d\xe9clar\xe9e avant son utilisation"),". Cela peut se faire avec le ",(0,s.kt)("strong",{parentName:"p"},"prototype")," de la fonction ",(0,s.kt)("strong",{parentName:"p"},"ou")," le ",(0,s.kt)("strong",{parentName:"p"},"corps")," lui m\xeame. Une fonction peut \xeatre utilis\xe9e m\xeame si le ",(0,s.kt)("strong",{parentName:"p"},"corps")," de la fonction est \xe9crit ",(0,s.kt)("strong",{parentName:"p"},"plus tard")," du moment que son prototpye est \xe9crit avant toute utilisation de la fonction."),(0,s.kt)("p",null,"Le ",(0,s.kt)("strong",{parentName:"p"},"prototype")," est l\xe0 pour d\xe9clarer/signaler au compilateur que le corps de la fonction qu'on appelle sera bien d\xe9fini plus tard dans le programme."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Evidemment le programme ne va pas compiler si le corps de la fonction d\xe9clar\xe9e n'existe pas et va nous l'indiquer (",(0,s.kt)("strong",{parentName:"p"},"undefined reference"),"):"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"in function `main':\nmain.cpp: undefined reference to `sum(int, int)'\n"))),(0,s.kt)("h3",{id:"prototype-vs-signature"},"Prototype vs signature"),(0,s.kt)("p",null,"Il y a souvent un abus de langage et les termes de ",(0,s.kt)("strong",{parentName:"p"},"prototype")," et ",(0,s.kt)("strong",{parentName:"p"},"signature")," sont souvent interchang\xe9s. Je ne vous en voudrais donc pas si vous utilisez le terme de ",(0,s.kt)("strong",{parentName:"p"},"signature")," ou de ",(0,s.kt)("strong",{parentName:"p"},"prototype"),"."),(0,s.kt)("p",null,"Si on veut \xeatre pointilleux le ",(0,s.kt)("strong",{parentName:"p"},"prototype")," d\xe9signe le ",(0,s.kt)("strong",{parentName:"p"},"nom"),", les ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tres")," et le ",(0,s.kt)("strong",{parentName:"p"},"type de retour")," d'une fonction alors que la ",(0,s.kt)("strong",{parentName:"p"},"signature")," indique ",(0,s.kt)("strong",{parentName:"p"},"seulement")," son ",(0,s.kt)("strong",{parentName:"p"},"nom")," et ses ",(0,s.kt)("strong",{parentName:"p"},"param\xe8tres")," (permettant de faire de la ",(0,s.kt)("a",{parentName:"p",href:"#signature-et-fonctions-surcharg%C3%A9es"},"surcharge de fonction"),")."),(0,s.kt)("h2",{id:"r\xe9cursivit\xe9"},"R\xe9cursivit\xe9"),(0,s.kt)("p",null,"Enfin, il est possible d'utiliser une fonction dans elle m\xeame, on parle alors de ",(0,s.kt)("strong",{parentName:"p"},"r\xe9cursivit\xe9"),"."),(0,s.kt)("p",null,"Cela peut \xeatre utile quand le probl\xe8me que l'on souhaite r\xe9soudre est de nature ",(0,s.kt)("strong",{parentName:"p"},"r\xe9cursive"),", se r\xe9p\xe8te sur lui m\xeame."),(0,s.kt)("h3",{id:"un-petit-exemple"},"Un petit exemple"),(0,s.kt)("p",null,"Par exemple si l'on souhaite calculer le ",(0,s.kt)("strong",{parentName:"p"},"produit")," de tous les entiers de ",(0,s.kt)("inlineCode",{parentName:"p"},"1")," \xe0 une valeur ",(0,s.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,s.kt)("div",{className:"math math-display"},(0,s.kt)("span",{parentName:"div",className:"katex-display"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"P"),(0,s.kt)("mi",{parentName:"msub"},"n")),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mo",{parentName:"mrow"},"\u22ef"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mspace",{parentName:"mrow",linebreak:"newline"})),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"P_n = 1 \\times 2 \\times \\dots \\times n-1 \\times n \\\\")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.83333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.13889em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"minner"},"\u22ef"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")),(0,s.kt)("span",{parentName:"span",className:"mspace newline"}))))),(0,s.kt)("p",null,"On pourrait voir ce probl\xe8me de mani\xe8re ",(0,s.kt)("strong",{parentName:"p"},"r\xe9cursive")," en exprimant cette somme en fonction de la somme \xe0 l'\xe9tape d'avant (",(0,s.kt)("inlineCode",{parentName:"p"},"n-1"),"):"),(0,s.kt)("div",{className:"math math-display"},(0,s.kt)("span",{parentName:"div",className:"katex-display"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mtable",{parentName:"semantics",rowspacing:"0.24999999999999992em",columnalign:"right left",columnspacing:"0em"},(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("msub",{parentName:"mstyle"},(0,s.kt)("mi",{parentName:"msub"},"P"),(0,s.kt)("mi",{parentName:"msub"},"n")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mo",{parentName:"mrow"},"\u22ef"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"n"))))),(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("msub",{parentName:"mstyle"},(0,s.kt)("mi",{parentName:"msub"},"P"),(0,s.kt)("mi",{parentName:"msub"},"n")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mo",{parentName:"mrow"},"\u22ef"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"n"))))),(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("msub",{parentName:"mstyle"},(0,s.kt)("mi",{parentName:"msub"},"P"),(0,s.kt)("mi",{parentName:"msub"},"n")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"P"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"))),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"n")))))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\begin{aligned} P_n &= 1 \\times 2 \\times \\dots \\times n-1 \\times n \\\\ P_n &= (1 \\times 2 \\times \\dots \\times n-1) \\times n \\\\ P_n &= P_{n-1} \\times n \\end{aligned}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"4.500000000000002em",verticalAlign:"-2.000000000000001em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mtable"},(0,s.kt)("span",{parentName:"span",className:"col-align-r"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.5000000000000004em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-4.66em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.13889em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.16em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.13889em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))),(0,s.kt)("span",{parentName:"span",style:{top:"-1.6599999999999993em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.13889em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.000000000000001em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"col-align-l"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.5000000000000004em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-4.66em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"minner"},"\u22ef"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.16em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"minner"},"\u22ef"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"))),(0,s.kt)("span",{parentName:"span",style:{top:"-1.6599999999999993em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.301108em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.13889em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.208331em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.000000000000001em"}},(0,s.kt)("span",{parentName:"span"})))))))))))),(0,s.kt)("p",null,"On a finalement exprim\xe9 le produit des entiers de ",(0,s.kt)("inlineCode",{parentName:"p"},"1")," \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," comme \xe9tant ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," fois le produit des entiers de ",(0,s.kt)("inlineCode",{parentName:"p"},"1")," \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"n-1"),". "),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"On nomme ce r\xe9sulat la ",(0,s.kt)("strong",{parentName:"p"},"factorielle")," de ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," en Math\xe9matiques.")),(0,s.kt)("p",null,"Sous forme de fonction ",(0,s.kt)("strong",{parentName:"p"},"r\xe9cursive")," cela nous donnerait:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int fact(int n) {\n    return fact(n-1) * n;\n}\n")),(0,s.kt)("p",null,"On oublie cependant un ingr\xe9dient tr\xe8s important des fonctions r\xe9cursives: la ",(0,s.kt)("strong",{parentName:"p"},"condition d'arr\xeat"),"."),(0,s.kt)("p",null,"En effet, dans notre probl\xe8me on a bien pr\xe9cis\xe9 que c'\xe9tait de ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"1"))," \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"n"),".\nOn fait donc attention de s'arr\xeater quand ",(0,s.kt)("inlineCode",{parentName:"p"},"n <= 1"),".\nLa ",(0,s.kt)("strong",{parentName:"p"},"factorielle")," de ",(0,s.kt)("inlineCode",{parentName:"p"},"1")," \xe9tant \xe9gale \xe0 ",(0,s.kt)("inlineCode",{parentName:"p"},"1")," je retourne donc ",(0,s.kt)("strong",{parentName:"p"},"1"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int fact(int n)\n{\n    if( n <= 1 )\n    {\n        return 1;\n    }\n\n    return fact(n-1) * n;\n}\n")),(0,s.kt)("p",null,"Il faut faire attention \xe0 ne ",(0,s.kt)("strong",{parentName:"p"},"pas oublier")," cette ",(0,s.kt)("strong",{parentName:"p"},"condition d'arr\xeat")," et bien s'assurer qu'il est possible de la v\xe9rifier pour s'arr\xeater sinon notre fonction ne va ",(0,s.kt)("strong",{parentName:"p"},"jamais")," se terminer et notre programme va s\xfbrement planter, on parle de ",(0,s.kt)("strong",{parentName:"p"},"boucle infinie"),"."),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Dans la plupart des cas, il existe une version ",(0,s.kt)("strong",{parentName:"p"},"alternative")," non r\xe9cursive (avec des boucles par exemple)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int fact(int n)\n{\n    int P { 1 };\n    // Ici si n est n\xe9gatif alors la condition i <= n est directement invalide et on ne passe pas dans la boucle if et on retourne 1\n    for(int i {2}; i <= n; i++)\n    {\n        P *= i;\n    }\n    return P;\n}\n")),(0,s.kt)("p",null,"Il est ",(0,s.kt)("strong",{parentName:"p"},"pr\xe9f\xe9rable")," d'utiliser des fonctions ",(0,s.kt)("strong",{parentName:"p"},"non r\xe9cursives")," quand c'est possible car elle sont g\xe9n\xe9ralement plus performantes et moins propices \xe0 l'erreur (condition d'arr\xeat jamais valide, etc)."),(0,s.kt)("h2",{id:"r\xe9sum\xe9"},"R\xe9sum\xe9"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Une ",(0,s.kt)("strong",{parentName:"li"},"fonction")," est un ensemble d'instructions d\xe9limit\xe9 par des accolades (",(0,s.kt)("kbd",null,"{}"),")."),(0,s.kt)("li",{parentName:"ul"},"Elle peut retourner une valeur en pr\xe9cisant le ",(0,s.kt)("strong",{parentName:"li"},"type")," de retour ",(0,s.kt)("strong",{parentName:"li"},"avant le nom")," ou le mot-cl\xe9 ",(0,s.kt)("strong",{parentName:"li"},"void")," dans le cas o\xf9 l'on souhaite ne rien retourner."),(0,s.kt)("li",{parentName:"ul"},"Elle peut avoir des ",(0,s.kt)("strong",{parentName:"li"},"param\xe8tres"),"."),(0,s.kt)("li",{parentName:"ul"},"Les ",(0,s.kt)("strong",{parentName:"li"},"arguments")," pass\xe9s en ",(0,s.kt)("strong",{parentName:"li"},"param\xe8tre")," sont par d\xe9faut ",(0,s.kt)("strong",{parentName:"li"},"copi\xe9s"),"."),(0,s.kt)("li",{parentName:"ul"},"Il est possible de manipuler la variable d'origine \xe0 l'aide de ",(0,s.kt)("strong",{parentName:"li"},"r\xe9f\xe9rence")," (en ajoutant une ",(0,s.kt)("strong",{parentName:"li"},"esperluette")," (",(0,s.kt)("kbd",null,"&"),") ",(0,s.kt)("strong",{parentName:"li"},"apr\xe8s")," le ",(0,s.kt)("strong",{parentName:"li"},"type")," de notre variable)."),(0,s.kt)("li",{parentName:"ul"},"Il est possible de ",(0,s.kt)("strong",{parentName:"li"},"surcharger")," un fonction, c'est \xe0 dire avoir le m\xeame nom mais ",(0,s.kt)("strong",{parentName:"li"},"des param\xe8tres diff\xe9rents"),", on parle de ",(0,s.kt)("strong",{parentName:"li"},"signatures")," diff\xe9rentes."),(0,s.kt)("li",{parentName:"ul"},"Il est recommand\xe9 d'utiliser des param\xe8tres ",(0,s.kt)("strong",{parentName:"li"},"constants")," (avec le mot-cl\xe9 ",(0,s.kt)("inlineCode",{parentName:"li"},"const"),") pour ",(0,s.kt)("strong",{parentName:"li"},"\xe9viter des erreurs"),", ",(0,s.kt)("strong",{parentName:"li"},"\xe9viter des copies")," et ",(0,s.kt)("strong",{parentName:"li"},"prot\xe9ger nos variables"),".")))}u.isMDXComponent=!0}}]);