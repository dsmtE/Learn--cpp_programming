"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[6060],{95153:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=s(85893),i=s(11151);const r={title:"Retours",author:["Enguerrand DE SMET","Steeve VINCENT"]},l=void 0,a={id:"Annals/IMAC2026/S2/Feedbacks",title:"Retours",description:"Rendu Projet",source:"@site/content/Annals/IMAC2026/S2/Feedbacks.md",sourceDirName:"Annals/IMAC2026/S2",slug:"/Annals/IMAC2026/S2/Feedbacks",permalink:"/Learn--cpp_programming/Annals/IMAC2026/S2/Feedbacks",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Retours",author:["Enguerrand DE SMET","Steeve VINCENT"]},sidebar:"Annals",previous:{title:"Sujet",permalink:"/Learn--cpp_programming/Annals/IMAC2026/S2/sujet"}},o={},c=[{value:"Rendu Projet",id:"rendu-projet",level:2},{value:"Soutenance",id:"soutenance",level:2},{value:"Gestion de Projet",id:"gestion-de-projet",level:2},{value:"\xc9tapes",id:"\xe9tapes",level:3},{value:"Outils Kanban",id:"outils-kanban",level:3},{value:"Architecture logiciel",id:"architecture-logiciel",level:2},{value:"Variables Globales",id:"variables-globales",level:3},{value:"Dirty pattern",id:"dirty-pattern",level:3},{value:"Orient\xe9 objet",id:"orient\xe9-objet",level:3},{value:"Propret\xe9 du code",id:"propret\xe9-du-code",level:2},{value:"Convention de casses",id:"convention-de-casses",level:3},{value:"Nommage des variables et fonctions",id:"nommage-des-variables-et-fonctions",level:3},{value:"Faites des fonctions",id:"faites-des-fonctions",level:3},{value:"L\u2019indentation et les espaces",id:"lindentation-et-les-espaces",level:3},{value:"La longueur des lignes",id:"la-longueur-des-lignes",level:3},{value:"Organisation des fichiers",id:"organisation-des-fichiers",level:2},{value:"Attributs ou Variable ?",id:"attributs-ou-variable-",level:3},{value:"Variables en dur",id:"variables-en-dur",level:3},{value:"Erreurs propre aux C++",id:"erreurs-propre-aux-c",level:2},{value:"Op\xe9ration Bool\xe9enne",id:"op\xe9ration-bool\xe9enne",level:3},{value:"Pragma once vs ifndef",id:"pragma-once-vs-ifndef",level:3},{value:"Pointeurs",id:"pointeurs",level:3},{value:"Instance",id:"instance",level:3},{value:"Optimisation",id:"optimisation",level:2},{value:"chaines de caract\xe8res VS entiers (\xe9num\xe9ration)",id:"chaines-de-caract\xe8res-vs-entiers-\xe9num\xe9ration",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"rendu-projet",children:"Rendu Projet"}),"\n",(0,t.jsx)(n.p,{children:"Envoyer uniquement le minimum n\xe9cessaire pour compiler et lancer l'executable:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["code source du projet","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"S\u2019il y a du code mort (qui n\u2019est utilis\xe9 nulle part) ou des lignes de codes comment\xe9es, nettoyer avant le rendu."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"les utilitaires de compilation (Makefile, CMakelist, librairies ou autre)"}),"\n",(0,t.jsx)(n.li,{children:"ressources/assets du projet (textures, son, polices ...)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Ne pas envoyer:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"les executables et les dossiers compil\xe9s (.o et autres fichiers g\xe9n\xe9r\xe9s par cmake)"}),"\n",(0,t.jsx)(n.li,{children:"Si vous pouvez, \xe9viter les fichiers lourds (son/video pas compress\xe9.e, ...)"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"git",type:"warning",children:(0,t.jsxs)(n.p,{children:["Il est important de ne pas inclure les fichiers compil\xe9s dans le d\xe9p\xf4t git car ils sont propres \xe0 chaque machine et configuration (compilateur, structure de dossier personnelle, etc).\nIl est pr\xe9f\xe9rable de les ajouter dans le fichier ",(0,t.jsx)(n.code,{children:".gitignore"})," pour ne pas les inclure dans le d\xe9p\xf4t git.\nDe plus ces fichier sont g\xe9n\xe9r\xe9s automatiquement \xe0 partir des fichiers sources, il n'est donc pas n\xe9cessaire de les inclure dans le d\xe9p\xf4t git et cela permet de garder le d\xe9p\xf4t git propre."]})}),"\n",(0,t.jsx)(n.h2,{id:"soutenance",children:"Soutenance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Pr\xe9parer le d\xe9roul\xe9 de la soutenance","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Si d\xe9mo, faire en sorte que votre sc\xe9nario de d\xe9mo mette en valeur les fonctionnalit\xe9s qui fonctionnent le mieux"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Ne montrer pas de code (ou tr\xe8s peu)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Si vous voulez montrer l\u2019architecture ou des algos, soyez sch\xe9matique"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Si vous voulez d\xe9crire des fonctionnalit\xe9s, utiliser surtout la d\xe9mo pour les montrer"}),"\n",(0,t.jsx)(n.li,{children:"Vous pouvez parler des difficult\xe9s rencontr\xe9s mais il ne faut pas \xe7a p\xe8se sur le reste de la soutenance. Vous \xeates l\xe0 pour montrez le meilleur de vous m\xeame et le travail accompli."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"gestion-de-projet",children:"Gestion de Projet"}),"\n",(0,t.jsx)(n.h3,{id:"\xe9tapes",children:"\xc9tapes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Commencer par vous approprier les \u201cspecs\u201d/le cahier des charges","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reprendre avec vos mots et assurez vous d\u2019avoir compris ce qui est attendu"}),"\n",(0,t.jsx)(n.li,{children:"Faire une veille et voir l\u2019\xe9tat de l\u2019art selon le projet. Si c\u2019est un jeu de type Tower Defense, voir ce qui existe comme jeu de ce type."}),"\n",(0,t.jsxs)(n.li,{children:["D\xe9couper le projet en petite tache, Exemple:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Faire l\u2019affichage d\u2019une carte diviser en plusieurs tiles."}),"\n",(0,t.jsx)(n.li,{children:"Lire un fichier ITD et en tirer des informations utilisables."}),"\n",(0,t.jsx)(n.li,{children:"Faire bouger un Ennemie d\u2019un bout \xe0 l\u2019autre de la carte."}),"\n",(0,t.jsx)(n.li,{children:"\u2026"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["R\xe9fl\xe9chir \xe0 la DA, le level design, l\u2019exp\xe9rience utilisateur, \u2026","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cette \xe9tape est moins importante dans le cadre d\u2019un projet informatique, \xe9tant donn\xe9 le temps qui vous est imparti, ne passez pas trop de temps dessus"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"\xc9valuer la temporalit\xe9 de ces t\xe2ches. Il vous est compliqu\xe9 pour l\u2019instant d\u2019\xe9valuer le temps que va prendre une tache mais d\xe9terminer au moins quelle tache doit \xeatre fait avant quelle autre et s\u2019il y a des taches parall\xe9lisable. En gestion de projet, il s\u2019agit de faire un diagramme de Gant (vous n\u2019\xeates pas oblig\xe9 d\u2019aller aussi loin)"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Tout au long du projet, r\xe9fl\xe9chir, \xe0 c\xf4t\xe9, \xe0 ce qui peut \xeatre int\xe9ressant \xe0 garder/documenter pour la soutenance/le rapport"}),"\n",(0,t.jsxs)(n.li,{children:["R\xe9fl\xe9chir collectivement \xe0 l\u2019organisation du code et \xe0 la base de celui ci.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Faire un sch\xe9ma ou une mind map pour clarifier vos id\xe9es."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Attribuer les t\xe2ches \xe0 chacun selon les envies et les expertises.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u26a0\ufe0f"," Pour un projet dans le cadre d\u2019un cours informatique, il faut que chacun soit impliqu\xe9 dans le code, il s\u2019agit avant tout d\u2019une \xe9valuation de vos comp\xe9tences."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["D\xe9velopper","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Concevoir des tests it\xe9ratif qui valide la fonctionnalit\xe9 que vous d\xe9veloppez."}),"\n",(0,t.jsxs)(n.li,{children:["D\xe9velopper sans GUI lorsque la fonctionnalit\xe9 n\u2019est pas directement li\xe9 \xe0 celle ci.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Exemple: D\xe9placement d\u2019un ennemie selon un graphe, afficher la position dans la console et v\xe9rifier que la position est raccord avec le graph"}),"\n",(0,t.jsx)(n.li,{children:"Vous pouvez bien s\xfbr vous aider de la GUI pour vous rendre compte de la fonctionnalit\xe9 dans son \xe9tat final mais elle ne doit pas vous bloquer"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Expliquer succinctement votre code \xe0 vos collaborateurs"}),"\n",(0,t.jsx)(n.li,{children:"Raccorder votre code au reste du projet"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Faire les assets et le level design","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Selon la DA choisi, trouver ou cr\xe9er les assets (textures, sons, police\u2026) dont votre jeu/programme a besoin."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"outils-kanban",children:"Outils Kanban"}),"\n",(0,t.jsx)(n.p,{children:"Pour organiser vos t\xe2ches, vous pouvez utiliser des outils comme:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Trello"}),"\n",(0,t.jsx)(n.li,{children:"Notion"}),"\n",(0,t.jsx)(n.li,{children:"GitHub / Gitlab"}),"\n",(0,t.jsx)(n.li,{children:"Meistertask"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"architecture-logiciel",children:"Architecture logiciel"}),"\n",(0,t.jsx)(n.h3,{id:"variables-globales",children:"Variables Globales"}),"\n",(0,t.jsx)(n.p,{children:"\xc9viter les variables globales, d\xe9j\xe0 pour une question de suivi et de lecture de code, pour savoir d'o\xf9 vient une variable et o\xf9 est elle initialis\xe9e."}),"\n",(0,t.jsx)(n.p,{children:"Par ailleurs si on multiplie les variables globales, on risque m\xe9langer des variables locales avec celles-l\xe0."}),"\n",(0,t.jsxs)(n.p,{children:["Si j'ai une variable ",(0,t.jsx)(n.code,{children:"mur"})," globale et que je veux nommer une variable locale ",(0,t.jsx)(n.code,{children:"mur"}),", soit le compilateur va m'envoyer chier soit le programme va avoir des comportements inattendu parce que les variables se confondent."]}),"\n",(0,t.jsxs)(n.p,{children:["Et une autre raison qui vous emp\xeache tout simplement de le faire, le compilateur, lorsqu'il atteint la compilation des fichiers interm\xe9diaires, il peut \xeatre amen\xe9 \xe0 vous afficher une erreur de variable multiple ",(0,t.jsx)(n.code,{children:"multiple declaration of machin"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.mdxAdmonitionTitle,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),"\ud83d\udca1:"]}),(0,t.jsx)(n.p,{children:"Faire une structure ou une classe qui va contenir les donn\xe9es dont vous avez besoin dans beaucoup d'endroit et qui sont uniques \xe0 une execution du programme."}),(0,t.jsx)(n.p,{children:"Vous pouvez ensuite passer cette structure (par r\xe9f\xe9rence) dans vos fonctions pou acc\xe9der \xe0 l'\xe9tat de votre jeu et des variables partag\xe9s."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"struct Game {\n\tBallsList balls;\n\tWall walls[10];\n\tint walls_count;\n  std::string background_color;\n}\n"})}),(0,t.jsxs)(n.p,{children:["Une autre solution est de cr\xe9er une classe et de lui ajouter une fonction (statique) qui va cr\xe9er une instance unique et la renvoyer \xe0 chaque fois, c'est ce qu'on appelle un ",(0,t.jsx)(n.strong,{children:"singleton"}),"."]}),(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Attention, les singletons gardent les m\xeame travers que les variables globales en terme de suivi de donn\xe9es. il faut donc les utiliser avec parcimonie."})})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Game {\n\nprivate:\n    // Constructeur priv\xe9 pour rendre la classe impossible \xe0 instancier manuellement sans passer par la m\xe9thode get_instance\n    Game() {}\n\n    // Un singleton est une instance unique de la classe donc on ne peut pas la copier\n    Game(Game const&) = delete;\n    void operator=(Game const&) = delete;\n\npublic:\n    // M\xe9thode publique pour r\xe9cup\xe9rer l'instance unique de la classe (et la cr\xe9er si elle n'existe pas)\n    static Game& get_instance() {\n        static Game instance;\n        return instance;\n    }\n    \n    // ...\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"quelques liens pour approfondir le sujet:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://medium.com/@pawara/singleton-design-pattern-c085098f1651",children:"Singleton Design Pattern"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://medium.com/@pawara/singleton-design-pattern-and-meyers-singleton-b5bc5aa2f23c",children:"Meyers Singleton"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/singleton",children:"Singleton Pattern"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dirty-pattern",children:"Dirty pattern"}),"\n",(0,t.jsx)(n.p,{children:"J'ai vu plusieurs d'entre vous utiliser un pattern tr\xe8s utilis\xe9 dans les moteurs de jeux, que je vais appeler le \"dirty pattern\". C'est une technique qui consiste \xe0 marquer un \xe9l\xe9ment (structure, classe) comme \"dirty\" pour savoir si il faut mettre \xe0 jour certaines donn\xe9es qui lui sont associ\xe9es. C'est une technique tr\xe8s utilis\xe9e dans les moteurs de jeux pour savoir si il faut recalculer certaines donn\xe9es (comme le chemin d'un ennemi par exemple). Cela permet d'\xe9viter de recalculer des donn\xe9es qui n'ont pas chang\xe9. Par exemple, si vous avez un monstre qui se d\xe9place sur une carte, vous pouvez marquer le monstre comme \"dirty\" si il a chang\xe9 de position. Ainsi, vous savez que vous devez recalculer le chemin du monstre pour le d\xe9placer \xe0 sa nouvelle position. Si le monstre n'a pas boug\xe9, vous n'avez pas besoin de recalculer le chemin. C'est une technique tr\xe8s efficace pour \xe9viter de recalculer des donn\xe9es inutilement."}),"\n",(0,t.jsx)(n.h3,{id:"orient\xe9-objet",children:"Orient\xe9 objet"}),"\n",(0,t.jsxs)(n.p,{children:["C'est bien d'avoir pens\xe9 \xe0 l'orient\xe9 objet, mais attention \xe0 ne pas tomb\xe9 dans le pi\xe8ge de l'orient\xe9 objet pour l'orient\xe9 objet. C'est une notion que vous d\xe9couvrez plus l'ann\xe9e prochaine mais il est possible de d\xe9finir la visibilit\xe9 des attributs et m\xe9thodes d'une structure ou classe (",(0,t.jsx)(n.strong,{children:"public"}),", ",(0,t.jsx)(n.strong,{children:"protected"}),", ",(0,t.jsx)(n.strong,{children:"private"}),"). Cela permet de prot\xe9ger les attributs et de ne pas permettre de les modifier directement (pour l'utilisateur de la classe). C'est une bonne pratique de les mettre en private et de cr\xe9er des m\xe9thodes pour les modifier (",(0,t.jsx)(n.strong,{children:"setter"}),") et les r\xe9cup\xe9rer (",(0,t.jsx)(n.strong,{children:"getter"}),"). Cela permet de contr\xf4ler l'acc\xe8s aux attributs et de garantir l'int\xe9grit\xe9 des donn\xe9es."]}),"\n",(0,t.jsx)(n.p,{children:"mais il ne faut pas tomber dans l'exc\xe8s, si c'est pour juste retourner et r\xe9cup\xe9rer la value d'un attribut (autant qu'il soit public dans ce cas)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <string>\n\nclass Monster\n{\npublic:\n    float get_max_health();\n    float get_health_points();\n    std::string get_name();\n    // ...\n    void set_max_health(float const max_health);\n    void set_health_points(float const health_points);\n    void set_name(std::string const& name);\n    // ...\nprivate:\n    float max_health;\n    float health_points;\n    std::string name;\n    // ...\n};\n\nfloat Monster::get_max_health()\n{\n    return this->max_health;\n}\n\nfloat Monster::get_health_points()\n{\n    return this->health_points;\n}\n\nstd::string Monster::get_name()\n{\n    return this->name;\n}\n\n// ...\n\nvoid Monster::set_max_health(float const max_health)\n{\n    this->max_health = max_health;\n}\nvoid Monster::set_health_points(float const health_points)\n{\n    this->health_points = health_points;\n}\nvoid Monster::set_name(std::string const& name)\n{\n    this->name = name;\n}\n// ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ici, il serait pr\xe9f\xe9rable de mettre certains attributs en ",(0,t.jsx)(n.strong,{children:"public"})," (si ils sont juste des valeurs modifiable sans contr\xf4le par l'utilisateur) et d'autres en ",(0,t.jsx)(n.strong,{children:"private"})," (si ils sont des donn\xe9es interne \xe0 la classe). Par exemple, le maximum de vie d'un monstre ne devrait pas \xeatre modifi\xe9 directement par l'utilisateur mais set une seule fois \xe0 la cr\xe9ation du monstre (\xe0 l'aide d'un constructeur par exemple). En revanche, la vie actuelle du monstre peut \xeatre modifi\xe9e par l'utilisateur (lorsqu'il est attaqu\xe9 par exemple). L'int\xe9r\xeat de faire un setter pour la vie actuelle est de pouvoir v\xe9rifier que la vie ne d\xe9passe pas le maximum de vie du monstre par exemple."]}),"\n",(0,t.jsx)(n.p,{children:"Dans l'exemple ci-dessous on v\xe9rifie donc que la vie actuelle est bien comprise entre 0 et le maximum de vie. Le nom du monstre peut \xeatre modifi\xe9 par l'utilisateur(pas de v\xe9rification particuli\xe8re), je laisse l'attribut en public pour \xe9viter d'avoir \xe0 cr\xe9er un getter et un setter pas tr\xe8s utile pour cet attribut."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <string>\n\nclass Monster\n{\npublic:\n    // Constructeur\n    Monster(float const max_health, std::string const& name);\n    // ...\n    void set_health_points(float health_points);\n    void get_health_points();\n    // ...\n    // Attributs publics\n    std::string name;\n    // ...\nprivate:\n    // Attributs priv\xe9s\n    float max_health;\n    float health_points;\n};\n\nMonster::Monster(float max_health, std::string const& name)\n{\n    this->max_health = max_health;\n    // On initialise la vie actuelle du monstre \xe0 son maximum\n    this->health_points = max_health;\n    this->name = name;\n}\n\nvoid Monster::set_health_points(float health_points)\n{\n    if (health_points > this->max_health)\n    {\n        this->health_points = this->max_health;\n    }\n    else if (health_points < 0)\n    {\n        this->health_points = 0;\n    }\n    else\n    {\n        this->health_points = health_points;\n    }\n}\n\nfloat Monster::get_health_points()\n{\n    return this->health_points;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"propret\xe9-du-code",children:"Propret\xe9 du code"}),"\n",(0,t.jsx)(n.p,{children:"C'est quoi d\xe9j\xe0 la propret\xe9 du code ? il faudrait peut \xeatre plus parler de rangement du code. Comme pour un classeur ou un bureau, mieux c'est rang\xe9, mieux on s'y retrouve (m\xeame si certains s'y retrouve mieux dans le chaos). On peut ranger le code sur certains aspect pour mieux s'y retrouver et le lire plus facilement."}),"\n",(0,t.jsx)(n.h3,{id:"convention-de-casses",children:"Convention de casses"}),"\n",(0,t.jsx)(n.p,{children:"Je fais une petite parenth\xe8se pour parler de casses, c\u2019est \xe0 dire du fait d\u2019avoir des majuscules ou des minuscules et des undescores ou non. Je vous renvoie sur ce site pour un petit r\xe9sum\xe9 des diff\xe9rentes type de casses."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://curiouslychase.com/notes/most-common-programming-case-types/",children:"Most Common Programming Case Types"})}),"\n",(0,t.jsx)(n.p,{children:"Dans ce document vous allez me voir \xe9crire en snake_case pour les variables et fonctions, c\u2019est ma d\xe9formation professionnelle venant de mes habitudes python et rust. En C++, le consensus se tourne vers le camelCase, pareil pour le C# (Unity notamment) mais on retrouve du PascalCase pour les fonctions. Mais \xeates libre \xe0 niveau l\xe0, mais je vous conseille de suivre la convention du langage car vous serez souvent amen\xe9s \xe0 utiliser des librairies, des packages, des frameworks\u2026 et par soucis d\u2019uniformit\xe9, il vaut mieux faire comme les standards."}),"\n",(0,t.jsx)(n.p,{children:"L'important c'est de choisir une convention et de s'y tenir pour garder une coh\xe9rence dans le code."}),"\n",(0,t.jsx)(n.h3,{id:"nommage-des-variables-et-fonctions",children:"Nommage des variables et fonctions"}),"\n",(0,t.jsx)(n.p,{children:'plus vos noms sont explicites plus votre code est "straightforward", ont comprend le comportement du code rien qu\'en le lisant.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool shape_is_closed(Shape* shape)\n{\n\tint sum_of_angles {0};\n\tconst int points_count { shapes->points.size() };\n\n\tfor (int i {0}; i<points_count-2; i++)\n\t{\n\n\t\tconst Vector current_vector = make_vector_from_points(shapes->points[i], shapes->points[i+1]);\n\t\tconst Vector next_vector = make_vector_from_points(shapes->points[i+1], shapes->points[i+2]);\n\t\tangle = process_angle_from_vectors(current_vector, next_vector);\n\n\t\tsum_of_angles += angle;\n\t}\n\n\tconst Vector last_vector = make_vector_from_points(shapes->points[points_count-1], shapes->points[0]);\n\tconst Vector first_vector = make_vector_from_points(shapes->points[0], shapes->points[1]);\n\tlast_angle = process_angle_from_vectors(last_vector, first_vector);\n\t\n\tsum_of_angles += last_angle;\n\n\tif (sum_of_angles % 360 == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Le code est plus long mais il est plus verbeux et on comprend ce que fais le code en lisant les variables et fonctions."}),"\n",(0,t.jsxs)(n.p,{children:["la fonction s'appelle ",(0,t.jsx)(n.code,{children:"shape_is_closed"}),", il va s\xfbrement d\xe9terminer si une forme est ferm\xe9e. La premi\xe8re ligne d\xe9finie la variable ",(0,t.jsx)(n.code,{children:"sum_of_angles"})," qu'on retrouve \xe0 la fin avant le return, ok \xe7a fait la somme des angles pour d\xe9terminer si c'est ferm\xe9."]}),"\n",(0,t.jsxs)(n.p,{children:["Il y a un ",(0,t.jsx)(n.code,{children:"for"})," dans lequel on calcul un angle \xe0 partir d'un segment et celui qui le suit, apr\xe8s \xe7a on recalcule un angle entre le dernier segment et le premier."]}),"\n",(0,t.jsx)(n.p,{children:"Dans ce code, j'exag\xe8re la verbosit\xe9 pour avoir une lecture tr\xe8s litt\xe9rale, on peut trouver un juste milieu."}),"\n",(0,t.jsx)(n.h3,{id:"faites-des-fonctions",children:"Faites des fonctions"}),"\n",(0,t.jsxs)(n.p,{children:["Avoir des fonctions ne permet pas seulement de capitaliser sur un ensemble d\u2019instruction, on peut les utiliser pour structurer le code, notamment en rassemblant des instructions r\xe9pondant \xe0 un besoin particulier sous un m\xeame bloc \u201cnomm\xe9\u201d. par exemple si vous calculer des collisions, faites une fonction ",(0,t.jsx)(n.code,{children:"check_collisions"})," , on saura que le bout de code \xe0 l\u2019int\xe9rieur vise \xe0 calculer une collision et quand vous appelez cette fonction dans votre programme on sait que vous souhaitez faire un calcul de collision \xe0 cette endroit."]}),"\n",(0,t.jsx)(n.p,{children:"Posez vous la question de la longueur de vos fonctions, si elles sont trop longues, divisez les en sous fonctions. Les plus stricts d\xe9veloppeurs diront qu\u2019une bonne fonction ne doit pas d\xe9passer 10 lignes, je trouve personnellement \xe7a trop contraignant, mais cette r\xe8gle me sert au moins de base pour ma r\xe9flexion. A chaque dizaines de lignes que je d\xe9passe, je dois me poser la question \u201cest ce que je peux bouger des instructions dans une fonction d\xe9di\xe9e ?\u201d"}),"\n",(0,t.jsxs)(n.p,{children:["Je vois par exemple un ",(0,t.jsx)(n.code,{children:"main"})," qui fait une centaine de lignes et qui contient \xe7a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"\t\tWall walls[MAX];\n\t\tVector2 position;\n\t\tbool horizontal;\n\t\tfor (int i = 0; i<walls_count;i++) {\n\t\t    position.x = 150 + rand() % (SCREEN_WIDTH-150);\n\t\t    position.y = 150 + rand() % (SCREEN_HEIGHT-150);\n\t\t    int taille = 150 + rand() % 200;\n\t\t\n\t\t    if (randomNumber(1, 2) == 1) {\n\t\t        horizontal = true;\n\t\t    } else {\n\t\t        horizontal = false;\n\t\t    }\n\t\t    walls[i].initialize(horizontal, taille, position);\n\t\t}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Je pourrais faire une fonction ",(0,t.jsx)(n.code,{children:"initialize_walls"})," ou une m\xe9thode ",(0,t.jsx)(n.code,{children:"initialize_random"})," dans la structure/classe Wall."]}),"\n",(0,t.jsx)(n.h3,{id:"lindentation-et-les-espaces",children:"L\u2019indentation et les espaces"}),"\n",(0,t.jsx)(n.p,{children:"L\u2019indentation vous permet de bien situer les blocs (les if/else, for/while, switch, structures\u2026)."}),"\n",(0,t.jsx)(n.p,{children:"dans ce code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"for(int i {0}; i < codes; i++)\n{\nfor(int j {0}; j < lines; j++)\n{\nif(forme)\nmy_code = is_good + is_better;\t\nelse\nmy_code = is_good;\na_result = call_a_function();\nmake_it_better(a_result)\nwhile(something_call)\n{\nif(someone_here())\n{\nanswer()\n}\nelse{\nanswer_everyone();\ntake_a_moment();\nperson = find_someone();\n}\n}\n}\nwhile(yolo)\n{\nmake(toto)\n}\nwhile(doing_wrong)\n{\nerror = watch_code(codes);\ncall_a_formater(codes, errors);\n}\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Il est plus compliqu\xe9 de terminer la limite de chaque bloc compar\xe9 \xe0 ce code l\xe0"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"for(int i {0}; i < codes; i++)\n{\n    for(int j {0}; j < lines; j++)\n    {\n        if(forme)\n            my_code = is_good + is_better;  \n        else\n            my_code = is_good;\n        a_result = call_a_function();\n        make_it_better(a_result)\n        while(something_call)\n        {\n            if(someone_here())\n            {\n                answer()\n            }\n            else{\n                answer_everyone();\n                take_a_moment();\n                person = find_someone();\n            }\n        }\n    }\n    while(yolo)\n    {\n        make(toto)\n    }\n    while(doing_wrong)\n    {\n        error = watch_code(codes);\n        call_a_formater(codes, errors);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"En plus de l\u2019indentation, veillez \xe0 espacer votre code pour souligner la proximit\xe9 de certaines instructions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'void main()\n{\n\tWindow* window = new Window();\n\tSoundSystem* sound_system = new SoundSystem();\n\tResourcesManager resources = new ResourcesManager();\n\t\n\twindow.resize(720, 1080);\n\twindow.set_title("Ma fenetre");\n\twindow.add_button("Mon Bouton");\n\t\n\tsound_system.register_sound("le_message_de_paix.mp3");\n\tsound_system.register_sound("le_code.mp3");\n\tsound_system.play_loop("le_message_de_paix.mp3");\n\t\n\tresources.register_image("yolo.png")\n\tresources.register_image("toto.png")\n\t\n\twindow.open();\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Vous \xe9crivez un code avant tout pour vous et pour les autres et pas pour la machine. La machine se fiche de savoir si vous avez mis un espace avant ou apr\xe8s un op\xe9rateur, si vous avez mis une ligne vide entre deux blocs de code. Mais pour vous et pour les autres, c\u2019est plus facile de lire un code bien espac\xe9 et indent\xe9."}),"\n",(0,t.jsx)(n.p,{children:"Dans d'autres languages comme le python, l'indentation est obligatoire pour d\xe9finir les blocs de code, en C++ l'indentation est une convention mais en pratique tout le monde se force \xe0 l'appliquer pour rendre le code plus lisible."}),"\n",(0,t.jsx)(n.h3,{id:"la-longueur-des-lignes",children:"La longueur des lignes"}),"\n",(0,t.jsx)(n.p,{children:"\xc9viter les lignes trop longue. La convention actuelle conseille de ne pas d\xe9passer 80 caract\xe8res dans une m\xeame ligne. Ceci dans l\u2019optique de pouvoir diviser sa fen\xeatre en 2 pour pouvoir comparer du code, voir des signatures de fonctions,\u2026 ou bien de pouvoir mettre son \xe9cran \xe0 la vertical."}),"\n",(0,t.jsx)(n.p,{children:"Je trouve personnellement que 80 caract\xe8res est assez contraignant. Je me permet des \xe9carts \xe0 90 voire 100 grand maximum."}),"\n",(0,t.jsx)(n.p,{children:"Pour \xe9viter les lignes trop longues, il suffit tout simplement de diviser les instructions longues en plusieurs ligne. Il y a certaines conventions pour faire \xe7a, en g\xe9n\xe9ral votre IDE vous aide \xe0 le faire."}),"\n",(0,t.jsx)(n.p,{children:"Dans l\u2019exemple pr\xe9c\xe9dent j\u2019ai des lignes d\xe9passant les 80 caract\xe8res, reformatons \xe7a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool shape_is_closed(Shape* shape)\n{\n\tint sum_of_angles {0};\n\tconst int points_count { shapes->points.size() };\n\n\tfor (int i {0}; i<points_count-2; i++)\n\t{\n\n\t\tconst Vector current_vector = make_vector_from_points(\n\t\t\tshapes->points[i], shapes->points[i+1]\n\t\t);\n\t\tconst Vector next_vector = make_vector_from_points(\n\t\t\tshapes->points[i+1], shapes->points[i+2]\n\t\t);\n\t\tangle = process_angle_from_vectors(current_vector, next_vector);\n\n\t\tsum_of_angles += angle;\n\t}\n\n\tconst Vector last_vector = make_vector_from_points(\n\t\tshapes->points[points_count-1], shapes->points[0]\n\t);\n\tconst Vector first_vector = make_vector_from_points(\n\t\tshapes->points[0], shapes->points[1]\n\t);\n\tlast_angle = process_angle_from_vectors(last_vector, first_vector);\n\t\n\tsum_of_angles += last_angle;\n\n\tif (sum_of_angles % 360 == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Le code est plus long en vertical mais on s\u2019assure que ce soit lisible en toute circonstance. Si vous ne suivez pas la convention, assurez vous au moins d\u2019avoir des lignes qui se lisent sur votre IDE sans avoir \xe0 scroller horizontalement."}),"\n",(0,t.jsx)(n.h2,{id:"organisation-des-fichiers",children:"Organisation des fichiers"}),"\n",(0,t.jsxs)(n.p,{children:["\xc9viter au maximum d\u2019avoir un main.cpp qui d\xe9passe 100 lignes. Le main.cpp et la fonction ",(0,t.jsx)(n.code,{children:"main()"})," doivent \xeatre l\xe0 que pour faire l\u2019initialisation des variables et lancer la fonction principale (dans un projet, en TP \xe7a peut contenir le corps du programme)."]}),"\n",(0,t.jsxs)(n.p,{children:["Cependant ne mettez pas tout le code que aviez pr\xe9vu dans le main.cpp dans un seul autre fichier, essayez le plus possible de disperser le code dans diff\xe9rents fichiers. Le plus souvent on fait un couple header/source par structure. Dans le cas du projet on pourrait avoir ",(0,t.jsx)(n.code,{children:"ball.h/ball.cpp"})," , ",(0,t.jsx)(n.code,{children:"wall.h/wall.cpp"})," et ",(0,t.jsx)(n.code,{children:"game.h/game.cpp"}),". On peut aussi avoir des \u201cutilitaires\u201d tant que vous d\xe9finissez bien la nature de chaque utilitaire, par exemple ici ",(0,t.jsx)(n.code,{children:"physics.h/physics.cpp"})," et ",(0,t.jsx)(n.code,{children:"drawing.h/drawing.cpp"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour des projets \xe0 plus large echelles, je vous invite \xe0 faire des dossiers pour regrouper vos fichiers, la hi\xe9rarchie de fichiers d\xe9pendra de la logique utilis\xe9s. Pour un jeu on pourra par exemple avoir des dossiers principaux ",(0,t.jsx)(n.code,{children:"core"}),", ",(0,t.jsx)(n.code,{children:"render_engine"}),", ",(0,t.jsx)(n.code,{children:"the_game"})]}),"\n",(0,t.jsx)(n.h3,{id:"attributs-ou-variable-",children:"Attributs ou Variable ?"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'class App {\n\t// ...\n\tGLuint texture_path;\n\tstd::unordered_map<std::string, GLuint> tile_texture_mapping;\n\t// ...\n}\n\n// init\nthis->texture_path = loadTexture(path);\nthis->tile_texture_mapping.insert({"path", this->texture_path});\n\n// draw\ndraw_quad_with_texture(tile_texture_mapping["path"], w, h, taille);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Si vous d\xe9clarez un attribut (ici ",(0,t.jsx)(n.code,{children:"_texturepath"}),") mais qu\u2019il n\u2019est utilis\xe9 qu\u2019une seule fois, il n\u2019est peut \xeatre pas n\xe9cessaire d\u2019avoir un attribut et \xe9valuez si une variable n\u2019est pas suffisante"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'class App {\n\t// ...\n\tstd::unordered_map<std::string, GLuint> tile_texture_mapping;\n\t// ...\n}\n\n// init\nGLuint texture_path{loadTexture(path)};\nthis->tile_texture_mapping.insert({"path", texture_path});\n\n// draw\ndraw_quad_with_texture(tile_texture_mapping["path"], w, h, taille);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"variables-en-dur",children:"Variables en dur"}),"\n",(0,t.jsx)(n.p,{children:"Attention aux donn\xe9es en dur dans le code. Par exemple, dans le code ci-dessous, il y a des conditions sur les coordonn\xe9es x et y qui sont en dur dans le code."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"if (x > 11) { return; }\nelse if (y == 1 && (x < 5 || (x > 6 && x < 11))) { return; }\nelse if (y == 2 && (x == 4 || x == 7 || x == 10)) { return; }\nelse if (y == 3 && ((x >3 && x<8) || x == 10)) { return; }\nelse if (y == 4 && x==10 ) { return; }\nelse if (y == 5 && ((x >0 && x<5) || (x >7 && x<11))) { return; }\nelse if (y == 6 && (x == 1 || x == 4 || x == 8)) { return; }\nelse if (y == 7 && (x == 1 || x == 4 || (x >7 && x<11)) ) { return; }\nelse if (y == 8 && (x == 4 || x == 10 || x<2 ) )  { return; }\nelse if (y == 9 && (x == 4 || x == 10 )) { return; }\nelse if (y == 10 && (x >3 && x<11)) { return; }\n// ...\n"})}),"\n",(0,t.jsx)(n.p,{children:"C'est une mauvaise pratique car si vous voulez changer la fa\xe7on dont vos coordonn\xe9es sont g\xe9r\xe9es, vous devrez changer ce code et cela peut \xeatre fastidieux. Il est pr\xe9f\xe9rable de stocker ces donn\xe9es dans un fichier de configuration par exemple pour pouvoir les modifier facilement. Ou alors de les stocker dans une structure de donn\xe9es (comme une map ou un tableau par exemple) pour pouvoir les modifier plus facilement. L'id\xe9al est de ne pas avoir de donn\xe9es en dur mais de les d\xe9duire d'autres donn\xe9es (comme une image par exemple) pour faciliter la maintenance et l'\xe9volutivit\xe9 du code."}),"\n",(0,t.jsx)(n.p,{children:"Ici, cela ressemble des conditions de validit\xe9 pour des cases d'une grille 2D (placement des tours sur une carte). Il serait donc pr\xe9f\xe9rable de d\xe9duire ces conditions de la carte elle-m\xeame (par exemple, si la case est une herbe, on peut placer une tour dessus, ect)."}),"\n",(0,t.jsx)(n.h2,{id:"erreurs-propre-aux-c",children:"Erreurs propre aux C++"}),"\n",(0,t.jsx)(n.h3,{id:"op\xe9ration-bool\xe9enne",children:"Op\xe9ration Bool\xe9enne"}),"\n",(0,t.jsx)(n.p,{children:"Vous mettez parfois dans le code des testes pour d\xe9finir une variable bool\xe9enne ou pour retourner une valeur bool\xe9enne."}),"\n",(0,t.jsx)(n.p,{children:"Par exemple"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool bidule(int const x) {\n  if (x > 10) {\n    return true;\n  }\n  return false;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["N\u2019oubliez pas que vous ce que vous mettez dans le if ",(0,t.jsx)(n.strong,{children:"est"})," une op\xe9ration bool\xe9enne qui va calculer soit Vrai soit Faux. Et ce r\xe9sultat peut donc \xeatre directement utilis\xe9 comme valeur de retour."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool bidule(int const x)\n{\n\treturn x > 10;\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Si vous devez inverser le r\xe9sultat, vous pouvez utiliser l\u2019op\xe9rateur ",(0,t.jsx)(n.code,{children:"!"})," qui va inverser le r\xe9sultat d\u2019une op\xe9ration bool\xe9enne."]})}),"\n",(0,t.jsx)(n.h3,{id:"pragma-once-vs-ifndef",children:"Pragma once vs ifndef"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#pragma once\n\n#ifndef PATH_HPP\n#define PATH_HPP\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Les deux fa\xe7on de prot\xe9ger des inclusions de header sont redondantes, il faut choisir l'une ou l'autre (pr\xe9f\xe9rence pour #pragma once en C++ moderne).\nPetit rappel ",(0,t.jsx)(n.a,{href:"/Lessons/S1/Headers/#pragma-once-%C3%A9viter-les-doublons",children:"ici"})]}),"\n",(0,t.jsxs)(n.p,{children:["Si vous ne devez retenir qu'une chose, c'est ajouter un ",(0,t.jsx)(n.code,{children:"#pragma once"})," en haut de vos fichiers headers."]}),"\n",(0,t.jsx)(n.h3,{id:"pointeurs",children:"Pointeurs"}),"\n",(0,t.jsx)(n.p,{children:"Globalement un pointeur fait r\xe9f\xe9rence \xe0 un objet dans m\xe9moire. Mais il peut faire r\xe9f\xe9rence \xe0 deux types d\u2019objets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"un objet pr\xe9vu dans la m\xe9moire initiale (dans la Pile)"}),"\n",(0,t.jsx)(n.li,{children:"un nouvel objet allou\xe9 pendant l\u2019ex\xe9cution (dans le Tas)"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["!",(0,t.jsx)(n.a,{href:"https://media.geeksforgeeks.org/wp-content/uploads/20201210222125/Untitled4-660x361.png",children:"https://media.geeksforgeeks.org/wp-content/uploads/20201210222125/Untitled4-660x361.png"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://media.geeksforgeeks.org/wp-content/uploads/20201210222125/Untitled4-660x361.png",children:"https://media.geeksforgeeks.org/wp-content/uploads/20201210222125/Untitled4-660x361.png"})}),"\n",(0,t.jsx)(n.p,{children:"Je vais apporter une petite subtilit\xe9, il y a deux types de pointeurs (ou d\u2019usage plut\xf4t)"}),"\n",(0,t.jsx)(n.p,{children:"\u201cIl y a le bon et le mauvais pointeur ?\u201d"}),"\n",(0,t.jsx)(n.p,{children:"\u201cNon, silence\u2026\u201d"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Celui qui d\xe9tient l\u2019adresse original d\u2019un objet"}),"\n",(0,t.jsx)(n.li,{children:"Celui qui fait r\xe9f\xe9rence \xe0 un objet initialis\xe9 ailleurs"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Et pour bien comprendre cette distinction, voyons un bout de code qui ne la fait pas"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"Ellipse* current = new Ellipse;\ncurrent = liste.first;\nwhile (current != nullptr)\n{\n\t// ...\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["La premi\xe8re ligne de cette fonction va cr\xe9er un objet, il va l\u2019allouer dans la m\xe9moire gr\xe2ce \xe0 new. On parle ici d\u2019",(0,t.jsx)(n.strong,{children:"instanciation"}),", nous y reviendrons."]}),"\n",(0,t.jsxs)(n.p,{children:["La deuxi\xe8me quant \xe0 elle va faire pointer ",(0,t.jsx)(n.code,{children:"current"})," vers un objet existant ailleurs (dans ",(0,t.jsx)(n.code,{children:"liste.first"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"L\u2019erreur vient surement d\u2019une confusion sur l\u2019initialisation d\u2019un pointeur:"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,t.jsx)(n.code,{children:"new"})," permet de cr\xe9er un nouvel objet dans la m\xe9moire et pas de cr\xe9er un pointeur."]})}),"\n",(0,t.jsxs)(n.p,{children:["un pointeur est cr\xe9\xe9 \xe0 partir du moment o\xf9 vous d\xe9clarer une variable avec ",(0,t.jsx)(n.code,{children:"*"})," et vous devez distinguer le \u201c",(0,t.jsx)(n.strong,{children:"pointeur"}),"\u201d de l\u201d",(0,t.jsx)(n.strong,{children:"instance"}),"\u201d."]}),"\n",(0,t.jsx)(n.p,{children:"\u201cAh mais qu\u2019est ce que c\u2019est donc qu\u2019une instance ?\u201d"}),"\n",(0,t.jsx)(n.p,{children:"\u201cMerci personne al\xe9atoire que je n\u2019ai pas pay\xe9 pour poser cette question\u201d"}),"\n",(0,t.jsx)(n.h3,{id:"instance",children:"Instance"}),"\n",(0,t.jsx)(n.p,{children:"J\u2019ai parl\xe9 ci-dessus d\u2019\u201dobjet\u201d, on pourrait aussi parler d\u2019\u201dinstance\u201d (d\xe9sol\xe9 il n\u2019y a pas de mot bien d\xe9finis pour ce dont je vais parler)."}),"\n",(0,t.jsx)(n.p,{children:"En programmation (on va parler de C++ ici), il y a des \u201ctypes\u201d de donn\xe9es. On peut retrouver des types natives (ou fondamentaux) qui viennent directement avec le langage (int, bool, float, string\u2026) et des types qu\u2019on peut cr\xe9er et qui va contenir un ensemble de donn\xe9es (des structures ou des classes mais aussi des enum)."}),"\n",(0,t.jsx)(n.p,{children:"Ces types d\xe9crivent comment une donn\xe9e (en binaire) va prendre forme. Et quand je d\xe9clare une variable d\u2019un certain type, je veux cr\xe9er une donn\xe9e qui doit prendre cette forme. On dit qu\u2019on cr\xe9e une instance de ce type. L\u2019instance est un \xe9l\xe9ment unique l\xe0 o\xf9 le type d\xe9crit une donn\xe9e g\xe9n\xe9rique."}),"\n",(0,t.jsx)(n.p,{children:"Quand je d\xe9clare des variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"int a;\nstring nom_etudiant1;\nHuman steeve;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"a"})," est une instance de ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int"})}),", ",(0,t.jsx)(n.code,{children:"nom_etudiant1"})," est une instance de ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"string"})})," et ",(0,t.jsx)(n.code,{children:"steeve"})," est une instance d\u2019une structure ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Human"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Bon o\xf9 je veux en venir avec tout \xe7a ? (non c\u2019est une vrai question, qu\u2019est ce que je voulais faire ?)"}),"\n",(0,t.jsx)(n.p,{children:"Bon c\u2019est pas grave, faisant une parenth\xe8se pour ceux qui n\u2019ont pas encore appr\xe9hend\xe9 les structures, voyons ce code:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parenth\xe8se:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"struct Human\n{\n\tstring first_name;\n\tstring last_name;\n}\n\nvoid display_human_name(Human human)\n{\n\tcout << ?;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ici je veux afficher le nom d\u2019un humain, et d\u2019un humain sp\xe9cifique, pas de l\u2019entit\xe9 \u201chumain\u201d (pas de l\u2019humanit\xe9). Je vais donc manipuler ",(0,t.jsx)(n.code,{children:"human"})," et pas ",(0,t.jsx)(n.code,{children:"Human"}),". On manipule l\u2019instance, pas le type."]}),"\n",(0,t.jsx)(n.p,{children:"Je pourrais reformater le code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void display_human_name(Human a_specific_human)\n{\n\tcout << a_specific_human.first_name;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Je ferme la parenth\xe8se, dite moi si c\u2019est pas claire ou \xe0 l\u2019inverse si c\u2019est trop obvious."}),"\n",(0,t.jsx)(n.p,{children:"Oui donc les instances au final pour les pointeurs. Reprenons l\u2019erreur que j\u2019avais soulign\xe9."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void parcours_liste(List* list)\n{\n\tEllipse* current = new Ellipse;\n\tcurrent = list->first;\n\twhile (current != nullptr)\n\t{\n\t\t// ...\n\t\tcurrent = current->next;\n\t}\n}\n\nint main()\n{\n\tList l;\n\tEllipse ellipse1;\n\tEllipse ellipse2;\n\n\tl.first = &ellipse1;\n\tellipse1.next = &ellipse2;\n\n\tparcours_liste(l);\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"new Ellipse"})," va cr\xe9er une nouvelle instance du type Ellipse. ",(0,t.jsx)(n.strong,{children:"Or"})," il existe d\xe9j\xe0 des instances d\u2019ellipses, celles qu\u2019on veut parcourir. Ces instances sont celles cr\xe9\xe9s dans le ",(0,t.jsx)(n.code,{children:"main"}),". Le pointeur ",(0,t.jsx)(n.code,{children:"current"})," ne va servir qu\u2019\xe0 parcourir ces instances d\u2019ellipses et en aucun cas les recr\xe9er. C\u2019est ce qu\u2019on appelle un \u201cit\xe9rateur\u201d, c\u2019est un pointeur qui permet de se balader dans une structure de donn\xe9es."]}),"\n",(0,t.jsx)(n.p,{children:"Modifions un peu le code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"int main()\n{\n\tList l;\n\n\tl.first = new Ellipse;\n\tl.first->next = new Ellipse;\n\n\tparcours_liste(l);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Le code fait exactement la m\xeame chose, sauf que le j\u2019alloue de la m\xe9moire \u201c\xe0 la volet\u201d pour cr\xe9er les ellipses de la liste. Je les instancie d\u2019une autre mani\xe8re. Les instances se cr\xe9e dans le Tas et pas dans la pile."}),"\n",(0,t.jsx)("aside",{children:(0,t.jsx)(n.p,{children:"\ud83d\udca1 En java, C#, javascript, python\u2026 toutes les instances/tous les objets sont instanci\xe9.e.s \u201c\xe0 la volet\u201d"})}),"\n",(0,t.jsx)(n.h2,{id:"optimisation",children:"Optimisation"}),"\n",(0,t.jsx)(n.h3,{id:"chaines-de-caract\xe8res-vs-entiers-\xe9num\xe9ration",children:"chaines de caract\xe8res VS entiers (\xe9num\xe9ration)"}),"\n",(0,t.jsx)(n.p,{children:"Comparer des chaines de caract\xe8res n\xe9cessite plus de calcul que comparer des entiers. En effet, une cha\xeene de caract\xe8re est une suite de caract\xe8res qui n\xe9cessite d\u2019\xeatre parcouru (enti\xe8rement ou partiellement) pour \xeatre compar\xe9. Alors qu\u2019un entier est une valeur num\xe9rique qui peut \xeatre compar\xe9 directement."}),"\n",(0,t.jsx)(n.p,{children:"Dans le cas o\xf9 vous avez des chaines de caract\xe8res qui repr\xe9sentent des modes, des \xe9tats, des types ... que l'on conna\xeet \xe0 l'avance, il est pr\xe9f\xe9rable de les comparer en utilisant des entiers plut\xf4t que de passer par des chaines de caract\xe8res."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'void move_player(Player & player, string const& direction)\n{\n\tif (direction == "left")\n\t{\n\t\t// ...\n\t} \n\telse if (direction == "right")\n\t{\n\t\t// ...\n\t}\n    else if (direction == "up")\n    {\n        // ...\n    }\n\telse if (direction == "down")\n    {\n        // ...\n    }\n    else \n    {\n        // ... ?\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Mais on peut utiliser une ",(0,t.jsx)(n.strong,{children:"\xe9num\xe9ration"})," pour d\xe9finir les diff\xe9rent cas et les comparer directement (chaque valeur de l\u2019\xe9num\xe9ration est repr\xe9sent\xe9 par un entier)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"enum class Direction \n{\n\tLeft,\n    Right,\n    Up,\n    Down,\n}\n\nvoid move_player(Player & player, Direction const direction)\n{\n    if (direction == Direction::Left)\n    {\n        // ...\n    } \n    else if (direction == Direction::Right)\n    {\n        // ...\n    }\n    else if (direction == Direction::Up) {\n\n    }\n    else // if (direction == Direction::Down)\n    {\n        // ...\n    }\n\n    // Ou encore mieux avec un switch case\n\n    switch (direction)\n    {\n        case Direction::Left:\n            // ...\n            break;\n        case Direction::Right:\n            // ...\n            break;\n        case Direction::Up:\n            // ...\n            break;\n        case Direction::Down:\n            // ...\n            break;\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Cela permet de r\xe9duire le temps de calcul et de rendre le code plus lisible.\nMais cela permet aussi de limiter la gestion des erreurs. Si vous avez une cha\xeene de caract\xe8re qui n\u2019est \xe9gale \xe0 aucun des cas il faudra g\xe9rer le cas ou il pourrait y avoir un comportement inattendu. Avec un ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"enum"})}),", vous \xeates s\xfbr que la valeur est l\u2019une de celles que vous avez d\xe9fini. De plus l'utilisation du ",(0,t.jsx)(n.a,{href:"/Lessons/S1/Loops/#switch",children:"switch case"})," n'est pas possible avec des chaines de caract\xe8res."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Comparer des chaines de quelques caract\xe8res ne repr\xe9sente rien pour un processeur de nos jours mais si la vitesse d'ex\xe9cution du programme est un crit\xe8re important C'est tout de m\xeame quelques chose \xe0 prendre ne compte."})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>l});var t=s(67294);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);