"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[6671],{6892:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=r(5893),s=r(1151);const i={title:"D\xe9duction de type et biblioth\xe8que standard",tags:["C++","STL"]},l=void 0,d={id:"Lessons/S2/AutoAndAlgorithm",title:"D\xe9duction de type et biblioth\xe8que standard",description:"La STL (Standard Template Library) est une biblioth\xe8que standard de la norme C++ qui fournit de nombreuses fonctionnalit\xe9s d\xe9j\xe0 impl\xe9ment\xe9es pour faciliter le d\xe9veloppement. Vous pouvez retrouver la documentation de la STL sur le site cppreference.com.",source:"@site/content/Lessons/S2/04_AutoAndAlgorithm.md",sourceDirName:"Lessons/S2",slug:"/Lessons/S2/AutoAndAlgorithm",permalink:"/Learn--cpp_programming/Lessons/S2/AutoAndAlgorithm",draft:!1,unlisted:!1,tags:[{label:"C++",permalink:"/Learn--cpp_programming/tags/c"},{label:"STL",permalink:"/Learn--cpp_programming/tags/stl"}],version:"current",sidebarPosition:4,frontMatter:{title:"D\xe9duction de type et biblioth\xe8que standard",tags:["C++","STL"]},sidebar:"Lessons",previous:{title:"Structures de donn\xe9es",permalink:"/Learn--cpp_programming/Lessons/S2/dataStructures"},next:{title:"Hash et tableaux associatifs",permalink:"/Learn--cpp_programming/Lessons/S2/HashAndAssociativeTables"}},o={},c=[{value:"It\xe9rateurs",id:"it\xe9rateurs",level:2},{value:"Begin et end",id:"begin-et-end",level:3},{value:"Utilisation des it\xe9rateurs",id:"utilisation-des-it\xe9rateurs",level:3},{value:"D\xe9duction de type",id:"d\xe9duction-de-type",level:2},{value:"Exemples et algorithmes",id:"exemples-et-algorithmes",level:2},{value:"Find",id:"find",level:3},{value:"Sort",id:"sort",level:3},{value:"Remove et Erase",id:"remove-et-erase",level:3},{value:"Pour aller plus loin",id:"pour-aller-plus-loin",level:2},{value:"Les fonctions lambda",id:"les-fonctions-lambda",level:3},{value:"Transform",id:"transform",level:3},{value:"Accumulate et reduce",id:"accumulate-et-reduce",level:3},{value:"R\xe9sum\xe9",id:"r\xe9sum\xe9",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["La ",(0,t.jsx)(n.strong,{children:"STL"})," (Standard Template Library) est une biblioth\xe8que standard de la norme ",(0,t.jsx)(n.strong,{children:"C++"})," qui fournit de nombreuses fonctionnalit\xe9s d\xe9j\xe0 impl\xe9ment\xe9es pour faciliter le d\xe9veloppement. Vous pouvez retrouver la documentation de la ",(0,t.jsx)(n.strong,{children:"STL"})," sur le site ",(0,t.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/header",children:"cppreference.com"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Nous avons d\xe9j\xe0 utilis\xe9 des conteneurs de la ",(0,t.jsx)(n.strong,{children:"STL"})," comme ",(0,t.jsx)(n.code,{children:"std::vector"})," ou ",(0,t.jsx)(n.code,{children:"std::array"})," mais aussi la ",(0,t.jsx)(n.code,{children:"std::string"})," qui est une ",(0,t.jsx)(n.strong,{children:"classe"})," qui permet de manipuler des cha\xeenes de caract\xe8res."]}),"\n",(0,t.jsx)(n.admonition,{title:"Classes",type:"info",children:(0,t.jsxs)(n.p,{children:["Je n'ai pas encore abord\xe9 le terme de ",(0,t.jsx)(n.strong,{children:"classe"})," mais je vais clarifier ce terme car je vais l'utiliser dans la suite du cours.\nUne ",(0,t.jsx)(n.strong,{children:"classe"})," est un type de donn\xe9es qui permet de regrouper des donn\xe9es et des fonctions qui agissent sur ces donn\xe9es de la m\xeame mani\xe8re que les ",(0,t.jsx)(n.strong,{children:"structures"}),". Pour faire simple, une ",(0,t.jsx)(n.strong,{children:"classe"})," est une ",(0,t.jsx)(n.strong,{children:"structure"}),". Il y a cependant des diff\xe9rences entre les deux (visibilit\xe9 des donn\xe9es, h\xe9ritage, ...) mais vous d\xe9couvrirez cela en deuxi\xe8me ann\xe9e."]})}),"\n",(0,t.jsxs)(n.p,{children:["La ",(0,t.jsx)(n.strong,{children:"STL"})," fournit aussi des ",(0,t.jsx)(n.strong,{children:"algorithmes"})," et des fonctions qui permettent de simplifier la manipulation des conteneurs."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour que ces fonctionnalit\xe9s soient utilisables par le plus grand nombre de conteneurs possibles, la ",(0,t.jsx)(n.strong,{children:"STL"})," utilise le concept d'",(0,t.jsx)(n.strong,{children:"it\xe9rateurs"})," qui permettent de parcourir les conteneurs de mani\xe8re g\xe9n\xe9rique."]}),"\n",(0,t.jsx)(n.h2,{id:"it\xe9rateurs",children:"It\xe9rateurs"}),"\n",(0,t.jsxs)(n.p,{children:["Les ",(0,t.jsx)(n.strong,{children:"it\xe9rateurs"})," sont des objets propres \xe0 la ",(0,t.jsx)(n.strong,{children:"STL"})," qui permettent de parcourir les conteneurs et structures de donn\xe9es sans se soucier de la mani\xe8re dont ils sont impl\xe9ment\xe9s. Cela permet d'abstraire le conteneur utilis\xe9 et de pouvoir utiliser des algorithmes de mani\xe8re g\xe9n\xe9rique."]}),"\n",(0,t.jsxs)(n.p,{children:["Les ",(0,t.jsx)(n.strong,{children:"it\xe9rateurs"})," sont des objets qui se comportent un peu comme des pointeurs. Ils permettent de cibler un \xe9l\xe9ment dans un conteneur, de le manipuler et permettent de passer d'un \xe9l\xe9ment \xe0 l'autre."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour un ",(0,t.jsx)(n.strong,{children:"tableau"})," (comme ",(0,t.jsx)(n.code,{children:"std::array"})," ou ",(0,t.jsx)(n.code,{children:"std::vector"}),") le passage d'un \xe9l\xe9ment \xe0 l'autre se fait g\xe9n\xe9ralement en incr\xe9mentant un compteur mais pour d'autres conteneurs, le passage d'un \xe9l\xe9ment \xe0 l'autre est plus complexe. Gr\xe2ce aux ",(0,t.jsx)(n.strong,{children:"it\xe9rateurs"}),", nous n'avons pas \xe0 nous soucier de la mani\xe8re dont le conteneur est impl\xe9ment\xe9."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Il existe plusieurs types d'it\xe9rateurs qui permettent de parcourir les conteneurs de diff\xe9rentes mani\xe8res (parcours en lecture seule, parcours en lecture et \xe9criture, parcours seulement dans un sens, ...). Nous n'allons pas rentrer dans les d\xe9tails des diff\xe9rents types d'it\xe9rateurs mais sachez qu'il existe plusieurs types d'it\xe9rateurs qui permettent de parcourir les conteneurs de diff\xe9rentes mani\xe8res."})}),"\n",(0,t.jsxs)(n.p,{children:["Les ",(0,t.jsx)(n.strong,{children:"it\xe9rateurs"})," ont des ",(0,t.jsx)(n.strong,{children:"op\xe9rateurs"})," et ",(0,t.jsx)(n.strong,{children:"m\xe9thodes"})," qui permettent de les manipuler comme avec l'op\xe9rateur ",(0,t.jsx)(n.code,{children:"*"})," pour d\xe9r\xe9f\xe9rencer et acc\xe9der \xe0 la valeur point\xe9e par l'it\xe9rateur et l'op\xe9rateur ",(0,t.jsx)(n.code,{children:"++"})," pour passer \xe0 l'\xe9l\xe9ment suivant."]}),"\n",(0,t.jsx)(n.h3,{id:"begin-et-end",children:"Begin et end"}),"\n",(0,t.jsxs)(n.p,{children:["Il existe principalement deux ",(0,t.jsx)(n.strong,{children:"m\xe9thodes"})," sur les conteneurs qui permettent de r\xe9cup\xe9rer un it\xe9rateur sur le ",(0,t.jsx)(n.strong,{children:"premier \xe9l\xe9ment"})," du conteneur et un it\xe9rateur permettant d'indiquer la ",(0,t.jsx)(n.strong,{children:"fin"})," du conteneur."]}),"\n",(0,t.jsxs)(n.p,{children:["Voici un exemple avec un vecteur (",(0,t.jsx)(n.code,{children:"std::vector"}),") :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"std::vector<int> v {1, 2, 3, 4, 5};\n\n// D\xe9claration d'un it\xe9rateur sur le vecteur v\nstd::vector<int>::iterator begin_iterator { v.begin() };\n\n// D\xe9claration d'un it\xe9rateur permettant d'indiquer la fin du vecteur v\nstd::vector<int>::iterator end_iterator { v.end() };\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Ici, nous utilisons l'",(0,t.jsx)(n.strong,{children:"it\xe9rateur"})," ",(0,t.jsx)(n.code,{children:"std::vector<int>::iterator"})," qui permet de parcourir un vecteur. Il existe aussi l'",(0,t.jsx)(n.strong,{children:"it\xe9rateur"})," ",(0,t.jsx)(n.code,{children:"std::vector<int>::const_iterator"})," qui permet de parcourir un vecteur en lecture seule (",(0,t.jsx)(n.code,{children:"const"}),") (on peut obtenir des it\xe9rateurs ",(0,t.jsx)(n.strong,{children:"constants"})," avec les m\xe9thodes ",(0,t.jsx)(n.code,{children:"cbegin"})," et ",(0,t.jsx)(n.code,{children:"cend"}),")."]})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["L'it\xe9rateur ",(0,t.jsx)(n.code,{children:"end"})," ne pointe ",(0,t.jsx)(n.strong,{children:"pas"})," sur le ",(0,t.jsx)(n.strong,{children:"dernier \xe9l\xe9ment"})," du conteneur mais vers un \xe9l\xe9ment ",(0,t.jsx)(n.em,{children:"invalide"})," qui ",(0,t.jsx)(n.strong,{children:"indique la fin"})," du conteneur (g\xe9n\xe9ralement un \xe9l\xe9ment apr\xe8s le dernier \xe9l\xe9ment du conteneur comme c'est le cas pour ",(0,t.jsx)(n.code,{children:"std::vector"})," par exemple). Il ne faut donc pas d\xe9r\xe9f\xe9rencer l'it\xe9rateur ",(0,t.jsx)(n.code,{children:"end"})," car cela provoquerait une erreur. Il sert uniquement \xe0 ",(0,t.jsx)(n.strong,{children:"indiquer la fin du conteneur"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"utilisation-des-it\xe9rateurs",children:"Utilisation des it\xe9rateurs"}),"\n",(0,t.jsx)(n.p,{children:"Pour illustrer le fonctionnement des it\xe9rateurs, reprenons l'exemple pr\xe9c\xe9dent avec un vecteur pour utiliser l'it\xe9rateur pour parcourir le vecteur."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"std::vector<int> v {1, 2, 3, 4, 5};\n\n// D\xe9claration d'un it\xe9rateur permettant d'indiquer la fin du vecteur v\nstd::vector<int>::iterator end_iterator { v.end() };\n\n// Parcours du vecteur avec l'it\xe9rateur\nfor (std::vector<int>::iterator it { v.begin() }; it != end_iterator; ++it) {\n    std::cout << *it << std::endl;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Quelques explications sur ce code :\nNous d\xe9clarons un it\xe9rateur sur le premier \xe9l\xe9ment du vecteur ",(0,t.jsx)(n.code,{children:"v"})," et un it\xe9rateur sur le dernier \xe9l\xe9ment du vecteur ",(0,t.jsx)(n.code,{children:"v"}),". Ensuite, nous parcourons le vecteur avec une boucle ",(0,t.jsx)(n.code,{children:"for"})," en incr\xe9mentant l'",(0,t.jsx)(n.strong,{children:"it\xe9rateur"})," (pour passer \xe0 l'\xe9l\xe9ment suivant). Nous utilisons l'op\xe9rateur ",(0,t.jsx)(n.code,{children:"!="})," pour comparer l'it\xe9rateur actuel avec l'it\xe9rateur qui indique la fin du vecteur afin de savoir quand nous avons parcouru tout le vecteur. L'op\xe9rateur ",(0,t.jsx)(n.code,{children:"*"})," permet de r\xe9cup\xe9rer la valeur point\xe9e par l'it\xe9rateur (\xe0 l'instar du d\xe9r\xe9f\xe9rencement d'un pointeur)."]}),"\n",(0,t.jsxs)(n.admonition,{title:"for range based loop",type:"info",children:[(0,t.jsxs)(n.p,{children:["Il existe une syntaxe plus simple pour parcourir un conteneur avec un it\xe9rateur. Il s'agit de la boucle ",(0,t.jsx)(n.code,{children:"for"})," avec la syntaxe ",(0,t.jsx)(n.code,{children:"for (element : container)"}),". Nous avons d\xe9j\xe0 vu cette syntaxe avec les tableaux. Cette syntaxe est aussi valable pour les autres conteneurs de la ",(0,t.jsx)(n.strong,{children:"STL"})," et utilise en fait les it\xe9rateurs."]}),(0,t.jsxs)(n.p,{children:["Voil\xe0 le m\xeame exemple que pr\xe9c\xe9demment avec la boucle ",(0,t.jsx)(n.code,{children:"for"})," et la syntaxe ",(0,t.jsx)(n.code,{children:"for (element : container)"})," :"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"std::vector<int> const v {1, 2, 3, 4, 5};\n\n// Parcours du vecteur avec l'it\xe9rateur\nfor (int const element : v) {\n    std::cout << element << std::endl;\n}\n"})}),(0,t.jsx)(n.p,{children:"C'est cette syntaxe que nous privil\xe9gierons en pratique pour parcourir les conteneurs."})]}),"\n",(0,t.jsx)(n.h2,{id:"d\xe9duction-de-type",children:"D\xe9duction de type"}),"\n",(0,t.jsxs)(n.p,{children:["Jusqu'\xe0 pr\xe9sent, nous avons toujours d\xe9clar\xe9 nos variables en pr\xe9cisant leur ",(0,t.jsx)(n.strong,{children:"type"}),". Cependant, il existe une syntaxe qui permet de d\xe9duire le type d'une variable \xe0 partir de son initialisation. Nous avons vu avec les it\xe9rateurs que le type de l'it\xe9rateur d\xe9pend du conteneur sur lequel il est utilis\xe9 (par exemple ",(0,t.jsx)(n.code,{children:"std::vector<int>::iterator"})," pour un vecteur de ",(0,t.jsx)(n.code,{children:"int"})," et ",(0,t.jsx)(n.code,{children:"std::vector<float>::iterator"})," pour un vecteur de ",(0,t.jsx)(n.code,{children:"float"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"Il est donc impossible de d\xe9clarer un it\xe9rateur sans conna\xeetre le type du conteneur. De plus, le type de l'it\xe9rateur est g\xe9n\xe9ralement tr\xe8s long et compliqu\xe9 \xe0 \xe9crire."}),"\n",(0,t.jsxs)(n.p,{children:["Dans ce cas, nous pouvons utiliser la ",(0,t.jsx)(n.strong,{children:"d\xe9duction de type"})," pour d\xe9clarer notre it\xe9rateur. Cela se fait avec le mot cl\xe9 ",(0,t.jsx)(n.code,{children:"auto"})," \xe0 la place du type de la variable."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"std::vector<int> const v {1, 2, 3, 4, 5};\n\n// D\xe9claration d'un it\xe9rateur sur le vecteur v\nauto it { v.begin() };\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Pourquoi ne pas utiliser la d\xe9duction de type pour toutes les variables ? C'est une question de lisibilit\xe9 du code. Il est plus facile de comprendre le code si les types sont pr\xe9cis\xe9s. De plus, la d\xe9duction de type ne fonctionne que si la variable est initialis\xe9e et que le type peut \xeatre d\xe9duit. Cela peut \xeatre probl\xe9matique dans certains cas o\xf9 le type ne peut pas \xeatre d\xe9duit ou conduit \xe0 des erreurs (par exemple avec ",(0,t.jsx)(n.code,{children:"{1, 2, 3, 4, 5}"})," qui peut \xeatre un ",(0,t.jsx)(n.code,{children:"std::vector"})," ou un ",(0,t.jsx)(n.code,{children:"std::array"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"Finalement, la d\xe9duction de type est une fonctionnalit\xe9 tr\xe8s utile mais qui doit \xeatre utilis\xe9e avec parcimonie quand cela est pertinent. Il est pr\xe9f\xe9rable de pr\xe9ciser le type des variables pour rendre le code plus lisible quand cela est possible."}),"\n",(0,t.jsxs)(n.p,{children:["On pr\xe9f\xe9rera donc \xe9crire ",(0,t.jsx)(n.code,{children:"float"})," plut\xf4t que ",(0,t.jsx)(n.code,{children:"auto"})," pour d\xe9clarer une variable de type ",(0,t.jsx)(n.code,{children:"float"}),". Mais on pr\xe9f\xe9rera utiliser la d\xe9duction de type pour d\xe9clarer un it\xe9rateur sur un conteneur."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["C'est g\xe9n\xe9ralement consid\xe9r\xe9 comme une mauvaise pratique de ne pas pr\xe9ciser le type des variables (comme c'est le cas en ",(0,t.jsx)(n.strong,{children:"Python"})," ou en ",(0,t.jsx)(n.strong,{children:"JavaScript"}),"). Il existe pour ces langages des surcouches qui permettent de v\xe9rifier le type des variables (comme ",(0,t.jsx)(n.strong,{children:"TypeScript"})," pour ",(0,t.jsx)(n.strong,{children:"JavaScript"})," et le module ",(0,t.jsx)(n.code,{children:"typing"})," pour ",(0,t.jsx)(n.strong,{children:"Python"}),"). Le ",(0,t.jsx)(n.strong,{children:"C++"})," est un langage ",(0,t.jsx)(n.strong,{children:"fortement typ\xe9"})," et nous impose de pr\xe9ciser le type des variables mais c'est pour une bonne raison et la ",(0,t.jsx)(n.strong,{children:"d\xe9duction de type"})," (",(0,t.jsx)(n.code,{children:"auto"}),") est une fonctionnalit\xe9 qui permet de simplifier le code dans certains cas et n'a pas pour but de remplacer la d\xe9claration de type."]})}),"\n",(0,t.jsx)(n.h2,{id:"exemples-et-algorithmes",children:"Exemples et algorithmes"}),"\n",(0,t.jsxs)(n.p,{children:["L'int\xe9r\xeat de l'it\xe9rateur pour boucler sur un conteneur est limit\xe9. En effet, il est plus simple d'utiliser la boucle ",(0,t.jsx)(n.code,{children:"for"})," avec la syntaxe ",(0,t.jsx)(n.code,{children:"for (element : container)"})," pour parcourir un conteneur."]}),"\n",(0,t.jsxs)(n.p,{children:["L'int\xe9r\xeat des it\xe9rateurs est de pouvoir utiliser des algorithmes de la ",(0,t.jsx)(n.strong,{children:"STL"})," qui permettent de manipuler les conteneurs de mani\xe8re g\xe9n\xe9rique."]}),"\n",(0,t.jsxs)(n.p,{children:["Toutes ces fonctions sont d\xe9finies dans le fichier d'en-t\xeate ",(0,t.jsx)(n.code,{children:"algorithm"})," de la ",(0,t.jsx)(n.strong,{children:"STL"}),". Vous pouvez retrouver la documentation de ce fichier d'en-t\xeate sur le site ",(0,t.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/algorithm",children:"cppreference.com"})," (attention, la documentation est en anglais)."]}),"\n",(0,t.jsxs)(n.p,{children:["Nous allons voir quelques exemples d'algorithmes les plus courants de la ",(0,t.jsx)(n.strong,{children:"STL"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"find",children:"Find"}),"\n",(0,t.jsxs)(n.p,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::find"})," permet de ",(0,t.jsx)(n.strong,{children:"rechercher"})," un \xe9l\xe9ment dans un conteneur. Il prend en param\xe8tre un it\xe9rateur sur le premier \xe9l\xe9ment du conteneur, un it\xe9rateur sur le dernier \xe9l\xe9ment du conteneur et la valeur \xe0 rechercher."]}),"\n",(0,t.jsxs)(n.p,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::find"})," renvoie un it\xe9rateur sur l'\xe9l\xe9ment trouv\xe9 ou l'it\xe9rateur ",(0,t.jsx)(n.code,{children:"end"})," si l'\xe9l\xe9ment n'est pas trouv\xe9."]}),"\n",(0,t.jsxs)(n.p,{children:["Voici un exemple avec un vecteur (",(0,t.jsx)(n.code,{children:"std::vector"}),") :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main()\n{\n    std::vector<int> v {1, 2, 3, 4, 5};\n\n    // Recherche de l'\xe9l\xe9ment 3 dans le vecteur v\n    auto it { std::find(v.begin(), v.end(), 3) };\n\n    // On compare l'it\xe9rateur avec l'it\xe9rateur sur le dernier \xe9l\xe9ment du vecteur\n    if (it != v.end())\n    {\n        std::cout << *it << std::endl;\n    }\n    else\n    {\n        std::cout << \"Element not found\" << std::endl;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sort",children:"Sort"}),"\n",(0,t.jsxs)(n.p,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::sort"})," permet de trier un conteneur. Il prend en param\xe8tre un it\xe9rateur sur le premier \xe9l\xe9ment du conteneur et un it\xe9rateur sur le dernier \xe9l\xe9ment du conteneur."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main()\n{\n    std::vector<int> v {5, 2, 3, 1, 4};\n\n    // Tri du vecteur v\n    std::sort(v.begin(), v.end());\n\n    // Parcours du vecteur avec l'it\xe9rateur\n    for (int element : v)\n    {\n        std::cout << element << std::endl;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"remove-et-erase",children:"Remove et Erase"}),"\n",(0,t.jsxs)(n.p,{children:["Pour le ",(0,t.jsx)(n.code,{children:"std::vector"}),", il existe une m\xe9thode ",(0,t.jsx)(n.code,{children:"std::erase"})," qui permet de supprimer des \xe9l\xe9ments du vecteur. Cependant, cette m\xe9thode n'existe pas pour tous les conteneurs."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main()\n{\n    std::vector<int> v {14, 25, 36, 42, 53};\n\n    // Suppression de tous les \xe9l\xe9ments du vecteur v qui sont \xe9gaux \xe0 36\n    std::erase(v, 36);\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Cette fonction propre au ",(0,t.jsx)(n.code,{children:"std::vector"})," ne permet pas de supprimer un \xe9l\xe9ment d'un conteneur g\xe9n\xe9rique."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour cela, il existe l'algorithme ",(0,t.jsx)(n.code,{children:"std::remove"})," qui permet de supprimer un \xe9l\xe9ment d'un conteneur. Il prend en param\xe8tre un it\xe9rateur sur le premier \xe9l\xe9ment du conteneur, un it\xe9rateur sur la fin du conteneur et la valeur \xe0 supprimer. C'est ce qu'utilise la m\xe9thode ",(0,t.jsx)(n.code,{children:"std::erase"})," pour supprimer un \xe9l\xe9ment du ",(0,t.jsx)(n.code,{children:"std::vector"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"std::remove"})," ne supprime pas r\xe9ellement les \xe9l\xe9ments du conteneur. Il d\xe9place les \xe9l\xe9ments \xe0 supprimer \xe0 la fin du conteneur et renvoie un it\xe9rateur sur le premier \xe9l\xe9ment \xe0 supprimer pour d\xe9finir la nouvelle fin du conteneur. Il faut ensuite utiliser la m\xe9thode ",(0,t.jsx)(n.code,{children:"erase"})," pour supprimer les \xe9l\xe9ments \xe0 supprimer du conteneur."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"v.erase(std::remove(v.begin(), v.end(), 5), v.end());\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["C'est ce qu'on appelle l'",(0,t.jsx)(n.strong,{children:"idiome"})," ",(0,t.jsx)(n.em,{children:"remove-erase"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A partir du ",(0,t.jsx)(n.strong,{children:"C++20"}),", il existe de nouvelles fonctions qui permettent de supprimer des \xe9l\xe9ments d'un conteneur de mani\xe8re g\xe9n\xe9rique: ",(0,t.jsx)(n.code,{children:"std::erase"})," et ",(0,t.jsx)(n.code,{children:"std::erase_if"}),". Ces fonctions prennent en param\xe8tre des it\xe9rateurs et fonctionnent donc avec tous les conteneurs."]}),"\n",(0,t.jsxs)(n.p,{children:["Vous trouverez une explication ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Erase%E2%80%93remove_idiom",children:"ici"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"pour-aller-plus-loin",children:"Pour aller plus loin"}),"\n",(0,t.jsx)(n.h3,{id:"les-fonctions-lambda",children:"Les fonctions lambda"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(n.p,{children:["Il existe de nombreux autres algorithmes dans la ",(0,t.jsx)(n.strong,{children:"STL"}),". Il est impossible de tous les pr\xe9senter dans ce cours. Je vous invite \xe0 consulter la documentation de la ",(0,t.jsx)(n.strong,{children:"STL"})," sur le site ",(0,t.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/algorithm",children:"cppreference.com"})," pour d\xe9couvrir les autres algorithmes."]}),(0,t.jsxs)(n.p,{children:["Certains utilisent des ",(0,t.jsx)(n.strong,{children:"fonctions lambda"})," pour permettre de personnaliser le comportement de l'algorithme. C'est le cas de l'algorithme ",(0,t.jsx)(n.code,{children:"std::transform"})," qui permet d'appliquer une fonction \xe0 tous les \xe9l\xe9ments d'un conteneur."]}),(0,t.jsxs)(n.p,{children:["Je ne vais pas rentrer dans les d\xe9tails des ",(0,t.jsx)(n.strong,{children:"fonctions lambda"})," mais sachez que c'est une ",(0,t.jsx)(n.strong,{children:"syntaxe"})," qui permet de d\xe9finir une fonction ",(0,t.jsx)(n.strong,{children:"anonyme"})," (g\xe9n\xe9ralement petite) et permet de passer une fonction en param\xe8tre d'une autre fonction. C'est quelque chose de tr\xe8s utilis\xe9 avec la ",(0,t.jsx)(n.strong,{children:"STL"}),"."]}),(0,t.jsxs)(n.p,{children:["Cela reste une notion avanc\xe9e et je ne vais pas rentrer dans les d\xe9tails des ",(0,t.jsx)(n.strong,{children:"fonctions lambda"})," dans ce cours. Vous pouvez seulement retenir deux choses :"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["La syntaxe est la suivante : ",(0,t.jsx)(n.code,{children:"[] (param\xe8tres) { instructions }"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Si l'on souhaite acc\xe9der aux variables d\xe9finies en dehors de la fonction lambda (sans que ce soit un param\xe8tre),  il faut ajouter le symbole ",(0,t.jsx)(n.code,{children:"&"})," entre les crochets et les param\xe8tres de la fonction lambda (",(0,t.jsx)(n.code,{children:"[&] (param\xe8tres) { instructions }"}),") (c'est ce que l'on appelle une ",(0,t.jsx)(n.strong,{children:"capture"}),")."]}),"\n"]}),(0,t.jsx)(n.p,{children:"Je vais pr\xe9senter quelques algorithmes qui utilisent des fonctions lambda pour vous montrer comment cela fonctionne."})]}),"\n",(0,t.jsx)(n.h3,{id:"transform",children:"Transform"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(n.p,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::transform"})," permet d'appliquer une fonction \xe0 tous les \xe9l\xe9ments d'un conteneur. Il prend en param\xe8tre un it\xe9rateur sur le premier et le dernier \xe9l\xe9ment du conteneur, un it\xe9rateur sur le premier \xe9l\xe9ment du conteneur de destination et la fonction \xe0 appliquer."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main()\n{\n    std::vector<int> const v {1, 2, 3, 4, 5};\n    std::vector<int> v2 {0, 0, 0, 0, 0};\n\n    // Application de la fonction lambda \xe0 tous les \xe9l\xe9ments du vecteur v\n    std::transform(v.begin(), v.end(), v2.begin(), [](int element) { return element * 2; });\n\n    // Parcours du vecteur avec l'it\xe9rateur\n    for (int const element : v2)\n    {\n        std::cout << element << std::endl;\n    }\n}\n"})}),(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)(n.p,{children:"Il faut faire attention \xe0 la taille du conteneur de destination. Si le conteneur de destination est trop petit, il y aura un d\xe9passement et soit le programme plantera soit il y aura des r\xe9sultats inattendus (le vecteur de destination ne sera pas rempli, etc...)."}),(0,t.jsxs)(n.p,{children:["Avec des conteneurs pour lesquels on peut ajouter des \xe9l\xe9ments \xe0 la fin (comme ",(0,t.jsx)(n.code,{children:"std::vector"}),"), il est possible d'utiliser la fonction ",(0,t.jsx)(n.code,{children:"std::back_inserter"})," pour ajouter des \xe9l\xe9ments \xe0 la fin du conteneur de destination. Cela permet de ne pas avoir \xe0 se soucier de la taille du conteneur de destination."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main()\n{\n    std::vector<int> const v {1, 2, 3, 4, 5};\n    std::vector<int> v2 {};\n\n    // Application de la fonction lambda \xe0 tous les \xe9l\xe9ments du vecteur v\n    std::transform(v.begin(), v.end(), std::back_inserter(v2), [](int element) { return element * 2; });\n    // Parcours du vecteur avec l'it\xe9rateur\n    for (int const element : v2)\n    {\n        std::cout << element << std::endl;\n    }\n}\n"})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"accumulate-et-reduce",children:"Accumulate et reduce"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(n.p,{children:["Lorsque l'on souhaite agr\xe9ger les \xe9l\xe9ments d'un conteneur pour en extraire une valeur, il existe deux algorithmes qui permettent de faire cela : ",(0,t.jsx)(n.code,{children:"std::accumulate"})," et ",(0,t.jsx)(n.code,{children:"std::reduce"}),"."]}),(0,t.jsxs)(n.p,{children:["Il sont inclus dans le fichier d'en-t\xeate ",(0,t.jsx)(n.code,{children:"numeric"})," de la ",(0,t.jsx)(n.strong,{children:"STL"}),". Vous pouvez retrouver la documentation de ce fichier d'en-t\xeate sur le site ",(0,t.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/header/numeric",children:"cppreference.com"}),"."]}),(0,t.jsxs)(n.p,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::accumulate"})," permet d\u2019accumuler les \xe9l\xe9ments d'un conteneur selon une op\xe9ration. Pour en faire la somme par exemple. Il prend en param\xe8tre un it\xe9rateur sur le premier et le dernier \xe9l\xe9ment du conteneur, la valeur initiale et l'op\xe9ration \xe0 appliquer."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\n#include <vector>\n#include <numeric>\n\nint main()\n{\n    std::vector<int> const v {1, 2, 3, 4, 5};\n\n    // Somme des \xe9l\xe9ments du vecteur v\n    int sum { std::accumulate(v.begin(), v.end(), 0, [](int acc, int current_element) { return acc + current_element; }) };\n    std::cout << sum << std::endl;\n}\n"})}),(0,t.jsxs)(n.p,{children:["A chaque it\xe9ration, l'op\xe9ration est appliqu\xe9e entre la valeur accumul\xe9e et l'\xe9l\xe9ment courant du conteneur. La valeur accumul\xe9e est initialis\xe9e avec la valeur initiale. Les valeurs sont parcourues ",(0,t.jsx)(n.strong,{children:"dans l'ordre"})," du conteneur."]}),(0,t.jsxs)(n.p,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::reduce"})," fonctionne de la m\xeame mani\xe8re que ",(0,t.jsx)(n.code,{children:"std::accumulate"})," mais il n'y a pas de valeur initiale. Les valeurs sont parcourues ",(0,t.jsx)(n.strong,{children:"dans n'importe quel ordre"}),". C'est utile quand l'op\xe9ration est ",(0,t.jsx)(n.strong,{children:"commutative"})," (l'ordre des op\xe9randes n'a pas d'importance)."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",metastring:'title="Somme"',children:"\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint main()\n{\n    std::vector<int> const v {1, 2, 3, 4, 5};\n\n    // Somme des \xe9l\xe9ments du vecteur v\n    int sum { std::reduce(v.begin(), v.end(), [](int a, int b) { return a + b; }) };\n    // Ou en utilisant std::plus pour faire la somme (une fonction somme d\xe9j\xe0 impl\xe9ment\xe9e dans la STL dans l'ent\xeate <functional>)\n    // int sum { std::reduce(v.begin(), v.end(), std::plus<int>()) };\n    std::cout << sum << std::endl;\n}\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"r\xe9sum\xe9",children:"R\xe9sum\xe9"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["La ",(0,t.jsx)(n.strong,{children:"STL"})," fournit des ",(0,t.jsx)(n.strong,{children:"algorithmes"})," et des fonctions qui permettent de simplifier la manipulation des conteneurs."]}),"\n",(0,t.jsxs)(n.li,{children:["La ",(0,t.jsx)(n.strong,{children:"STL"})," fournit des ",(0,t.jsx)(n.strong,{children:"it\xe9rateurs"})," qui permettent de parcourir les conteneurs de mani\xe8re g\xe9n\xe9rique."]}),"\n",(0,t.jsxs)(n.li,{children:["Un ",(0,t.jsx)(n.strong,{children:"it\xe9rateur"})," est un objet qui se comporte un peu comme un pointeur et permet de cibler un \xe9l\xe9ment dans un conteneur, de le manipuler et permet de passer d'un \xe9l\xe9ment \xe0 l'autre."]}),"\n",(0,t.jsxs)(n.li,{children:["Il existe deux m\xe9thodes sur les conteneurs qui permettent de r\xe9cup\xe9rer un it\xe9rateur sur le ",(0,t.jsx)(n.strong,{children:"premier \xe9l\xe9ment"})," du conteneur et un it\xe9rateur sur le ",(0,t.jsx)(n.strong,{children:"dernier \xe9l\xe9ment"})," du conteneur : ",(0,t.jsx)(n.code,{children:"begin"})," et ",(0,t.jsx)(n.code,{children:"end"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["La syntaxe ",(0,t.jsx)(n.code,{children:"for (element : container)"})," utilise les it\xe9rateurs pour parcourir un conteneur."]}),"\n",(0,t.jsxs)(n.li,{children:["La ",(0,t.jsx)(n.strong,{children:"d\xe9duction de type"})," permet de d\xe9duire le type d'une variable \xe0 partir de son initialisation. Cela se fait avec le mot cl\xe9 ",(0,t.jsx)(n.code,{children:"auto"})," \xe0 la place du type de la variable."]}),"\n",(0,t.jsx)(n.li,{children:"La d\xe9duction de type est une fonctionnalit\xe9 tr\xe8s utile mais qui doit \xeatre utilis\xe9e avec parcimonie quand cela est pertinent. Il est pr\xe9f\xe9rable de pr\xe9ciser le type des variables pour rendre le code plus lisible quand cela est possible."}),"\n",(0,t.jsxs)(n.li,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::find"})," permet de ",(0,t.jsx)(n.strong,{children:"rechercher"})," un \xe9l\xe9ment dans un conteneur."]}),"\n",(0,t.jsxs)(n.li,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::sort"})," permet de ",(0,t.jsx)(n.strong,{children:"trier"})," un conteneur."]}),"\n",(0,t.jsxs)(n.li,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::erase"})," permet de ",(0,t.jsx)(n.strong,{children:"supprimer"})," un \xe9l\xe9ment d'un ",(0,t.jsx)(n.code,{children:"std::vector"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Les fonctions lambda permettent de d\xe9finir une fonction ",(0,t.jsx)(n.strong,{children:"anonyme"})," (g\xe9n\xe9ralement petite) pour personnaliser le comportement d'un algorithme."]}),"\n",(0,t.jsxs)(n.li,{children:["L'algorithme ",(0,t.jsx)(n.code,{children:"std::transform"})," permet d'",(0,t.jsx)(n.strong,{children:"appliquer une fonction"})," \xe0 tous les \xe9l\xe9ments d'un conteneur."]}),"\n",(0,t.jsxs)(n.li,{children:["Les algorithmes ",(0,t.jsx)(n.code,{children:"std::accumulate"})," et ",(0,t.jsx)(n.code,{children:"std::reduce"})," permettent d'",(0,t.jsx)(n.strong,{children:"agr\xe9ger"})," les \xe9l\xe9ments d'un conteneur pour en extraire une valeur."]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>l});var t=r(7294);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);