"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[4200],{28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>c});var r=n(96540);const i={},a=r.createContext(i);function l(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:s},e.children)}},82954:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Lessons/S2/EncodingAndCompression","title":"Compression et encodage de donn\xe9es","description":"La compression de donn\xe9es est un domaine tr\xe8s vaste et tr\xe8s important en informatique. Il existe de nombreuses techniques de compression, qui sont utilis\xe9es dans de nombreux domaines : compression d\'images, compression de vid\xe9os, compression de fichiers, etc.","source":"@site/content/Lessons/S2/08_EncodingAndCompression.md","sourceDirName":"Lessons/S2","slug":"/Lessons/S2/EncodingAndCompression","permalink":"/Learn--cpp_programming/Lessons/S2/EncodingAndCompression","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"C++","permalink":"/Learn--cpp_programming/tags/c"}],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Compression et encodage de donn\xe9es","tags":["C++"]},"sidebar":"Lessons","previous":{"title":"Graphes","permalink":"/Learn--cpp_programming/Lessons/S2/graphs"}}');var i=n(74848),a=n(28453);const l={title:"Compression et encodage de donn\xe9es",tags:["C++"]},c=void 0,t={},d=[{value:"Compression de donn\xe9es",id:"compression-de-donn\xe9es",level:2},{value:"Pr\xe9requis",id:"pr\xe9requis",level:2},{value:"Encodage et repr\xe9sentation des donn\xe9es",id:"encodage-et-repr\xe9sentation-des-donn\xe9es",level:2},{value:"Compression",id:"compression",level:3},{value:"Codage par plages (Run-Length Encoding)",id:"codage-par-plages-run-length-encoding",level:2},{value:"En pratique",id:"en-pratique",level:3},{value:"Dans les images",id:"dans-les-images",level:3},{value:"Codage de Huffman",id:"codage-de-huffman",level:2},{value:"Fr\xe9quence d&#39;apparition des donn\xe9es",id:"fr\xe9quence-dapparition-des-donn\xe9es",level:3},{value:"Arbre binaire",id:"arbre-binaire",level:3},{value:"Algorithme",id:"algorithme",level:3},{value:"R\xe9sum\xe9",id:"r\xe9sum\xe9",level:2},{value:"Sources",id:"sources",level:2}];function o(e){const s={a:"a",admonition:"admonition",annotation:"annotation",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",p:"p",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["La compression de donn\xe9es est un domaine tr\xe8s vaste et tr\xe8s important en informatique. Il existe de nombreuses techniques de compression, qui sont utilis\xe9es dans de nombreux domaines : compression d'",(0,i.jsx)(s.strong,{children:"images"}),", compression de ",(0,i.jsx)(s.strong,{children:"vid\xe9os"}),", compression de ",(0,i.jsx)(s.strong,{children:"fichiers"}),", etc."]}),"\n",(0,i.jsx)(s.p,{children:"Dans ce cours nous allons d\xe9couvrir des techniques de compression tr\xe8s r\xe9pandue :"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Le codage par plages (ou ",(0,i.jsx)(s.strong,{children:"run-length encoding"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:["le ",(0,i.jsx)(s.strong,{children:"codage de Huffman"})]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Nous allons voir comment ils fonctionnent, et comment les impl\xe9menter en C++."}),"\n",(0,i.jsx)(s.h2,{id:"compression-de-donn\xe9es",children:"Compression de donn\xe9es"}),"\n",(0,i.jsx)(s.p,{children:"La compression de donn\xe9es est une technique qui permet de r\xe9duire la taille des donn\xe9es. Cela permet de stocker plus de donn\xe9es sur un support de stockage, ou de transmettre les donn\xe9es plus rapidement sur un r\xe9seau."}),"\n",(0,i.jsx)(s.p,{children:"C'est un domaine crucial en informatique moderne. Sans la compression de donn\xe9es, il serait impossible de stocker des milliers de photos sur un t\xe9l\xe9phone portable, ou de regarder des vid\xe9os en streaming sur Internet."}),"\n",(0,i.jsxs)(s.p,{children:["Il existe deux types de compression de donn\xe9es : la compression ",(0,i.jsx)(s.strong,{children:"avec perte"})," et la compression ",(0,i.jsx)(s.strong,{children:"sans perte"}),". La compression avec perte permet de r\xe9duire la taille des donn\xe9es, mais on ne garantit pas que les donn\xe9es d\xe9compress\xe9es seront identiques aux donn\xe9es d'origine. C'est le cas par exemple de la compression d'images au format ",(0,i.jsx)(s.strong,{children:"JPEG"})," o\xf9 la perte de qualit\xe9 est relativement ma\xeetris\xe9e pour cela soit le moins perceptible par l'\u0153il humain. La compression sans perte permet de retrouver les donn\xe9es d'origine apr\xe8s les avoir d\xe9compress\xe9es. C'est le cas par exemple de la compression d'images au format ",(0,i.jsx)(s.strong,{children:"PNG"}),"."]}),"\n",(0,i.jsx)(s.admonition,{title:"note concernant le format JPEG",type:"info",children:(0,i.jsxs)(s.p,{children:["Le format ",(0,i.jsx)(s.strong,{children:"JPEG"})," est un format de compression avec perte.Le processus de compression JPEG est assez complexe et est ",(0,i.jsx)(s.strong,{children:"compos\xe9 de plusieurs \xe9tapes"}),". Certaines de ces \xe9tapes sont des \xe9tapes de compression ",(0,i.jsx)(s.strong,{children:"avec perte"}),", et d'autres sont des \xe9tapes de compression ",(0,i.jsx)(s.strong,{children:"sans perte"})," (dont l'encodage ",(0,i.jsx)(s.strong,{children:"RLE"})," et l'encodage ",(0,i.jsx)(s.strong,{children:"de Huffman"})," que nous allons voir dans ce cours). C'est pour cela que l'on dit que le format ",(0,i.jsx)(s.strong,{children:"JPEG"})," est un format de compression ",(0,i.jsx)(s.strong,{children:"avec perte"}),"."]})}),"\n",(0,i.jsx)(s.h2,{id:"pr\xe9requis",children:"Pr\xe9requis"}),"\n",(0,i.jsx)(s.p,{children:"Pour ce cours, il est n\xe9cessaire de conna\xeetre quelques notions de base sur la repr\xe9sentation des donn\xe9es en informatique. Voici un r\xe9sum\xe9 des notions \xe0 conna\xeetre :"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Un ",(0,i.jsx)(s.strong,{children:"bit"})," est la plus petite unit\xe9 de stockage en informatique. Il ne peut prendre que deux valeurs : 0 ou 1. Un ",(0,i.jsx)(s.strong,{children:"octet"})," est un groupe de ",(0,i.jsx)(s.strong,{children:"8 bits"}),". Il peut donc prendre 256 valeurs diff\xe9rentes (de 0 \xe0 255)."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Chaque ",(0,i.jsx)(s.strong,{children:"donn\xe9e"})," peut \xeatre repr\xe9sent\xe9e par une ",(0,i.jsx)(s.strong,{children:"suite de bits."})," Par exemple, le nombre 42 peut \xeatre repr\xe9sent\xe9 en binaire par la suite de bits ",(0,i.jsx)(s.code,{children:"101010"}),". Avec un octet, on peut repr\xe9senter au maximum 256 nombres diff\xe9rents."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Un ",(0,i.jsx)(s.strong,{children:"caract\xe8re"})," est g\xe9n\xe9ralement cod\xe9 sur un octet (cela peut d\xe9pendre de l'encodage utilis\xe9). Cela signifie que l'on peut repr\xe9senter 256 caract\xe8res diff\xe9rents. Cela inclut les ",(0,i.jsx)(s.strong,{children:"lettres"})," de l'alphabet, les ",(0,i.jsx)(s.strong,{children:"chiffres"}),", les caract\xe8res sp\xe9ciaux, etc."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"encodage-et-repr\xe9sentation-des-donn\xe9es",children:"Encodage et repr\xe9sentation des donn\xe9es"}),"\n",(0,i.jsxs)(s.p,{children:["Un encodage est une mani\xe8re de repr\xe9senter les donn\xe9es. Par exemple, on peut repr\xe9senter le nombre 42 de la mani\xe8re suivante : ",(0,i.jsx)(s.code,{children:"101010"}),". C'est un encodage ",(0,i.jsx)(s.strong,{children:"binaire"}),". On peut aussi repr\xe9senter le nombre 42 de la mani\xe8re suivante : ",(0,i.jsx)(s.code,{children:"2A"}),". C'est un encodage hexad\xe9cimal."]}),"\n",(0,i.jsxs)(s.p,{children:["Encoder des donn\xe9es revient \xe0 associer \xe0 chaque donn\xe9e un ",(0,i.jsx)(s.strong,{children:"code"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"Dans la suite de ce cours nous allons nous int\xe9resser \xe0 l'encodage binaire. C'est l'encodage utilis\xe9 par les ordinateurs et qui permet de repr\xe9senter les donn\xe9es de mani\xe8re la plus compacte possible. C'est aussi l'encodage utilis\xe9 par les algorithmes de compression."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.p,{children:["Dans un fichier texte, chaque lettre est repr\xe9sent\xe9e par un ",(0,i.jsx)(s.strong,{children:"caract\xe8re"}),". Ce caract\xe8re est g\xe9n\xe9ralement encod\xe9 sur un ",(0,i.jsx)(s.strong,{children:"octet"}),". Cela signifie que l'on peut repr\xe9senter au maximum 256 caract\xe8res diff\xe9rents. Cela inclut les lettres de l'alphabet, les chiffres, les caract\xe8res sp\xe9ciaux, etc."]}),"\n",(0,i.jsxs)(s.p,{children:["Mais cela d\xe9pend des donn\xe9es du probl\xe8me. Cet encodage sur un ",(0,i.jsx)(s.strong,{children:"octet"})," est simplement une convention qui permet d'associer \xe0 chaque caract\xe8re un ",(0,i.jsx)(s.strong,{children:"code unique"})," et d'uniformiser la mani\xe8re dont les caract\xe8res sont repr\xe9sent\xe9s (chaque caract\xe8re est repr\xe9sent\xe9 par un octet). C'est bien pratique et flexible pour communiquer des fichiers texte entre ordinateurs."]}),"\n",(0,i.jsx)(s.h3,{id:"compression",children:"Compression"}),"\n",(0,i.jsxs)(s.p,{children:["Mais g\xe9n\xe9ralement lorsqu'il s'agit de compresser des donn\xe9es, les donn\xe9es du probl\xe8me sont plus ",(0,i.jsx)(s.strong,{children:"simples"}),". Par exemple on pourrait se limiter aux ",(0,i.jsx)(s.strong,{children:"lettres de l'alphabet"}),". Dans ce cas, avoir un octet pour repr\xe9senter chaque lettre est une perte d'espace. En effet, on pourrait se contenter de 5 bits pour repr\xe9senter les 26 lettres de l'alphabet. Cela permettrait de r\xe9duire la taille du texte de 37.5% !"]}),"\n",(0,i.jsx)(s.admonition,{type:"info",children:(0,i.jsxs)(s.p,{children:["Plus g\xe9n\xe9ralement, si on se limite \xe0 ",(0,i.jsx)(s.code,{children:"n"})," possibilit\xe9s de donn\xe9es et que l'on souhaite utiliser un encodage avec le m\xeame nombre de bits pour chaque donn\xe9e, il faut ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mo,{stretchy:"false",children:"\u2308"}),(0,i.jsxs)(s.msub,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"log"}),(0,i.jsx)(s.mo,{children:"\u2061"})]}),(0,i.jsx)(s.mn,{children:"2"})]}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"n"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"\u2309"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\lceil \\log_2(n) \\rceil"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mopen",children:"\u2308"}),(0,i.jsxs)(s.span,{className:"mop",children:[(0,i.jsxs)(s.span,{className:"mop",children:["lo",(0,i.jsx)(s.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,i.jsx)(s.span,{className:"msupsub",children:(0,i.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(s.span,{className:"vlist-r",children:[(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.207em"},children:(0,i.jsxs)(s.span,{style:{top:"-2.4559em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(s.span,{className:"mord mtight",children:"2"})})]})}),(0,i.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.2441em"},children:(0,i.jsx)(s.span,{})})})]})})]}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(s.span,{className:"mclose",children:")\u2309"})]})})]})," bits pour repr\xe9senter chaque donn\xe9e.\nPar exemple, si on se limite aux ",(0,i.jsx)(s.strong,{children:"26"})," lettres de l'alphabet, il faut ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mo,{stretchy:"false",children:"\u2308"}),(0,i.jsxs)(s.msub,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"log"}),(0,i.jsx)(s.mo,{children:"\u2061"})]}),(0,i.jsx)(s.mn,{children:"2"})]}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mn,{children:"26"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"\u2309"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mo,{stretchy:"false",children:"\u2308"}),(0,i.jsx)(s.mn,{children:"4.7"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"\u2309"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mn,{children:"5"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\lceil \\log_2(26) \\rceil = \\lceil 4.7 \\rceil = 5"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mopen",children:"\u2308"}),(0,i.jsxs)(s.span,{className:"mop",children:[(0,i.jsxs)(s.span,{className:"mop",children:["lo",(0,i.jsx)(s.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,i.jsx)(s.span,{className:"msupsub",children:(0,i.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(s.span,{className:"vlist-r",children:[(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.207em"},children:(0,i.jsxs)(s.span,{style:{top:"-2.4559em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(s.span,{className:"mord mtight",children:"2"})})]})}),(0,i.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.2441em"},children:(0,i.jsx)(s.span,{})})})]})})]}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord",children:"26"}),(0,i.jsx)(s.span,{className:"mclose",children:")\u2309"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mopen",children:"\u2308"}),(0,i.jsx)(s.span,{className:"mord",children:"4.7"}),(0,i.jsx)(s.span,{className:"mclose",children:"\u2309"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"5"})]})]})]})," bits pour repr\xe9senter chaque lettre."]})}),"\n",(0,i.jsx)(s.p,{children:"De plus pour n'importe quelle fa\xe7on d'encoder les donn\xe9es, il faut respecter deux r\xe8gles pour que l'encodage puisse \xeatre d\xe9cod\xe9 :"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Chaque donn\xe9e doit \xeatre associ\xe9e \xe0 un code ",(0,i.jsx)(s.strong,{children:"unique"})]}),"\n",(0,i.jsxs)(s.li,{children:["Il ne doit pas y avoir d'",(0,i.jsx)(s.strong,{children:"ambigu\xeft\xe9"})," lors du d\xe9codage des donn\xe9es. Cela signifie qu'il ne faut pas associer \xe0 une donn\xe9e le code ",(0,i.jsx)(s.code,{children:"01"})," et \xe0 une autre donn\xe9e le code ",(0,i.jsx)(s.code,{children:"011"})," sinon impossible de savoir si l'on doit d\xe9coder les deux premiers bits ",(0,i.jsx)(s.code,{children:"01"})," ou si cela faisait en fait partie du code ",(0,i.jsx)(s.code,{children:"011"}),". Un tel codage sans ambigu\xeft\xe9 est appel\xe9 ",(0,i.jsx)(s.strong,{children:"pr\xe9fixe"}),", nous y reviendrons plus tard."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"codage-par-plages-run-length-encoding",children:"Codage par plages (Run-Length Encoding)"}),"\n",(0,i.jsxs)(s.p,{children:["Le codage par plages est une technique de compression ",(0,i.jsx)(s.strong,{children:"sans perte"}),". Cela signifie que l'on peut retrouver les donn\xe9es d'origine apr\xe8s les avoir d\xe9compress\xe9es. Elle est tr\xe8s utilis\xe9e pour compresser des images, comme par exemple les images au format ",(0,i.jsx)(s.strong,{children:"BMP"})," ou ",(0,i.jsx)(s.strong,{children:"JPEG"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["Le principe du codage par plages est de tenir compte de la ",(0,i.jsx)(s.strong,{children:"r\xe9p\xe9tition"})," des donn\xe9es. Admettons que l'on ait un texte de 8 caract\xe8res, compos\xe9 uniquement de la lettre ",(0,i.jsx)(s.code,{children:"a"})," : ",(0,i.jsx)(s.code,{children:"aaaaaaaa"}),".\nSi l'on veut stocker ce texte sur un support de stockage, il faudra donc ",(0,i.jsx)(s.strong,{children:"8 octets"})," pour le stocker (1 octet par caract\xe8re)."]}),"\n",(0,i.jsxs)(s.p,{children:["Mais si l'on tient compte du fait que le texte est compos\xe9 uniquement de la lettre ",(0,i.jsx)(s.code,{children:"a"}),", on peut le repr\xe9senter de la mani\xe8re suivante : ",(0,i.jsx)(s.code,{children:"8a"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"On peut donc stocker ce texte sur un support de stockage en utilisant seulement 2 octets. Cela permet de r\xe9duire la taille du texte de 75% !"}),"\n",(0,i.jsxs)(s.p,{children:["C'est le principe du codage par plages : on remplace une suite de caract\xe8res identiques par le nombre de fois que le caract\xe8re est r\xe9p\xe9t\xe9, suivi du caract\xe8re. Par exemple, le texte suivant ",(0,i.jsx)(s.code,{children:"aaaabbbcddddd"})," peut \xeatre repr\xe9sent\xe9 par ",(0,i.jsx)(s.code,{children:"4a3b1c5d"}),". Pour un gain de 13-8=5 octets, soit 38% de gain."]}),"\n",(0,i.jsxs)(s.p,{children:["\u26a0\ufe0f"," Quand il y a peu de r\xe9p\xe9titions cependant le codage par plages peut augmenter la taille des donn\xe9es. Par exemple, si on applique le codage par plage sur le texte suivant ",(0,i.jsx)(s.code,{children:"abcdefgh"})," on obtient ",(0,i.jsx)(s.code,{children:"1a1b1c1d1e1f1g1h"}),". Cela prend plus de place que la cha\xeene d'origine !\nDans ce cas de figure, pour minimiser cet effet, on choisit plut\xf4t d'ajouter un ",(0,i.jsx)(s.strong,{children:"caract\xe8re de contr\xf4le"})," et un nombre ",(0,i.jsx)(s.code,{children:"n"})," pour indiquer que les ",(0,i.jsx)(s.code,{children:"n"})," prochains caract\xe8res ne sont pas compress\xe9s. Par exemple, on pourrait utiliser le caract\xe8re ",(0,i.jsx)(s.code,{children:"*"})," comme caract\xe8re de contr\xf4le et la cha\xeene ",(0,i.jsx)(s.code,{children:"abcdefgh"})," serait compress\xe9e en ",(0,i.jsx)(s.code,{children:"*8abcdefgh"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"en-pratique",children:"En pratique"}),"\n",(0,i.jsxs)(s.p,{children:["L'encodage ",(0,i.jsx)(s.strong,{children:"RLE"})," peut \xeatre exprim\xe9 de multiples fa\xe7ons en pratique pour tenir compte des propri\xe9t\xe9s des donn\xe9es ainsi que d'algorithmes de compression suppl\xe9mentaires. Cela permet de compresser les donn\xe9es seulement lorsque cela est n\xe9cessaire et de laisser la cha\xeene telle quelle lorsque la compression induit un gaspillage."]}),"\n",(0,i.jsx)(s.p,{children:"Par exemple on pourrait se donner les r\xe8gles suivantes :"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Lorsque trois \xe9l\xe9ments ou plus se r\xe9p\xe8tent cons\xe9cutivement alors la m\xe9thode de compression RLE est utilis\xe9e. On ins\xe8re alors le nombre d'\xe9l\xe9ments r\xe9p\xe9t\xe9s, suivi du caract\xe8re r\xe9p\xe9t\xe9."}),"\n",(0,i.jsx)(s.li,{children:"Sinon un caract\xe8re de contr\xf4le (*) est ins\xe9r\xe9, suivi du nombre d'\xe9l\xe9ments de la cha\xeene non compress\xe9e puis de cette derni\xe8re."}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Ainsi la cha\xeene ",(0,i.jsx)(s.code,{children:"aaaabccdeeeeefgh"})," serait compress\xe9e en ",(0,i.jsx)(s.code,{children:"4a*4bccd5e*3fgh"})," et la cha\xeene ",(0,i.jsx)(s.code,{children:"abcdefgh"})," serait compress\xe9e en ",(0,i.jsx)(s.code,{children:"*8abcdefgh"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["On pourrait aussi plut\xf4t se dire que l'on utilise le caract\xe8re de contr\xf4le pour indiquer que la cha\xeene est compress\xe9e. Dans ce cas, la cha\xeene ",(0,i.jsx)(s.code,{children:"aaaabccdeeeeefgh"})," serait compress\xe9e en ",(0,i.jsx)(s.code,{children:"*4abccd*5efgh"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["Enfin on pourrait aussi se dire que l'on utilise le caract\xe8re lui m\xeame comme caract\xe8re de contr\xf4le. de sorte que chaque fois qu'un caract\xe8re appara\xeet deux fois, il indique une longueur d'ex\xe9cution. Dans l'exemple pr\xe9c\xe9dent, cela donnerait pour la cha\xeene ",(0,i.jsx)(s.code,{children:"aaaabccdeeeeefgh"})," l'encodage ",(0,i.jsx)(s.code,{children:"aa4bcc1dee5fgh"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"dans-les-images",children:"Dans les images"}),"\n",(0,i.jsx)(s.p,{children:"Dans les images il est courant de trouver des zones de couleurs uniformes. Par exemple, une image de ciel bleu peut \xeatre repr\xe9sent\xe9e par une suite de pixels bleus. Dans ce cas, le codage par plages permet de r\xe9duire consid\xe9rablement la taille de l'image."}),"\n",(0,i.jsx)(s.p,{children:"Il existe donc des variantes pour parcourir les pixels d'une image dans un certain sens pour maximiser les zones de couleurs uniformes (ou de valeurs identiques). Par exemple, on peut parcourir les pixels de gauche \xe0 droite, de haut en bas ou m\xeame encore en zigzag."}),"\n",(0,i.jsx)(s.h2,{id:"codage-de-huffman",children:"Codage de Huffman"}),"\n",(0,i.jsxs)(s.p,{children:["Le codage de Huffman est aussi une technique de compression ",(0,i.jsx)(s.strong,{children:"sans perte"}),". C'est une technique tr\xe8s utilis\xe9e pour compresser des fichiers, comme par exemple des fichiers texte. Cette technique est utilis\xe9e par de nombreux formats de fichiers, comme par exemple le format ",(0,i.jsx)(s.strong,{children:"JPEG"})," pour les images."]}),"\n",(0,i.jsxs)(s.p,{children:["Par exemple, si on se limite aux quatre lettres ",(0,i.jsx)(s.code,{children:"a"}),", ",(0,i.jsx)(s.code,{children:"b"}),", ",(0,i.jsx)(s.code,{children:"c"})," et ",(0,i.jsx)(s.code,{children:"d"})," (on a donc besoin seulement de 2 bits pour coder chaque lettre\n).\nVoil\xe0 un encodage possible :"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"a"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"00"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"b"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"01"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"c"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"10"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"d"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"11"})]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Le texte ",(0,i.jsx)(s.code,{children:"abbacada"})," peut donc \xeatre repr\xe9sent\xe9 par ",(0,i.jsx)(s.code,{children:"0001010010001100"}),".\nC'est d\xe9j\xe0 mieux que l'encodage ASCII, qui utilise 8 bits pour coder chaque lettre. On se limite \xe0 des donn\xe9es particuli\xe8res, et on utilise un encodage plus compact."]}),"\n",(0,i.jsx)(s.p,{children:"Mais on peut faire mieux !"}),"\n",(0,i.jsx)(s.h3,{id:"fr\xe9quence-dapparition-des-donn\xe9es",children:"Fr\xe9quence d'apparition des donn\xe9es"}),"\n",(0,i.jsxs)(s.p,{children:["Le principe du codage de Huffman est de tenir compte de la ",(0,i.jsx)(s.strong,{children:"fr\xe9quence d'apparition"})," des donn\xe9es."]}),"\n",(0,i.jsx)(s.p,{children:"Pour un texte compos\xe9 de 100 caract\xe8res (toujours avec notre alphabet de 4 lettres) il faudra donc 200 bits pour le repr\xe9senter."}),"\n",(0,i.jsxs)(s.p,{children:["Dans le cas de notre exemple pr\xe9c\xe9dent ",(0,i.jsx)(s.code,{children:"abbacada"}),", on peut remarquer que la lettre ",(0,i.jsx)(s.code,{children:"a"})," appara\xeet ",(0,i.jsx)(s.strong,{children:"4"})," fois, la lettre ",(0,i.jsx)(s.code,{children:"b"})," appara\xeet ",(0,i.jsx)(s.strong,{children:"2"})," fois et les lettres ",(0,i.jsx)(s.code,{children:"c"})," et ",(0,i.jsx)(s.code,{children:"d"})," apparaissent ",(0,i.jsx)(s.strong,{children:"1"})," fois. On peut donc se demander si l'on ne pourrait pas utiliser un encodage diff\xe9rent pour chaque lettre, en tenant compte de la fr\xe9quence d'apparition de chaque lettre. Cela permettrait de r\xe9duire la taille du texte."]}),"\n",(0,i.jsx)(s.p,{children:"On pourrait donc utiliser moins d'un octet pour coder les lettres les plus utilis\xe9es, et plus d'un octet pour coder les lettres les moins utilis\xe9es. Cela permettrait de r\xe9duire la taille du texte."}),"\n",(0,i.jsx)(s.p,{children:"Admettons que l'on code les lettres de la mani\xe8re suivante :"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"a"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"0"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"b"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"10"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"c"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"110"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"d"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"111"})]}),"\n"]}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["J'ai fait attention \xe0 ce que chaque code soit ",(0,i.jsx)(s.strong,{children:"pr\xe9fixe"}),". Cela signifie qu'il n'y a pas de code qui est pr\xe9fixe d'un autre code. Cela permet de d\xe9coder les donn\xe9es sans ambigu\xeft\xe9."]})}),"\n",(0,i.jsxs)(s.p,{children:["Le texte ",(0,i.jsx)(s.code,{children:"abbacada"})," peut donc \xeatre repr\xe9sent\xe9 par ",(0,i.jsx)(s.code,{children:"01010011001110"})," (soit 14 bits). C'est mieux que l'encodage pr\xe9c\xe9dent, qui utilisait 16 bits."]}),"\n",(0,i.jsx)(s.p,{children:"Mais comment faire pour trouver le meilleur encodage possible ?"}),"\n",(0,i.jsx)(s.h3,{id:"arbre-binaire",children:"Arbre binaire"}),"\n",(0,i.jsxs)(s.p,{children:["Dans la suite de ce cours, nous allons utiliser un ",(0,i.jsx)(s.strong,{children:"arbre binaire"})," (strict) pour trouver l'encodage de Huffman (en fonction de la fr\xe9quence d'apparition des donn\xe9es). Mais j'aimerais d'abord vous expliquer pourquoi on utilise un arbre binaire."]}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["Dans un arbre binaire ",(0,i.jsx)(s.strong,{children:"strict"})," (ou ",(0,i.jsx)(s.strong,{children:"localement complet"}),"), chaque n\u0153ud a soit 0, soit 2 fils. C'est donc soit un n\u0153ud ",(0,i.jsx)(s.strong,{children:"interne"})," (qui a deux fils), soit une ",(0,i.jsx)(s.strong,{children:"feuille"})," (qui n'a pas de fils)."]})}),"\n",(0,i.jsxs)(s.p,{children:["Une propri\xe9t\xe9 int\xe9ressante des arbres binaires est que pour chaque feuille il existe un ",(0,i.jsx)(s.strong,{children:"chemin unique"})," de la racine \xe0 la feuille. Ce chemin va permettre d'associer un code \xe0 chaque donn\xe9e. En plus d'\xeatre unique, ce chemin est aussi ",(0,i.jsx)(s.strong,{children:"pr\xe9fixe"}),". Cela signifie que l'on ne peut pas avoir un chemin qui est pr\xe9fixe d'un autre chemin."]}),"\n",(0,i.jsxs)(s.p,{children:["Reprenons notre exemple pr\xe9c\xe9dent avec les lettres ",(0,i.jsx)(s.code,{children:"a"}),", ",(0,i.jsx)(s.code,{children:"b"}),", ",(0,i.jsx)(s.code,{children:"c"})," et ",(0,i.jsx)(s.code,{children:"d"}),". Admettons que les quatre lettres apparaissent avec la m\xeame fr\xe9quence."]}),"\n",(0,i.jsx)(s.mermaid,{value:"flowchart TB\nT((1.0))--\x3e|0|L((0.5))\nT--\x3e|1|R((0.5))\nL--\x3e|0|a((a))\nL--\x3e|1|b((b))\nR--\x3e|0|c((c))\nR--\x3e|1|d((d))"}),"\n",(0,i.jsx)(s.p,{children:"Chaque feuille de l'arbre va permettre de repr\xe9senter une donn\xe9e, ici une lettre."}),"\n",(0,i.jsxs)(s.p,{children:["Dans cet arbre, si l'on parcourt le chemin ",(0,i.jsx)(s.code,{children:"0-0"})," (successivement le fils gauche puis le fils gauche), on arrive \xe0 la lettre ",(0,i.jsx)(s.code,{children:"a"}),". De m\xeame pour les autres feuillets. On peut donc associer \xe0 chaque lettre un code unique :"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"a"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"00"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"b"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"01"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"c"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"10"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"d"})," est cod\xe9 sur ",(0,i.jsx)(s.code,{children:"11"})]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"On retrouve bien l'encodage que l'on avait utilis\xe9 pr\xe9c\xe9demment dans le cas de donn\xe9es \xe9quiprobables."}),"\n",(0,i.jsx)(s.h3,{id:"algorithme",children:"Algorithme"}),"\n",(0,i.jsxs)(s.p,{children:["Revenons maintenant \xe0 notre cas avec des donn\xe9es non \xe9quiprobables. Admettons que l'on ait le texte suivant : ",(0,i.jsx)(s.code,{children:"abbacada"}),". On peut calculer la fr\xe9quence d'apparition de chaque lettre :"]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Lettre"}),(0,i.jsx)(s.th,{children:"Fr\xe9quence"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"a"}),(0,i.jsx)(s.td,{children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mn,{children:"4"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"/"}),(0,i.jsx)(s.mn,{children:"8"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mn,{children:"0.5"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"4/8 = 0.5"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord",children:"4/8"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"0.5"})]})]})]})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"b"}),(0,i.jsx)(s.td,{children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mn,{children:"2"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"/"}),(0,i.jsx)(s.mn,{children:"8"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mn,{children:"0.25"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"2/8 = 0.25"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord",children:"2/8"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"0.25"})]})]})]})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"c"}),(0,i.jsx)(s.td,{children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mn,{children:"1"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"/"}),(0,i.jsx)(s.mn,{children:"8"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mn,{children:"0.125"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"1/8 = 0.125"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord",children:"1/8"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"0.125"})]})]})]})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"d"}),(0,i.jsx)(s.td,{children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mn,{children:"1"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"/"}),(0,i.jsx)(s.mn,{children:"8"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mn,{children:"0.125"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"1/8 = 0.125"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord",children:"1/8"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"0.125"})]})]})]})})]})]})]}),"\n",(0,i.jsxs)(s.p,{children:["On peut remarquer qu'en utilisant une repr\xe9sentation en arbre binaire complet, les lettres les ",(0,i.jsx)(s.strong,{children:"moins fr\xe9quentes"})," seront cod\xe9es sur des codes plus gros (chemins les plus longs dans l'arbre) et donc sur les feuilles les plus basses de l'arbre. Les lettres les ",(0,i.jsx)(s.strong,{children:"plus fr\xe9quentes"})," seront cod\xe9es sur des codes plus petits (chemins les plus courts dans l'arbre) et donc sur les feuilles les plus hautes de l'arbre."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.p,{children:"C'est donc en suivant cette logique que l'on va construire l'arbre binaire. On va commencer par construire un arbre binaire avec les lettres les moins fr\xe9quentes."}),"\n",(0,i.jsxs)(s.p,{children:["On va donc commencer par construire un arbre binaire avec les lettres ",(0,i.jsx)(s.code,{children:"c"})," et ",(0,i.jsx)(s.code,{children:"d"}),". On va donc cr\xe9er un n\u0153ud ",(0,i.jsx)(s.code,{children:"cd"})," qui va avoir deux fils ",(0,i.jsx)(s.code,{children:"c"})," et ",(0,i.jsx)(s.code,{children:"d"}),". On va associer \xe0 chaque n\u0153ud la somme des fr\xe9quences de ses fils. On va donc associer \xe0 ",(0,i.jsx)(s.code,{children:"cd"})," la fr\xe9quence ",(0,i.jsx)(s.code,{children:"0.125 + 0.125 = 0.25"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["On va consid\xe9rer maintenant que ",(0,i.jsx)(s.code,{children:"cd"})," est un substitut aux lettres ",(0,i.jsx)(s.code,{children:"c"})," et ",(0,i.jsx)(s.code,{children:"d"})," et repr\xe9sente donc une seule donn\xe9e avec un fr\xe9quence de ",(0,i.jsx)(s.code,{children:"0.25"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["Je vais appeler ce regroupement de donn\xe9es un ",(0,i.jsx)(s.strong,{children:"symbole"}),". Un symbole est donc une donn\xe9e qui peut \xeatre compos\xe9e de plusieurs donn\xe9es. Par exemple, le symbole ",(0,i.jsx)(s.code,{children:"cd"})," est compos\xe9 des donn\xe9es ",(0,i.jsx)(s.code,{children:"c"})," et ",(0,i.jsx)(s.code,{children:"d"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["On va donc construire un arbre binaire avec les lettres ",(0,i.jsx)(s.code,{children:"b"})," et ",(0,i.jsx)(s.code,{children:"cd"})," (qui sont les deux symboles les moins fr\xe9quents parmi ",(0,i.jsx)(s.code,{children:"a"}),", ",(0,i.jsx)(s.code,{children:"b"})," et ",(0,i.jsx)(s.code,{children:"cd"}),"). On va donc cr\xe9er un n\u0153ud ",(0,i.jsx)(s.code,{children:"bcd"})," qui va avoir deux fils ",(0,i.jsx)(s.code,{children:"b"})," et ",(0,i.jsx)(s.code,{children:"cd"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["En r\xe9p\xe9tant cette op\xe9ration, on va finir par n'avoir plus que deux symboles : ",(0,i.jsx)(s.code,{children:"a"})," et ",(0,i.jsx)(s.code,{children:"bcd"}),". Cela va conduire \xe0 cr\xe9er l'arbre final qui contient tous les lettres initiales."]}),"\n",(0,i.jsx)(s.p,{children:"Cela nous donne finalement l'arbre suivant:"}),"\n",(0,i.jsx)(s.mermaid,{value:"flowchart TB\nabcd((1.0))--\x3e|0|a((0.5))\nabcd--\x3e|1|bcd((0.5))\nbcd--\x3e|0|b((0.25))\nbcd--\x3e|1|cd((0.25))\ncd--\x3e|0|c((0.125))\ncd--\x3e|1|d((0.125))"}),"\n",(0,i.jsx)(s.p,{children:"Ce qui peut se traduire par l'encodage suivant :"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"a"}),": ",(0,i.jsx)(s.code,{children:"0"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"b"}),": ",(0,i.jsx)(s.code,{children:"10"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"c"}),": ",(0,i.jsx)(s.code,{children:"110"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"d"}),": ",(0,i.jsx)(s.code,{children:"111"})]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"On retrouve bien l'encodage que j'avais propos\xe9 pr\xe9c\xe9demment."}),"\n",(0,i.jsx)(s.p,{children:"Math\xe9matiquement, on peut d\xe9montrer que l'encodage de Huffman est optimal. Cela signifie que l'encodage de Huffman permet de compresser les donn\xe9es de mani\xe8re optimale."}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["En pratique, pour pouvoir d\xe9coder les donn\xe9es, il faut stocker l'arbre binaire quelque part. Cela peut \xeatre fait de diff\xe9rentes mani\xe8res. Par exemple, on peut stocker l'arbre binaire dans le fichier compress\xe9.\nCela ajoute un peu de poids au fichier compress\xe9, mais cela permet de d\xe9coder les donn\xe9es ce qui est tout de m\xeame pratique ","\ud83d\ude03","."]})}),"\n",(0,i.jsx)(s.h2,{id:"r\xe9sum\xe9",children:"R\xe9sum\xe9"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"La compression de donn\xe9es permet de r\xe9duire la taille des donn\xe9es. Cela permet de stocker plus de donn\xe9es sur un support de stockage, ou de transmettre les donn\xe9es plus rapidement sur un r\xe9seau."}),"\n",(0,i.jsxs)(s.li,{children:["Il existe deux types de compression de donn\xe9es : la compression ",(0,i.jsx)(s.strong,{children:"avec perte"})," et la compression ",(0,i.jsx)(s.strong,{children:"sans perte"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["L'encodage est le fait d'associer \xe0 chaque donn\xe9e un ",(0,i.jsx)(s.strong,{children:"code"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["Le codage par plages (",(0,i.jsx)(s.strong,{children:"RLE"}),") est une technique de compression ",(0,i.jsx)(s.strong,{children:"sans perte"})," et consiste \xe0 remplacer une suite de caract\xe8res identiques par le nombre de fois que le caract\xe8re est r\xe9p\xe9t\xe9, suivi du caract\xe8re."]}),"\n",(0,i.jsxs)(s.li,{children:["Le codage de Huffman est une technique de compression ",(0,i.jsx)(s.strong,{children:"sans perte"})," et consiste \xe0 tenir compte de la ",(0,i.jsx)(s.strong,{children:"fr\xe9quence d'apparition"})," des donn\xe9es. Chaque donn\xe9e est associ\xe9e \xe0 un code ",(0,i.jsx)(s.strong,{children:"unique"})," et ",(0,i.jsx)(s.strong,{children:"pr\xe9fixe"}),". L'encodage de Huffman est optimal. On peut construire l'encodage de Huffman en utilisant un arbre binaire complet."]}),"\n",(0,i.jsx)(s.li,{children:"Un code pr\xe9fixe est un code dans lequel aucun code n'est pr\xe9fixe d'un autre code. Cela permet de d\xe9coder les donn\xe9es sans ambigu\xeft\xe9."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"sources",children:"Sources"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Super vid\xe9o sur la th\xe9orie de l'information et l'encodage de Huffman : ",(0,i.jsx)(s.a,{href:"https://www.youtube.com/watch?v=B3y0RsVCyrw",children:"https://www.youtube.com/watch?v=B3y0RsVCyrw"})]}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);