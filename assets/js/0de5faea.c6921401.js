"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[5599],{77347:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var s=r(85893),i=r(11151);const t={title:"Retours G\xe9n\xe9raux",tags:["C++"]},c=void 0,a={id:"Subjects/IMAC2026/S1/feedbacks",title:"Retours G\xe9n\xe9raux",description:"Caract\xe8res et ASCII",source:"@site/content/Subjects/IMAC2026/S1/feedbacks.md",sourceDirName:"Subjects/IMAC2026/S1",slug:"/Subjects/IMAC2026/S1/feedbacks",permalink:"/Learn--cpp_programming/Subjects/IMAC2026/S1/feedbacks",draft:!1,unlisted:!1,tags:[{inline:!0,label:"C++",permalink:"/Learn--cpp_programming/tags/c"}],version:"current",frontMatter:{title:"Retours G\xe9n\xe9raux",tags:["C++"]},sidebar:"Subjects",previous:{title:"Correction",permalink:"/Learn--cpp_programming/Subjects/IMAC2026/S1/correction"},next:{title:"Sujet",permalink:"/Learn--cpp_programming/Subjects/IMAC2026/S2/sujet"}},l={},o=[{value:"Caract\xe8res et ASCII",id:"caract\xe8res-et-ascii",level:2},{value:"Condition",id:"condition",level:2},{value:"Puissance",id:"puissance",level:2},{value:"R\xe9f\xe9rence constante",id:"r\xe9f\xe9rence-constante",level:2},{value:"Initialisation d&#39;un g\xe9n\xe9rateur de nombre al\xe9atoire",id:"initialisation-dun-g\xe9n\xe9rateur-de-nombre-al\xe9atoire",level:2},{value:"Include",id:"include",level:2},{value:"S\xe9paration des responsabilit\xe9s",id:"s\xe9paration-des-responsabilit\xe9s",level:2},{value:"Concat\xe9nation de cha\xeenes de caract\xe8res",id:"concat\xe9nation-de-cha\xeenes-de-caract\xe8res",level:2},{value:"Unsigned int et std::cin",id:"unsigned-int-et-stdcin",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"caract\xe8res-et-ascii",children:"Caract\xe8res et ASCII"}),"\n",(0,s.jsx)(n.p,{children:"Pour comparer un caract\xe8re on peut en effet utiliser les codes ASCII mais on peut aussi utiliser le caract\xe8re directement."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"c == 97\n// est \xe9quivalent \xe0\nc == 'a'\n"})}),"\n",(0,s.jsx)(n.p,{children:"un caract\xe8re est en fait un entier(compris entre 0 et 255), donc on peut faire des op\xe9rations dessus."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"char c = 'a';\nc = c + 1; // c vaut maintenant 'b'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["C'est un ",(0,s.jsx)(n.strong,{children:"nombre"})," qui \xe0 une repr\xe9sentation particuli\xe8re(lorsqu'on l'affiche) mais c'est un nombre comme un autre."]}),"\n",(0,s.jsx)(n.p,{children:"Pour des comparaisons de caract\xe8res, il est pr\xe9f\xe9rable d'utiliser la notation avec les caract\xe8res directement car c'est plus lisible et plus simple \xe0 \xe9crire."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"c == 'a'\n// est plus lisible que\nc == 97\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Par exemple si l'on souhaite savoir si un caract\xe8re est un ",(0,s.jsx)(n.strong,{children:"lettre minuscule"}),", on peut faire (en sachant que les lettres minuscules sont les caract\xe8res entre ",(0,s.jsx)(n.code,{children:"a"})," et ",(0,s.jsx)(n.code,{children:"z"})," et qu'ils sont ",(0,s.jsx)(n.strong,{children:"cons\xe9cutifs"})," dans la table ",(0,s.jsx)(n.strong,{children:"ASCII"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"bool isLower(char c) {\n    return c >= 'a' && c <= 'z';\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"condition",children:"Condition"}),"\n",(0,s.jsxs)(n.p,{children:["Pour retourner le r\xe9sultat d'une ",(0,s.jsx)(n.strong,{children:"condition"}),", il n'est pas n\xe9cessaire de faire un ",(0,s.jsx)(n.code,{children:"if"})," suivi d'un ",(0,s.jsx)(n.code,{children:"else"})," avec un ",(0,s.jsx)(n.code,{children:"return"})," dans chaque bloc."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <cctype>\nbool isVoyelle(char c) {\n    c = std::tolower(c);\n    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n        return true;\n    } else {\n        return false;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En effet la condition ",(0,s.jsx)(n.code,{children:"c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y'"})," est d\xe9j\xe0 un ",(0,s.jsx)(n.strong,{children:"bool\xe9en"})," en soit, donc on peut directement le retourner."]}),"\n",(0,s.jsx)(n.p,{children:"C'est \xe9quivalent \xe0 faire:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"if(true) {\n    return true;\n} else {\n    return false;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Ca fonctionne mais c'est pas n\xe9cessaire et \xe7a fait plus de code \xe0 \xe9crire et \xe0 lire."}),"\n",(0,s.jsx)(n.p,{children:"il faut donc plut\xf4t retourner directement le r\xe9sultat de la condition."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"bool isVoyelle(char c) {\n    c = std::tolower(c);\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y';\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"puissance",children:"Puissance"}),"\n",(0,s.jsx)(n.p,{children:"Attention,"}),"\n",(0,s.jsxs)(n.p,{children:["la syntaxe ",(0,s.jsx)(n.code,{children:"x**2"})," n'est pas valide en ",(0,s.jsx)(n.strong,{children:"C++"}),". Il faut utiliser la fonction ",(0,s.jsx)(n.code,{children:"pow"})," de la biblioth\xe8que ",(0,s.jsx)(n.code,{children:"cmath"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <cmath>\nint x = 2;\nint y = pow(x, 2); // y vaut 4\n"})}),"\n",(0,s.jsx)(n.p,{children:"ou alors pour faire simplement un carr\xe9 une multiplication suffit."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int x = 2;\nint y = x*x; // y vaut 4\n"})}),"\n",(0,s.jsx)(n.h2,{id:"r\xe9f\xe9rence-constante",children:"R\xe9f\xe9rence constante"}),"\n",(0,s.jsxs)(n.p,{children:["Lorsque l'on souhaite juste lire une variable en param\xe8tre d'une fonction, on peut utiliser une ",(0,s.jsx)(n.strong,{children:"r\xe9f\xe9rence constante"}),'. Particuli\xe8rement si cette variable est un "',(0,s.jsx)(n.strong,{children:"gros"}),'" objet comme une ',(0,s.jsx)(n.strong,{children:"chaines de caract\xe8res"}),", un ",(0,s.jsx)(n.strong,{children:"tableau"})," ou une ",(0,s.jsx)(n.strong,{children:"structure"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Par exemple pour la fonction ",(0,s.jsx)(n.code,{children:"countVowels"})," on peut utiliser une ",(0,s.jsx)(n.strong,{children:"r\xe9f\xe9rence constante"})," pour le param\xe8tre ",(0,s.jsx)(n.code,{children:"s"})," qui est un ",(0,s.jsx)(n.code,{children:"std::string"})," \xe7a permet de ne pas faire de copie de la cha\xeene de caract\xe8re."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int countVowels(std::string const& s) {\n    // ...\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"initialisation-dun-g\xe9n\xe9rateur-de-nombre-al\xe9atoire",children:"Initialisation d'un g\xe9n\xe9rateur de nombre al\xe9atoire"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"std::srand(seed);"})," permet d'",(0,s.jsx)(n.strong,{children:"initialiser"})," le g\xe9n\xe9rateur de nombre al\xe9atoire avec une valeur qui change \xe0 chaque fois que l'on ex\xe9cute le programme."]}),"\n",(0,s.jsxs)(n.p,{children:["On doit l'appeler ",(0,s.jsx)(n.strong,{children:"une seule fois"})," au d\xe9but du programme et pas dans une fonction qui retourne un nombre al\xe9atoire. Car sinon on r\xe9initialise le g\xe9n\xe9rateur \xe0 chaque utilisation de la fonction et on obtient toujours le m\xeame nombre al\xe9atoire. (sauf si le param\xe8tre ",(0,s.jsx)(n.code,{children:"seed"})," lui m\xeame change \xe0 chaque fois mais \xe7a reste pas une bonne solution)."]}),"\n",(0,s.jsx)(n.h2,{id:"include",children:"Include"}),"\n",(0,s.jsxs)(n.p,{children:["Pour pouvoir utiliser les d\xe9finitions ou fonction \xe9crit dans un fichier depuis un autre il faut utiliser la directive ",(0,s.jsx)(n.code,{children:"#include"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Par example, pour pouvoir utiliser l'\xe9num\xe9ration ",(0,s.jsx)(n.code,{children:"Direction"})," dans le fichier ",(0,s.jsx)(n.code,{children:"Point.cpp"}),"  (on en a besoin pour d\xe9finit la fonction ",(0,s.jsx)(n.code,{children:"move"}),"), il faut inclure le fichier ",(0,s.jsx)(n.code,{children:"Direction.hpp"})," dans le fichier ",(0,s.jsx)(n.code,{children:"Point.cpp"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"s\xe9paration-des-responsabilit\xe9s",children:"S\xe9paration des responsabilit\xe9s"}),"\n",(0,s.jsx)(n.p,{children:"Dans l'id\xe9al, il faut que chaque fonction ait une seule responsabilit\xe9. C'est \xe0 dire qu'elle ne doit faire qu'une seule chose.\nCela permet de mieux r\xe9utiliser le code et permet d'\xeatre plus flexible dans l'utilisation de la fonction."}),"\n",(0,s.jsxs)(n.p,{children:["Par exemple, si on veut trouver la valeur maximale d'un tableau, on peut cr\xe9er une fonction ",(0,s.jsx)(n.code,{children:"max"})," et ",(0,s.jsx)(n.strong,{children:"ensuite"})," afficher le r\xe9sultat."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'int max(std::vector<int> const& vec) {\n    int max {vec[0]};\n    for (size_t i {1}; i < vec.size(); ++i)\n    {\n        if (vec[i] > max)\n        {\n            max = vec[i];\n        }\n    }\n\n    return max;\n}\n\nint main() {\n    std::vector<int> vec {1, 2, 3, 4, 5};\n    std::cout << "la valeur maximale est: " << max(vec) << std::endl;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Plut\xf4t que de faire:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'\nvoid max(std::vector<int> const& vec) {\n    int max {vec[0]};\n    // ...\n\n    std::cout << "la valeur maximale est: " << max << std::endl;\n}\n\nint main() {\n    std::vector<int> vec {1, 2, 3, 4, 5};\n    max(vec);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Car imaginons que l'on veuille utiliser la fonction ",(0,s.jsx)(n.code,{children:"max"})," pour autre chose (un algorithme de tri par exemple), on ne peut pas car la fonction ",(0,s.jsx)(n.code,{children:"max"})," affiche le r\xe9sultat et ne le retourne pas.\nOu si elle l'affiche et le retourne, cela va tout de m\xeame \"polluer\" l'affichage sans que l'on puisse le contr\xf4ler."]}),"\n",(0,s.jsx)(n.h2,{id:"concat\xe9nation-de-cha\xeenes-de-caract\xe8res",children:"Concat\xe9nation de cha\xeenes de caract\xe8res"}),"\n",(0,s.jsxs)(n.p,{children:["Pour construire une cha\xeene de caract\xe8res, on peut utiliser l'op\xe9rateur ",(0,s.jsx)(n.code,{children:"+"})," pour concat\xe9ner des ",(0,s.jsx)(n.strong,{children:"cha\xeenes de caract\xe8res"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Mais il faut faire attention \xe0 bien utiliser des ",(0,s.jsx)(n.strong,{children:"cha\xeenes de caract\xe8res"})," et pas des ",(0,s.jsx)(n.strong,{children:"caract\xe8res"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Les caract\xe8res \xe9tant des nombres, l'op\xe9rateur ",(0,s.jsx)(n.code,{children:"+"})," va faire une addition et non une concat\xe9nation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'    std::string hello {"Hello"};\n    std::string world {"World"};\n    std::string helloWorld {hello + world}; //fonctionne\n    std::string he {\'H\' + \'e\'}; // ne fonctionne pas\n    // Erreur de compilation : "error: narrowing conversion of \u2018173\u2019 from \u2018int\u2019 to \u2018char\u2019 [-Wnarrowing]"\n'})}),"\n",(0,s.jsx)(n.p,{children:"On ne peux pas non plus faire :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'    std::string helloWorld {"Hello" + "World"}; // ne fonctionne pas\n    // Erreur de compilation : "error: invalid operands of types \u2018const char [6]\u2019 and \u2018const char [6]\u2019 to binary \u2018operator+\u2019"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Car ",(0,s.jsx)(n.code,{children:'"Hello"'})," et ",(0,s.jsx)(n.code,{children:'"World"'})," ne sont pas encore \xe0 ce stade des ",(0,s.jsx)(n.code,{children:"std::string"})," du ",(0,s.jsx)(n.strong,{children:"C++"})," mais des ",(0,s.jsx)(n.strong,{children:"tableaux de caract\xe8res"})," du ",(0,s.jsx)(n.strong,{children:"C"}),". On ne peut pas utilise l'op\xe9rateur ",(0,s.jsx)(n.code,{children:"+"})," sur des tableaux de caract\xe8res."]}),"\n",(0,s.jsxs)(n.p,{children:["Si l'on souhaites construire une cha\xeene de caract\xe8res \xe0 partir de caract\xe8res, il faut utiliser la ",(0,s.jsx)(n.strong,{children:"m\xe9thode"})," ",(0,s.jsx)(n.code,{children:"std::string::push_back"})," qui permet d'ajouter un caract\xe8re \xe0 la fin d'une cha\xeene de caract\xe8res."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"    std::string hello;\n    helloWorld.push_back('H');\n    helloWorld.push_back('e');\n    helloWorld.push_back('l');\n    helloWorld.push_back('l');\n    helloWorld.push_back('o');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ou alors utiliser l'op\xe9rateur ",(0,s.jsx)(n.code,{children:"+"})," ou la ",(0,s.jsx)(n.strong,{children:"m\xe9thode"})," ",(0,s.jsx)(n.code,{children:"std::string::append"})," qui permet d'ajouter une cha\xeene de caract\xe8res \xe0 la fin d'une autre cha\xeene de caract\xe8res."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'    std::string helloWorld {"Hello"};\n    helloWorld.append(" World");\n    helloWorld += " !";\n'})}),"\n",(0,s.jsx)(n.h2,{id:"unsigned-int-et-stdcin",children:"Unsigned int et std::cin"}),"\n",(0,s.jsxs)(n.p,{children:["Lorsque l'on utilise ",(0,s.jsx)(n.code,{children:"std::cin"})," pour lire un nombre entier, si l'on souhaite stocker ce nombre dans un ",(0,s.jsx)(n.code,{children:"unsigned int"})," il faut faire attention \xe0 ce que l'utilisateur ne rentre pas un nombre n\xe9gatif. Car dans ce cas ",(0,s.jsx)(n.code,{children:"std::cin"})," ne va pas signaler d'erreur mais va tenter de stocker la valeur n\xe9gative dans un ",(0,s.jsx)(n.code,{children:"unsigned int"})," et va donc stocker une valeur qui n'est pas celle que l'utilisateur a rentr\xe9. Cela peut provoquer des bugs dans le programme."]}),"\n",(0,s.jsx)(n.p,{children:"Exemple:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\n\nint main() {\n    unsigned int age;\n    std::cout << "Enter your age: ";\n\n    std::cin >> age;\n    \n    if (std::cin.fail()) {\n        std::cout << "Invalid input." << std::endl;\n        return 1;\n    }\n    std::cout << "You are " << age << " years old." << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Avec des lettres il y a bien une erreur:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Enter your age: test\nInvalid input.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Avec un nombre n\xe9gatif, il n'y a pas d'erreur mais le r\xe9sultat n'est pas celui attendu:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Enter your age: -5\nYou are 4294967291 years old.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ici la valeur s'explique par le fait qu'il y a un d\xe9passement (un unsigned int ne peut pas stocker de nombre n\xe9gatif) et il y a donc une ",(0,s.jsx)(n.strong,{children:"conversion implicite"})," (cast) de ",(0,s.jsx)(n.code,{children:"-5"})," en ",(0,s.jsx)(n.code,{children:"unsigned int"})," qui donne ",(0,s.jsx)(n.code,{children:"4294967291"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Un ",(0,s.jsx)(n.code,{children:"unsigned int"})," qui est cod\xe9 sur 32 bits. Donc la valeur maximale que l'on peut stocker est ",(0,s.jsx)(n.code,{children:"2^32 - 1 = 4294967295"})," et la valeur minimale est ",(0,s.jsx)(n.code,{children:"0"}),". Donc si l'on rentre ",(0,s.jsx)(n.code,{children:"-5"}),"  on obtient ",(0,s.jsx)(n.code,{children:"2^32 - 5 = 4294967291"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Malheureusement, il n'y a pas de solution simple pour \xe9viter ce probl\xe8me. Il faut soit utiliser un ",(0,s.jsx)(n.code,{children:"int"})," temporaire pour stocker la valeur et v\xe9rifier que la valeur est positive avant de la stocker dans l'",(0,s.jsx)(n.code,{children:"unsigned int"})," mais ce n'est pas id\xe9al car on ne peut pas b\xe9n\xe9ficier des avantages de l'",(0,s.jsx)(n.code,{children:"unsigned int"})," \xe0 savoir stocker des nombres plus grands (car on passe par un ",(0,s.jsx)(n.code,{children:"int"})," temporaire qui est plus limit\xe9 pour les nombres positifs)."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut sinon lire la cha\xeene de caract\xe8re et la convertir ensuite par des fonctions (g\xe9n\xe9ralement du C) comme ",(0,s.jsx)(n.code,{children:"atoi"})," ou ",(0,s.jsx)(n.code,{children:"strtol"})," qui permettent de convertir une cha\xeene de caract\xe8re en nombre entier avec une gestion des erreurs au cas o\xf9 la cha\xeene de caract\xe8re ne repr\xe9sente pas le nombre attendu."]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>c});var s=r(67294);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);