"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[2443],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},42641:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Subjects/IMAC2027/S1/feedbacks","title":"Retours G\xe9n\xe9raux","description":"Bonnes pratiques en C++","source":"@site/content/Subjects/IMAC2027/S1/feedbacks.md","sourceDirName":"Subjects/IMAC2027/S1","slug":"/Subjects/IMAC2027/S1/feedbacks","permalink":"/Learn--cpp_programming/Subjects/IMAC2027/S1/feedbacks","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"C++","permalink":"/Learn--cpp_programming/tags/c"}],"version":"current","frontMatter":{"title":"Retours G\xe9n\xe9raux","tags":["C++"]},"sidebar":"Subjects","previous":{"title":"Project TicTacToe","permalink":"/Learn--cpp_programming/Subjects/IMAC2027/S1/Sujet"},"next":{"title":"Sujet IMAC Digger","permalink":"/Learn--cpp_programming/Subjects/IMAC2027/S2/sujet"}}');var r=s(74848),t=s(28453);const a={title:"Retours G\xe9n\xe9raux",tags:["C++"]},l=void 0,o={},d=[{value:"Bonnes pratiques en C++",id:"bonnes-pratiques-en-c",level:2},{value:"Dossier Build et Git",id:"dossier-build-et-git",level:3},{value:"Tableau statique vs dynamique",id:"tableau-statique-vs-dynamique",level:3},{value:"Namespace et header",id:"namespace-et-header",level:3},{value:"include guards",id:"include-guards",level:3},{value:"Header vide",id:"header-vide",level:3},{value:"Fonctions et headers",id:"fonctions-et-headers",level:3},{value:"Gestion des includes",id:"gestion-des-includes",level:3},{value:"inclusion relative",id:"inclusion-relative",level:3},{value:"Variables globales",id:"variables-globales",level:3},{value:"Condition bool\xe9enne",id:"condition-bool\xe9enne",level:3},{value:"Al\xe9atoire",id:"al\xe9atoire",level:3},{value:"Classe vs structure",id:"classe-vs-structure",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Tableau 1D vs 2D",id:"tableau-1d-vs-2d",level:3},{value:"Faire des fonctions",id:"faire-des-fonctions",level:2},{value:"TicTacToe",id:"tictactoe",level:2},{value:"V\xe9rification de victoire",id:"v\xe9rification-de-victoire",level:3},{value:"Choix al\xe9atoire de l&#39;IA",id:"choix-al\xe9atoire-de-lia",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"bonnes-pratiques-en-c",children:"Bonnes pratiques en C++"}),"\n",(0,r.jsx)(n.h3,{id:"dossier-build-et-git",children:"Dossier Build et Git"}),"\n",(0,r.jsxs)(n.p,{children:["Il est important de ne pas inclure le dossier ",(0,r.jsx)(n.code,{children:"build"})," dans le d\xe9p\xf4t Git. Ce dossier contient les fichiers ",(0,r.jsx)(n.strong,{children:"temporaires"})," g\xe9n\xe9r\xe9s lors de la compilation du projet (ex\xe9cutables, fichiers objets, ...).\nIls sont propres \xe0 chaque machine et ne doivent pas \xeatre versionn\xe9s car cela prend de la place inutilement sur le d\xe9p\xf4t Git."]}),"\n",(0,r.jsx)(n.p,{children:"De plus, un d\xe9veloppeur ne souhaite pas lancer un ex\xe9cutable inconnu (risque de piratage, virus, ...) et pr\xe9f\xe9rera compiler lui-m\xeame le projet."}),"\n",(0,r.jsxs)(n.p,{children:["Cela peut se faire en ajoutant le dossier ",(0,r.jsx)(n.code,{children:"build"})," dans le fichier ",(0,r.jsx)(n.code,{children:".gitignore"})," \xe0 la racine du d\xe9p\xf4t Git."]}),"\n",(0,r.jsx)(n.h3,{id:"tableau-statique-vs-dynamique",children:"Tableau statique vs dynamique"}),"\n",(0,r.jsxs)(n.p,{children:["Dans le projet TicTacToe, la grille est fixe (3x3). Cela signifie que la taille de la grille est connue \xe0 la compilation et ne change pas pendant l'ex\xe9cution du programme.\nDans ce cas, il est pr\xe9f\xe9rable d'utiliser un tableau ",(0,r.jsx)(n.strong,{children:"statique"})," (tableau de taille fixe) plut\xf4t qu'un tableau ",(0,r.jsx)(n.strong,{children:"dynamique"})," (tableau de taille variable)."]}),"\n",(0,r.jsx)(n.p,{children:"Un tableau statique est en g\xe9n\xe9ral plus performant qu'un tableau dynamique car il est allou\xe9 en une seule fois et ne n\xe9cessite pas de gestion de la m\xe9moire \xe0 l'ex\xe9cution (contrairement \xe0 un tableau dynamique qui n\xe9cessite une allocation et une lib\xe9ration de la m\xe9moire si on veut changer sa taille)."}),"\n",(0,r.jsxs)(n.p,{children:["Cependant j'ai vu certains d'entre vous utiliser les tableaux statiques du ",(0,r.jsx)(n.strong,{children:"C"})," (",(0,r.jsx)(n.code,{children:"int grille[3][3]"}),") plut\xf4t que les tableaux statiques du ",(0,r.jsx)(n.strong,{children:"C++"})," (",(0,r.jsx)(n.code,{children:"std::array"}),").\nIl est pr\xe9f\xe9rable d'utiliser ",(0,r.jsx)(n.code,{children:"std::array"})," qui est plus pratique que les tableaux statiques du C.\n",(0,r.jsx)(n.code,{children:"std::array"})," permet de conna\xeetre sa taille (avec la m\xe9thode ",(0,r.jsx)(n.code,{children:"size()"}),") et de passer des tableaux en param\xe8tre de fonction sans qu'ils se transforment en pointeurs (contrairement aux tableaux statiques du C)."]}),"\n",(0,r.jsxs)(n.p,{children:["Dans le cas o\xf9 un pointeur vers un tableau est n\xe9cessaire (comme souvent on OpenGl par exemple), il est quand m\xeame pr\xe9f\xe9rable d'utiliser un ",(0,r.jsx)(n.code,{children:"std::vector"})," ou un ",(0,r.jsx)(n.code,{children:"std::array"})," et d'utiliser la m\xe9thode ",(0,r.jsx)(n.code,{children:"data()"})," pour obtenir un pointeur vers les donn\xe9es."]}),"\n",(0,r.jsx)(n.h3,{id:"namespace-et-header",children:"Namespace et header"}),"\n",(0,r.jsxs)(n.p,{children:["\xc9vitez d'utiliser ",(0,r.jsx)(n.code,{children:"using namespace std;"})," dans les ",(0,r.jsx)(n.strong,{children:"headers"}),". Faire ",(0,r.jsx)(n.code,{children:"using namespace"})," dans un header revient \xe0 le faire dans tous les fichiers qui incluent ce header.\nC'est bien pratique pour \xe9viter les pr\xe9fixes ",(0,r.jsx)(n.code,{children:"std::"})," mais cela peut cr\xe9er des conflits de noms de variables ou de fonctions.\nIl est pr\xe9f\xe9rable de pr\xe9fixer les \xe9l\xe9ments de la STL avec ",(0,r.jsx)(n.code,{children:"std::"})," dans les headers pour \xe9viter ces conflits."]}),"\n",(0,r.jsxs)(n.p,{children:["Il est possible d'utiliser ",(0,r.jsx)(n.code,{children:"using namespace std;"})," dans les fichiers ",(0,r.jsx)(n.code,{children:".cpp"})," et dans ce cas de figure, le using namespace ne sera effectif que dans le fichier ",(0,r.jsx)(n.code,{children:".cpp"})," en question.\nEncore mieux, il est possible de faire un ",(0,r.jsx)(n.strong,{children:"using"}),' dans un "scope" plus restreint (dans une fonction par exemple) pour \xe9viter d\'importer tout le namespace std dans tout le fichier.\nIl est aussi possible de faire un ',(0,r.jsx)(n.strong,{children:"using"})," plus pr\xe9cis comme ",(0,r.jsx)(n.code,{children:"using std::string;"})," pour n'importer que les \xe9l\xe9ments de la STL qui nous int\xe9ressent et pouvoir les utiliser sans pr\xe9fixe sans pour autant importer tout le namespace."]}),"\n",(0,r.jsx)(n.h3,{id:"include-guards",children:"include guards"}),"\n",(0,r.jsxs)(n.p,{children:["Les ",(0,r.jsx)(n.strong,{children:"include guards"})," sont des directives de pr\xe9processeur qui permettent d'\xe9viter les inclusions multiples d'un m\xeame header.\nCela permet de s'assurer que le header ne sera inclus qu'une seule fois afin d'\xe9viter les probl\xe8mes de liens multiples.\nCela se fait en ",(0,r.jsx)(n.strong,{children:"C++"})," en ajoutant la directive ",(0,r.jsx)(n.code,{children:"#pragma once"})," au d\xe9but du header. (",(0,r.jsx)(n.a,{href:"/Lessons/S1/Headers#pragma-once-%C3%A9viter-les-doublons",children:"lien du cours"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"Cependant, de part l'historique de C++ et sa r\xe9trocompatibilit\xe9 avec le C, il est encore courant de voir des include guards \xe9crits de la mani\xe8re suivante :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#ifndef NOM_DU_HEADER_H\n#define NOM_DU_HEADER_H\n\n// Contenu du header\n\n#endif\n"})}),"\n",(0,r.jsxs)(n.p,{children:["En pratique (sauf dans de tr\xe8s rares cas), cela revient au m\xeame que ",(0,r.jsx)(n.code,{children:"#pragma once"})," mais est un peu plus verbeux et moins lisible. C'est pourquoi en C++ moderne, on pr\xe9f\xe8re utiliser ",(0,r.jsx)(n.code,{children:"#pragma once"}),".\nCela permet aussi de maintenir le code plus facilement, pas besoin de se soucier de trouver un nom unique pour les include guards, pas besoin de changer le nom de l'include guard si on change le nom du header, etc..."]}),"\n",(0,r.jsxs)(n.p,{children:["J'ai beaucoup vu cette forme d'include guards (avec ",(0,r.jsx)(n.code,{children:"#ifndef"}),", ",(0,r.jsx)(n.code,{children:"#define"}),", ",(0,r.jsx)(n.code,{children:"#endif"}),") dans vos headers. Pour les prochains projets, je vous conseille plut\xf4t d'utiliser ",(0,r.jsx)(n.code,{children:"#pragma once"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"header-vide",children:"Header vide"}),"\n",(0,r.jsx)(n.p,{children:"J'ai vu que certains d'entre vous ont cr\xe9\xe9 des headers vides (sans d\xe9claration de classe, fonction, variable, ...).\nCe n'est pas n\xe9cessaire, surtout si vous n'avez rien \xe0 d\xe9clarer dans le header car il s'agit d'un fichier vite qui n'apporte rien. Il n'est pas syst\xe9matique d'avoir toujours un header associ\xe9 \xe0 un fichier source."}),"\n",(0,r.jsx)(n.h3,{id:"fonctions-et-headers",children:"Fonctions et headers"}),"\n",(0,r.jsxs)(n.p,{children:["Une fonction doit \xeatre d\xe9clar\xe9e (et pas n\xe9cessairement impl\xe9ment\xe9e) avant d'\xeatre utilis\xe9e.\nCela signifie que si l'on appelle une fonction dans un fichier source, il faut que la d\xe9claration de la fonction soit pr\xe9sente avant l'appel de la fonction.\nCela peut se faire en incluant le ",(0,r.jsx)(n.strong,{children:"header"})," qui contient la d\xe9claration de la fonction ou en impl\xe9mentant la fonction avant l'appel."]}),"\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f"," Cependant il ne faut pas mettre l'impl\xe9mentation de la fonction dans le header.\nIl faut seulement mettre la d\xe9claration de la fonction dans un header et l'impl\xe9mentation dans un fichier source.\nEn effet, si on met l'impl\xe9mentation dans le header, cela signifie que le code sera copi\xe9-coll\xe9 \xe0 chaque inclusion du header.\nCela peut cr\xe9er des probl\xe8mes de liens multiples (d\xe9finition multiple de la m\xeame fonction ou variable pour l'\xe9tape de linkage) et potentiellement augmenter le temps de compilation."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["De plus, une fonction n'a besoin d'\xeatre d\xe9clar\xe9e dans un header que si elle est utilis\xe9e dans un autre fichier source.\nSi la fonction est utilis\xe9e uniquement dans le fichier source (",(0,r.jsx)(n.code,{children:".cpp"}),"), il n'est pas n\xe9cessaire de la d\xe9clarer dans le header.\nPar convention certains pr\xe9f\xe8rent tout de m\xeame d\xe9clarer toutes les fonctions dans le header pour plus de clart\xe9 mais ce n'est pas obligatoire."]}),"\n",(0,r.jsxs)(n.p,{children:["Par exemple, si on a un fichier ",(0,r.jsx)(n.code,{children:"main.cpp"})," qui contient la fonction ",(0,r.jsx)(n.code,{children:"main()"})," et une fonction ",(0,r.jsx)(n.code,{children:"hello()"})," qui est appel\xe9e dans ",(0,r.jsx)(n.code,{children:"main()"}),", il n'est pas n\xe9cessaire de d\xe9clarer ",(0,r.jsx)(n.code,{children:"hello()"})," dans un header ",(0,r.jsx)(n.code,{children:"main.hpp"})," si ",(0,r.jsx)(n.code,{children:"hello()"})," est utilis\xe9e uniquement dans ",(0,r.jsx)(n.code,{children:"main.cpp"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"gestion-des-includes",children:"Gestion des includes"}),"\n",(0,r.jsxs)(n.p,{children:["Il est important de bien g\xe9rer les inclusions dans les headers. En effet, si on inclut des headers inutilement, cela peut augmenter le temps de compilation et cr\xe9er des d\xe9pendances inutiles.\nIl est donc important d'inclure uniquement les headers n\xe9cessaires dans un header.\nExemple, si dans un header une fonction retourne un ",(0,r.jsx)(n.code,{children:"std::vector"})," il est n\xe9cessaire d'inclure le header ",(0,r.jsx)(n.code,{children:"#include <vector>"})," pour que la signature de la fonction soit valide.\nMais si l'on utilise un ",(0,r.jsx)(n.code,{children:"std::vector"})," uniquement dans la fonction, il suffit d'inclure le header ",(0,r.jsx)(n.code,{children:"#include <vector>"})," dans le fichier source (",(0,r.jsx)(n.code,{children:".cpp"}),") et non dans le header."]}),"\n",(0,r.jsx)(n.h3,{id:"inclusion-relative",children:"inclusion relative"}),"\n",(0,r.jsxs)(n.p,{children:["Il n'est pas n\xe9cessaire d'inclure les headers avec le chemin complet.\nEn effet, si les headers sont dans le m\xeame dossier que le fichier source, il suffit d'inclure le header avec le chemin relatif par rapport au fichier source.\nDans le cas de cmake, si le dossier ",(0,r.jsx)(n.code,{children:"include"})," est bien configur\xe9 (",(0,r.jsx)(n.code,{children:"include_directories()"}),"), il suffit d'inclure le header avec ",(0,r.jsx)(n.code,{children:"#include <nom_du_header.h>"})," par rapport au dossier ",(0,r.jsx)(n.code,{children:"include"})," (ce dossier include peut \xeatre le dossier ",(0,r.jsx)(n.code,{children:"src"})," lui m\xeame)."]}),"\n",(0,r.jsx)(n.h3,{id:"variables-globales",children:"Variables globales"}),"\n",(0,r.jsx)(n.p,{children:"Les variables globales sont des variables qui sont d\xe9clar\xe9es en dehors de toute fonction. Elles sont accessibles partout dans le fichier.\nCela peut \xeatre pratique pour partager des donn\xe9es entre plusieurs fonctions mais cela peut aussi rendre le code moins lisible et plus difficile \xe0 maintenir."}),"\n",(0,r.jsx)(n.p,{children:"Il est pr\xe9f\xe9rable d'\xe9viter les variables globales autant que possible.\nEn effet, les variables globales peuvent \xeatre modifi\xe9es de mani\xe8re inattendue par n'importe quelle fonction du programme.\nCela peut rendre le code difficile \xe0 comprendre et \xe0 d\xe9boguer. Il est pr\xe9f\xe9rable de passer les variables en param\xe8tre des fonctions si elles sont utilis\xe9es par plusieurs fonctions."}),"\n",(0,r.jsx)(n.p,{children:"De plus, quand elles sont utilis\xe9es dans des headers, elles sont copi\xe9es dans chaque fichier source qui inclut le header.\nCela peut cr\xe9er des probl\xe8mes de liens multiples (d\xe9finition multiple de la m\xeame variable) ou des comportements inattendus (on s'attend \xe0 ce que la variable soit partag\xe9e entre les fichiers mais en fait chaque fichier a sa propre copie de la variable)."}),"\n",(0,r.jsxs)(n.p,{children:["Il existe des mot cl\xe9s comme ",(0,r.jsx)(n.code,{children:"extern"})," (ou encore ",(0,r.jsx)(n.code,{children:"static"}),") qui permettent de d\xe9finir des variables \"globales\" partag\xe9es entre plusieurs fichiers sources.\nMais c'est g\xe9n\xe9ralement signe d'un probl\xe8me d'architecture et il est pr\xe9f\xe9rable de passer par des param\xe8tres de fonctions ou des classes pour partager des donn\xe9es entre plusieurs parties du programme.\nOu m\xeame quand c'est n\xe9cessaire un singleton (mais c'est un autre sujet)."]}),"\n",(0,r.jsx)(n.h3,{id:"condition-bool\xe9enne",children:"Condition bool\xe9enne"}),"\n",(0,r.jsxs)(n.p,{children:["J'ai souvent vu des conditions du type ",(0,r.jsx)(n.code,{children:"if (variable == true)"})," ou ",(0,r.jsx)(n.code,{children:"if (variable == false)"}),".\nCela n'est pas n\xe9cessaire car la condition est d\xe9j\xe0 un bool\xe9en. Il est donc pr\xe9f\xe9rable d'\xe9crire directement ",(0,r.jsx)(n.code,{children:"if (variable)"})," ou ",(0,r.jsx)(n.code,{children:"if (!variable)"}),". C'est \xe0 mon sens plus court et plus lisible."]}),"\n",(0,r.jsx)(n.h3,{id:"al\xe9atoire",children:"Al\xe9atoire"}),"\n",(0,r.jsx)(n.p,{children:"En informatique, on a souvent besoin de g\xe9n\xe9rer des nombres al\xe9atoires. Cela peut \xeatre utile pour simuler des comportements al\xe9atoires, pour m\xe9langer des \xe9l\xe9ments, pour g\xe9n\xe9rer des donn\xe9es de test, ..."}),"\n",(0,r.jsx)(n.p,{children:"Mais le \"vrai\" al\xe9atoire n'existe pas en informatique. En effet, les ordinateurs sont des machines d\xe9terministes, c'est-\xe0-dire qu'ils ex\xe9cutent des instructions de mani\xe8re s\xe9quentielle et pr\xe9visible. Cela signifie que si on donne les m\xeames entr\xe9es \xe0 un programme, on obtiendra toujours les m\xeames sorties (normalement \ud83d\ude43)."}),"\n",(0,r.jsxs)(n.p,{children:["On parle alors de ",(0,r.jsx)(n.strong,{children:"g\xe9n\xe9rateurs de nombres pseudo-al\xe9atoires"})," (",(0,r.jsx)(n.strong,{children:"PRNG"}),"). Ces g\xe9n\xe9rateurs produisent une s\xe9quence de nombres qui semble al\xe9atoire mais qui est en fait d\xe9terministe. Cela signifie que si on donne la m\xeame graine (seed) \xe0 un g\xe9n\xe9rateur de nombres pseudo-al\xe9atoires, on obtiendra la m\xeame s\xe9quence de nombres."]}),"\n",(0,r.jsxs)(n.p,{children:["Pour g\xe9n\xe9rer des nombres al\xe9atoires on peut utiliser les fonctions ",(0,r.jsx)(n.code,{children:"rand()"})," et ",(0,r.jsx)(n.code,{children:"srand()"})," de la biblioth\xe8que standard.\n",(0,r.jsx)(n.code,{children:"srand()"})," permet de d\xe9finir la graine du g\xe9n\xe9rateur de nombres pseudo-al\xe9atoires et ",(0,r.jsx)(n.code,{children:"rand()"})," permet de g\xe9n\xe9rer un nombre al\xe9atoire."]}),"\n",(0,r.jsxs)(n.p,{children:["Pour initialiser le g\xe9n\xe9rateur de nombres pseudo-al\xe9atoires avec une graine al\xe9atoire, on peut utiliser la fonction ",(0,r.jsx)(n.code,{children:"time()"})," de la biblioth\xe8que standard. Cette fonction renvoie le nombre de secondes \xe9coul\xe9es depuis le 1er janvier 1970. Cela permet d'initialiser le g\xe9n\xe9rateur avec une valeur qui change \xe0 chaque ex\xe9cution du programme."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <cstdlib>\n#include <ctime>\n\nint main() {\n    srand(time(nullptr)); // Initialisation du g\xe9n\xe9rateur de nombres pseudo-al\xe9atoires avec une graine al\xe9atoire\n    int random_number { rand() }; // G\xe9n\xe9ration d'un nombre al\xe9atoire\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"rand()"})," nous donne un nombre al\xe9atoire entre 0 et ",(0,r.jsx)(n.code,{children:"RAND_MAX"})," (une constante d\xe9finie dans la biblioth\xe8que standard).\nPour obtenir un nombre al\xe9atoire dans un intervalle donn\xe9, on peut utiliser une formule du type ",(0,r.jsx)(n.code,{children:"rand() % (max - min + 1) + min"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Cependant, il faut faire attention \xe0 ne pas appeler ",(0,r.jsx)(n.code,{children:"srand(time(nullptr))"})," \xe0 chaque fois qu'on a besoin d'un nombre al\xe9atoire.\nSi on appelle ",(0,r.jsx)(n.code,{children:"srand(time(nullptr))"})," plusieurs fois dans la m\xeame seconde, on obtiendra la m\xeame graine et donc la m\xeame s\xe9quence de nombres al\xe9atoires pour chaque appel \xe0 ",(0,r.jsx)(n.code,{children:"rand()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Il est donc pr\xe9f\xe9rable d'appeler ",(0,r.jsx)(n.code,{children:"srand(time(nullptr))"})," par exemple au ",(0,r.jsx)(n.strong,{children:"d\xe9but du programme"})," pour initialiser le g\xe9n\xe9rateur de nombres pseudo-al\xe9atoires avec une graine al\xe9atoire."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["En C++ moderne, on utilise plut\xf4t la biblioth\xe8que ",(0,r.jsx)(n.code,{children:"<random>"})," qui fournit des g\xe9n\xe9rateurs de nombres pseudo-al\xe9atoires plus puissants et plus flexibles que ",(0,r.jsx)(n.code,{children:"rand()"})," et ",(0,r.jsx)(n.code,{children:"srand()"}),".\nCette biblioth\xe8que fournit des classes qui permettent de g\xe9n\xe9rer des nombres al\xe9atoires selon diff\xe9rentes distributions (uniforme, normale, ...)."]}),"\n",(0,r.jsxs)(n.p,{children:["Voici un exemple d'utilisation pour g\xe9n\xe9rer un nombre al\xe9atoire entre ",(0,r.jsx)(n.strong,{children:"0"})," et ",(0,r.jsx)(n.strong,{children:"100"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <random>\n\nint main() {\n    std::random_device rd {}; // Objet permettant de g\xe9n\xe9rer une graine al\xe9atoire (similaire \xe0 srand(time(nullptr)))\n    std::mt19937 gen(rd()); // G\xe9n\xe9rateur de nombres pseudo-al\xe9atoires Mersenne Twister (un des g\xe9n\xe9rateurs les plus performants)\n    std::uniform_int_distribution<> dis(0, 100); // Distribution uniforme entre 0 et 100\n\n    int random_number { dis(gen) }; // G\xe9n\xe9ration d'un nombre al\xe9atoire\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"C'est cette m\xe9thode que nous utiliserons principalement au second semestre."}),"\n",(0,r.jsx)(n.h3,{id:"classe-vs-structure",children:"Classe vs structure"}),"\n",(0,r.jsxs)(n.p,{children:["Jusqu'\xe0 pr\xe9sent, nous avons utilis\xe9 uniquement des ",(0,r.jsx)(n.strong,{children:"structures"})," pour repr\xe9senter les donn\xe9es. Une structure est simplement un regroupement de donn\xe9es (membres) qui peuvent \xeatre de diff\xe9rents types.\nMais quand on parle de programmation orient\xe9e objet, on parle souvent de ",(0,r.jsx)(n.strong,{children:"classe"}),". Mais alors quelle est la diff\xe9rence entre une ",(0,r.jsx)(n.strong,{children:"classe"})," et une ",(0,r.jsx)(n.strong,{children:"structure"})," ?\nNous n'avons pas encore vu la notion de ",(0,r.jsx)(n.strong,{children:"visibilit\xe9"})," des membres mais il est possible de d\xe9clarer des membres ",(0,r.jsx)(n.strong,{children:"priv\xe9s"})," et ",(0,r.jsx)(n.strong,{children:"publics"}),".\nLes membres priv\xe9s sont accessibles uniquement \xe0 l'int\xe9rieur de la classe, alors que les membres publics sont accessibles de l'ext\xe9rieur de la classe (avec la syntaxe ",(0,r.jsx)(n.code,{children:"objet.membre"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["En C++, la seule diff\xe9rence entre une ",(0,r.jsx)(n.strong,{children:"classe"})," et une ",(0,r.jsx)(n.strong,{children:"structure"})," est la ",(0,r.jsx)(n.strong,{children:"visibilit\xe9 par d\xe9faut des membres"}),".\nDans une ",(0,r.jsx)(n.strong,{children:"classe"}),", les membres sont ",(0,r.jsx)(n.strong,{children:"priv\xe9s"})," par d\xe9faut, alors que dans une ",(0,r.jsx)(n.strong,{children:"structure"}),", ils sont ",(0,r.jsx)(n.strong,{children:"publics"})," par d\xe9faut.\nMais il est tout \xe0 fait possible de d\xe9clarer une classe avec des membres publics et une struct avec des membres priv\xe9s.\nCela n'a pas d'impact sur la performance du programme, c'est juste une question de style et de convention.\nEn g\xe9n\xe9ral, on utilise une ",(0,r.jsx)(n.strong,{children:"classe"})," pour repr\xe9senter un objet avec des m\xe9thodes et des membres priv\xe9s (qui permettent d'encapsuler les donn\xe9es et masquer le comportement interne de l'objet) et une ",(0,r.jsx)(n.strong,{children:"structure"})," pour repr\xe9senter un simple regroupement de donn\xe9es (ou la majorit\xe9 des membres et m\xe9thodes est publique).\nVous d\xe9couvrirez le reste de la programmation orient\xe9e objet (h\xe9ritage, polymorphisme, ... ) l'ann\xe9e prochaine."]}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"tableau-1d-vs-2d",children:"Tableau 1D vs 2D"}),"\n",(0,r.jsx)(n.p,{children:"Dans le projet TicTacToe, la grille \xe9tait repr\xe9sent\xe9e par un tableau 1D.\nCela permet de simplifier l'acc\xe8s aux \xe9l\xe9ments de la grille (gr\xe2ce \xe0 une seule dimension) et de r\xe9duire la complexit\xe9 de l'algorithme."}),"\n",(0,r.jsx)(n.p,{children:"J'ai vu que certains d'entre vous ont utilis\xe9 un tableau 2D pour repr\xe9senter la grille.\nCela fonctionne aussi mais il faut travailler avec des coordonn\xe9es (ligne, colonne) pour acc\xe9der aux \xe9l\xe9ments de la grille (cela peut \xeatre un avantage ou un inconv\xe9nient selon le contexte)."}),"\n",(0,r.jsx)(n.p,{children:"Cela va avoir un impact si vous utilisez un tableau dynamique (std::vector) pour repr\xe9senter la grille.\nUn tableau 2D est en fait un tableau de tableaux (un tableau de pointeurs vers des tableaux).\nCela peut \xeatre moins performant qu'un tableau 1D car les \xe9l\xe9ments de la grille ne sont pas contigus en m\xe9moire (contrairement \xe0 un tableau 1D)."}),"\n",(0,r.jsx)(n.p,{children:"Il est donc pr\xe9f\xe9rable d'utiliser un tableau 1D pour repr\xe9senter la grille si vous voulez optimiser la performance de votre programme."}),"\n",(0,r.jsxs)(n.p,{children:["Dans notre cas c'est n\xe9gligeable car la grille est petite, mais c'est une bonne habitude \xe0 prendre (",(0,r.jsx)(n.strong,{children:"c'est pour cela que je vous l'avais demand\xe9"}),")."]}),"\n",(0,r.jsx)(n.h2,{id:"faire-des-fonctions",children:"Faire des fonctions"}),"\n",(0,r.jsxs)(n.p,{children:["J'ai vu sur certains projets des fonctions (",(0,r.jsx)(n.strong,{children:"main"}),") tr\xe8s longues (+ de 150 lignes). Cela rend le code ",(0,r.jsx)(n.strong,{children:"difficile"})," \xe0 lire et \xe0 maintenir.\nIl est pr\xe9f\xe9rable de d\xe9couper le code en ",(0,r.jsx)(n.strong,{children:"fonctions"})," plus petites et plus sp\xe9cialis\xe9es.\nCela permet de mieux organiser le code, de le rendre plus lisible et de faciliter la r\xe9utilisation des fonctions."]}),"\n",(0,r.jsxs)(n.p,{children:["Par exemple toute la boucle qui demande un coup au joueur et v\xe9rifie si le coup est valide pourrait \xeatre mise dans une fonction ",(0,r.jsx)(n.code,{children:"ask_valid_position_from_user()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Si il y a une initialisation plus complexe \xe0 faire, cela pourrait \xeatre mis dans une fonction ",(0,r.jsx)(n.code,{children:"initialize_game()"})," (pour choisir le premier joueur al\xe9atoirement par exemple, etc)."]}),"\n",(0,r.jsx)(n.h2,{id:"tictactoe",children:"TicTacToe"}),"\n",(0,r.jsx)(n.h3,{id:"v\xe9rification-de-victoire",children:"V\xe9rification de victoire"}),"\n",(0,r.jsx)(n.p,{children:"J'ai vu beaucoup d'impl\xe9mentations de la v\xe9rification de victoire qui consiste \xe0 v\xe9rifier toutes les lignes, colonnes et diagonales pour voir si un joueur a gagn\xe9. C'est une solution qui fonctionne mais qui est un peu \"r\xe9p\xe9titive\" et qui peut \xeatre am\xe9lior\xe9e."}),"\n",(0,r.jsx)(n.p,{children:"Une version plus \xe9l\xe9gante consiste \xe0 v\xe9rifier uniquement la ligne, la colonne et la diagonale o\xf9 le dernier coup a \xe9t\xe9 jou\xe9. Cela permet de r\xe9duire le nombre de v\xe9rifications \xe0 faire. En effet, si un joueur a gagn\xe9, c'est forc\xe9ment sur la ligne, la colonne ou la diagonale o\xf9 le dernier coup a \xe9t\xe9 jou\xe9."}),"\n",(0,r.jsx)(n.p,{children:"Cela r\xe9duit le nombre de v\xe9rifications \xe0 faire \xe0 3 ou 4 (ligne, colonne, 1 ou 2 diagonales) au lieu de 8 (3 lignes, 3 colonnes, 2 diagonales), c'est donc plus performant et plus simple \xe0 impl\xe9menter (C'est d'autant plus vrai si la grille est plus grande comme pour un puissance 4)."}),"\n",(0,r.jsx)(n.h3,{id:"choix-al\xe9atoire-de-lia",children:"Choix al\xe9atoire de l'IA"}),"\n",(0,r.jsx)(n.p,{children:"J'ai vu pas mal d'impl\xe9mentations de l'IA qui consistent \xe0 choisir une position al\xe9atoire et recommencer si la position est d\xe9j\xe0 occup\xe9e. C'est une solution qui fonctionne mais qui n'est pas tr\xe8s \xe9l\xe9gante. Si la grille est presque pleine, il y a de fortes chances que l'IA doive recommencer plusieurs fois (et possiblement tr\xe8s longtemps) avant de trouver une position libre. Il y a plusieurs fa\xe7ons d'\xe9viter cela."}),"\n",(0,r.jsx)(n.p,{children:"On peut lister toutes les positions libres puis choisir parmi ces positions. Cela permet de garantir que l'IA choisira une position libre \xe0 chaque coup."}),"\n",(0,r.jsxs)(n.p,{children:["Sinon il est possible de choisir une position al\xe9atoire puis, si la position est d\xe9j\xe0 occup\xe9e, aller sur la position suivante (et ainsi de suite jusqu'\xe0 trouver une position libre). Cela permet de garantir que l'IA choisira une position libre en un nombre fini de coups. ","\u26a0\ufe0f"," Cette m\xe9thode est biais\xe9 car la probabilit\xe9 de choisir une position libre (parmi les restantes) n'est pas uniforme."]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);