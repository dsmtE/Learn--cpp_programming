"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[96],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>N});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(t),c=a,N=d["".concat(p,".").concat(c)]||d[c]||m[c]||i;return t?r.createElement(N,o(o({ref:n},s),{},{components:t})):r.createElement(N,o({ref:n},s))}));function N(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4182:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={title:"TD6 - Arbres binaires"},o="Arbres binaires de recherche",l={unversionedId:"TDs/S2/binaryTree",id:"TDs/S2/binaryTree",title:"TD6 - Arbres binaires",description:"Dans ce TD, nous allons voir comment impl\xe9menter un arbre binaire de recherche.",source:"@site/content/TDs/S2/06_binaryTree.md",sourceDirName:"TDs/S2",slug:"/TDs/S2/binaryTree",permalink:"/Learn--cpp_programming/TDs/S2/binaryTree",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"TD6 - Arbres binaires"},sidebar:"TDs",previous:{title:"TD5 - Hachage et tableaux associatifs",permalink:"/Learn--cpp_programming/TDs/S2/hashAndAssociativeTables"}},p={},u=[{value:"Impl\xe9mentation",id:"impl\xe9mentation",level:2},{value:"Pointeurs intelligents",id:"pointeurs-intelligents",level:2},{value:"Utilisation",id:"utilisation",level:2},{value:"Aller plus loin: Encapsulation",id:"aller-plus-loin-encapsulation",level:2}],s={toc:u},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"arbres-binaires-de-recherche"},"Arbres binaires de recherche"),(0,a.kt)("p",null,"Dans ce TD, nous allons voir comment impl\xe9menter un arbre binaire de recherche."),(0,a.kt)("h2",{id:"impl\xe9mentation"},"Impl\xe9mentation"),(0,a.kt)("p",null,"Donnons nous pour commencer la structure suivante pour repr\xe9senter un noeud d'un arbre binaire."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Node {\n    int value;\n    Node* left = nullptr;\n    Node* right = nullptr;\n};\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Je vous conseil de cr\xe9er un fichier ",(0,a.kt)("inlineCode",{parentName:"p"},"node.hpp")," et d'y mettre la structure ",(0,a.kt)("inlineCode",{parentName:"p"},"Node")," ainsi que le prototype des fonctions et m\xe9thodes que vous allez \xe9crire."),(0,a.kt)("p",{parentName:"admonition"},"Avec une organisation de fichier comme celle-ci:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"src/\n    L main.cpp\n    L node.hpp\n    L node.cpp\nCmakeLists.txt\n"))),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\xc9crire une ",(0,a.kt)("strong",{parentName:"li"},"fonction")," ",(0,a.kt)("inlineCode",{parentName:"li"},"createNode")," qui prend en param\xe8tre une valeur et permet de cr\xe9er (sur la heap avec ",(0,a.kt)("strong",{parentName:"li"},"new"),") un noeud contenant cette valeur et dont les fils sont pointeur nuls.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* createNode(int value);\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"\xc9crire une ",(0,a.kt)("strong",{parentName:"li"},"m\xe9thode")," ",(0,a.kt)("inlineCode",{parentName:"li"},"isLeaf")," sur la structure ",(0,a.kt)("inlineCode",{parentName:"li"},"Node")," qui retourne vrai si le noeud est une feuille (c'est \xe0 dire si ses deux fils sont nuls).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool isLeaf() const;\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"\xc9crire une ",(0,a.kt)("strong",{parentName:"li"},"m\xe9thode")," ",(0,a.kt)("inlineCode",{parentName:"li"},"insert")," \xe0 la structure ",(0,a.kt)("inlineCode",{parentName:"li"},"BinaryTree")," qui prend en param\xe8tre une valeur et qui ins\xe8re un nouveau noeud contenant cette valeur dans l'arbre binaire. On ins\xe9rera le noeud \xe0 gauche si la valeur est inf\xe9rieure \xe0 la valeur du noeud courant et \xe0 droite sinon.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void Node::insert(int value);\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"On utilisera la fonction ",(0,a.kt)("inlineCode",{parentName:"p"},"createNode")," pour cr\xe9er le nouveau noeud.")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\xc9crire une ",(0,a.kt)("strong",{parentName:"li"},"m\xe9thode")," ",(0,a.kt)("inlineCode",{parentName:"li"},"infixe")," qui retourne un vecteur contenant les pointeurs vers les noeuds de l'arbre binaire parcourus en ",(0,a.kt)("strong",{parentName:"li"},"infixe"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<Node const*> Node::infixe() const;\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Pour le faire par ",(0,a.kt)("strong",{parentName:"p"},"r\xe9cursivit\xe9")," on pourra utiliser la m\xe9thode ",(0,a.kt)("inlineCode",{parentName:"p"},"insert")," du ",(0,a.kt)("inlineCode",{parentName:"p"},"std::vector")," qui permet d\u2019ins\xe9rer plusieurs \xe9l\xe9ments \xe0 l'aide d\u2019it\xe9rateurs."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"auto left_nodes {left->infixe()};\nnodes.insert(nodes.end(), left_nodes.begin(), left_nodes.end());\n")),(0,a.kt)("ol",{parentName:"admonition",start:5},(0,a.kt)("li",{parentName:"ol"},"De m\xeame, \xe9crire deux autres m\xe9thodes ",(0,a.kt)("inlineCode",{parentName:"li"},"prefixe")," et ",(0,a.kt)("inlineCode",{parentName:"li"},"postfixe")," qui retournent les noeuds parcourus dans l'ordre ",(0,a.kt)("strong",{parentName:"li"},"pr\xe9fixe")," et ",(0,a.kt)("strong",{parentName:"li"},"postfixe")," respectivement.")),(0,a.kt)("ol",{parentName:"admonition",start:6},(0,a.kt)("li",{parentName:"ol"},"\xc9crire une ",(0,a.kt)("strong",{parentName:"li"},"m\xe9thode")," ",(0,a.kt)("inlineCode",{parentName:"li"},"mostLeft")," qui retourne un pointeur vers le noeud le plus \xe0 gauche de l'arbre binaire dont ce noeud est la racine.")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"    Node* Node::mostLeft();\n")),(0,a.kt)("ol",{parentName:"admonition",start:7},(0,a.kt)("li",{parentName:"ol"},"\xc9crire une ",(0,a.kt)("strong",{parentName:"li"},"m\xe9thode")," ",(0,a.kt)("inlineCode",{parentName:"li"},"find")," qui prend en param\xe8tre une valeur et qui retourne un pointeur vers le noeud contenant cette valeur dans l'arbre binaire. Si la valeur n'est pas pr\xe9sente dans l'arbre, on retourne un pointeur nul.")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* Node::find(int value);\n")),(0,a.kt)("ol",{parentName:"admonition",start:7},(0,a.kt)("li",{parentName:"ol"},"(",(0,a.kt)("strong",{parentName:"li"},"BONUS"),") \xc9crire la m\xeame ",(0,a.kt)("strong",{parentName:"li"},"m\xe9thode")," ",(0,a.kt)("inlineCode",{parentName:"li"},"find")," mais qui retourne un pointeur constant vers le noeud. On ne pourra donc pas modifier la valeur du noeud retourn\xe9. L'avanatage de cette m\xe9thode est qu'on pourra l'utiliser sur un ",(0,a.kt)("inlineCode",{parentName:"li"},"Node")," constant.")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Node const* Node::find(int value) const;\n")),(0,a.kt)("ol",{parentName:"admonition",start:8},(0,a.kt)("li",{parentName:"ol"},"\xc9crire une ",(0,a.kt)("strong",{parentName:"li"},"fonction")," ",(0,a.kt)("inlineCode",{parentName:"li"},"removeNode")," qui permet de supprimer une valeur de l'arbre binaire dont le noeud pass\xe9 en param\xe8tre est la racine. La fonction retourne un pointeur vers le nouveau noeud racine de l'arbre binaire.")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* removeNode(Node* node, int value);\n")),(0,a.kt)("p",{parentName:"admonition"},"Retourner un pointeur vers le nouveau noeud racine permet de r\xe9assigner le pointeur du node parent si le noeud est supprim\xe9. C'est important dans le cas par exemple o\xf9 l'on supprime une feuille de l'arbre il faut pouvoir r\xe9assigner le pointeur du noeud parent vers un pointeur nul pour \xe9viter d'avoir un pointeur qui pointe vers un noeud supprim\xe9."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"if (value == node->value && node->isLeaf()) {\n        // On supprime le noeud courant\n        delete node;\n        // on retourne nullptr pour mettre \xe0 jour le pointeur du parent vers le noeud courant\n        return nullptr;\n    }\n")),(0,a.kt)("p",{parentName:"admonition"},"le parent doit alors appeler par r\xe9cursivit\xe9 la fonction ",(0,a.kt)("inlineCode",{parentName:"p"},"removeNode")," pour mettre \xe0 jour son pointeur vers le noeud fils correspondant."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"if (value < node->value) {\n    node->left = removeNode(node->left, value);\n}\n"))),(0,a.kt)("p",null,"Il existe trois cas de figure lorsqu'on supprime un noeud d'un arbre binaire:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Le noeud n'a pas de fils: on peut le supprimer directement."),(0,a.kt)("li",{parentName:"ul"},"Le noeud a un seul fils: on peut le supprimer et le remplacer par son fils."),(0,a.kt)("li",{parentName:"ul"},"Le noeud a deux fils:\nIl faut remplacer la valeur du noeud \xe0 supprimer par une valeur pr\xe9server l'ordre de l'arbre. Pour cela, on utilisera la fonction ",(0,a.kt)("inlineCode",{parentName:"li"},"mostLeft")," qui permettent de trouver le noeud le plus \xe0 gauche d'un arbre binaire (autrement dit, le noeud de valeur minimale).\nIl faut ensuite remplacer la valeur du noeud \xe0 supprimer par la valeur du noeud trouv\xe9 pr\xe9c\xe9demment et supprimer ce dit noeud pour ne pas avoir de doublon. (cela revient \xe0 intervertir les deux noeuds sans avoir \xe0 modifier les pointeurs puis \xe0 supprimer le noeud dont la valeur a \xe9t\xe9 copi\xe9e).\n:::")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Il faut faire attention \xe0 bien lib\xe9rer la m\xe9moire des noeuds supprim\xe9s.")),(0,a.kt)("ol",{start:9},(0,a.kt)("li",{parentName:"ol"},"\xc9crire une fonction ",(0,a.kt)("inlineCode",{parentName:"li"},"deleteChilds")," sur la structure ",(0,a.kt)("inlineCode",{parentName:"li"},"Node")," qui permet de supprimer les fils d'un noeud (et de lib\xe9rer la m\xe9moire).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void Node::deleteChilds();\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"On peut utiliser de la r\xe9cursivit\xe9 pour supprimer les noeuds de l'arbre.")),(0,a.kt)("ol",{start:10},(0,a.kt)("li",{parentName:"ol"},"\xc9crire une m\xe9thode ",(0,a.kt)("inlineCode",{parentName:"li"},"height")," qui retourne la hauteur de l'arbre binaire (c'est \xe0 dire la longueur du plus long chemin entre la racine et une feuille).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int Node::height() const;\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"On peut utiliser de la r\xe9cursivit\xe9 pour calculer la hauteur de l'arbre.")),(0,a.kt)("ol",{start:11},(0,a.kt)("li",{parentName:"ol"},"\xc9crire une ",(0,a.kt)("strong",{parentName:"li"},"fonction")," ",(0,a.kt)("inlineCode",{parentName:"li"},"deleteTree")," qui permet de supprimer un arbre binaire (et de lib\xe9rer la m\xe9moire).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void deleteTree(Node* node);\n")),(0,a.kt)("ol",{start:12},(0,a.kt)("li",{parentName:"ol"},"(",(0,a.kt)("strong",{parentName:"li"},"BONUS"),") \xc9crire des m\xe9thodes ",(0,a.kt)("inlineCode",{parentName:"li"},"min")," et ",(0,a.kt)("inlineCode",{parentName:"li"},"max")," qui retournent respectivement les valeurs minimales et maximales de l'arbre binaire.")),(0,a.kt)("h2",{id:"pointeurs-intelligents"},"Pointeurs intelligents"),(0,a.kt)("p",null,"Nous allons maintenant am\xe9liorer et simplifier notre code en utilisant des pointeurs intelligents. En effet la partie la plus compliqu\xe9e de notre code est la gestion de la m\xe9moire et des pointeurs. Les pointeurs intelligents vont nous permettre de nous d\xe9barrasser de cette gestion et de nous passer de la fonction ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteTree")," par exemple."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Copier coller votre fichier pour garder une version de votre code pr\xe9c\xe9dent et cr\xe9er un nouveau fichier ",(0,a.kt)("inlineCode",{parentName:"p"},"smartNode.hpp")," dans lequel vous allez r\xe9\xe9crire votre code en utilisant des ",(0,a.kt)("strong",{parentName:"p"},"pointeurs intelligents"),".\nRenommer la structure ",(0,a.kt)("inlineCode",{parentName:"p"},"Node")," en ",(0,a.kt)("inlineCode",{parentName:"p"},"SmartNode")," pour pouvoir faire la diff\xe9rence entre les deux versions.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},'Remplacer les pointeurs "bruts" par des pointeurs intelligents ',(0,a.kt)("inlineCode",{parentName:"p"},"std::unique_ptr")," dans la structure ",(0,a.kt)("inlineCode",{parentName:"p"},"SmartNode"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Modifier la fonction ",(0,a.kt)("inlineCode",{parentName:"p"},"isLeaf")," pour utiliser le fait qu'un pointeur intelligent peut \xeatre converti implicitement en ",(0,a.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/memory/unique_ptr/operator_bool"},"bool\xe9en")," (il vaut ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," si le pointeur est nul et ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," sinon). ")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Renommer et modifier la fonction ",(0,a.kt)("inlineCode",{parentName:"p"},"createNode")," (en ",(0,a.kt)("inlineCode",{parentName:"p"},"createSmartNode"),") pour qu'elle retourne un pointeur intelligent ",(0,a.kt)("inlineCode",{parentName:"p"},"std::unique_ptr")," au lieu d'un pointeur brut (on utilisera la fonction ",(0,a.kt)("inlineCode",{parentName:"p"},"std::make_unique")," pour cr\xe9er le pointeur).")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Modifier la m\xe9thode ",(0,a.kt)("inlineCode",{parentName:"p"},"mostLeft")," pour qu'elle retourne une r\xe9f\xe9rence vers la structure ",(0,a.kt)("inlineCode",{parentName:"p"},"SmartNode")," au lieu d'un pointeur brut (une r\xe9f\xe9rence car cet \xe9l\xe9ment est toujours pr\xe9sent dans l'arbre).")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Modifier les m\xe9thodes ",(0,a.kt)("inlineCode",{parentName:"p"},"insert"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"find")," pour qu'elles fonctionnent avec des pointeurs intelligents.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"(",(0,a.kt)("strong",{parentName:"p"},"BONUS"),") Renommer et modifier la m\xe9thode ",(0,a.kt)("inlineCode",{parentName:"p"},"removeNode")," (en ",(0,a.kt)("inlineCode",{parentName:"p"},"removeSmartNode"),") \xe9galement."))),(0,a.kt)("h2",{id:"utilisation"},"Utilisation"),(0,a.kt)("p",null,"Testons maintenant notre impl\xe9mentation en cr\xe9ant un programme qui permet de cr\xe9er un arbre binaire et d'effectuer diff\xe9rentes op\xe9rations dessus."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Cr\xe9er un arbre binaire et ins\xe9rer les valeurs suivantes: 5, 3, 7, 2, 4, 6, 8, 1, 9, 0.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Afficher les valeurs des noeuds de l'arbre binaire dans l'ordre ",(0,a.kt)("strong",{parentName:"p"},"infixe"),", ",(0,a.kt)("strong",{parentName:"p"},"pr\xe9fixe")," et ",(0,a.kt)("strong",{parentName:"p"},"postfixe"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Afficher la hauteur de l'arbre binaire."))),(0,a.kt)("h2",{id:"aller-plus-loin-encapsulation"},"Aller plus loin: Encapsulation"),(0,a.kt)("p",null,"Le but est de cr\xe9er une structure ",(0,a.kt)("inlineCode",{parentName:"p"},"BinaryTree")," qui encapsule la structure ",(0,a.kt)("inlineCode",{parentName:"p"},"Node")," ou ",(0,a.kt)("inlineCode",{parentName:"p"},"SmartNode")," et qui permet d'utiliser les m\xeame m\xe9thodes sans conna\xeetre la structure interne de l'arbre binaire. Cela permet aussi de g\xe9rer le cas o\xf9 l'arbre binaire est vide (c'est \xe0 dire que la racine est un pointeur nul)."),(0,a.kt)("p",null,"C'est moins pertinent dans notre cas pour ce TDs mais lorsque vous d\xe9couvrirez la notion de ",(0,a.kt)("strong",{parentName:"p"},"visibilit\xe9")," vous comprendrez l'int\xe9r\xeat de cette encapsulation."),(0,a.kt)("p",null,"Voil\xe0 le contenu du fichier ",(0,a.kt)("inlineCode",{parentName:"p"},"binaryTree.hpp"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n\n#include <vector>\n\n#include "smartNode.hpp"\n\nstruct BinaryTree {\n    std::unique_ptr<SmartNode>{} root = std::unique_ptr<SmartNode>{};\n\n    void insert(int value);\n    void remove(int value);\n    void clear();\n    SmartNode* find(int value);\n    SmartNode const* find(int value) const;\n    int height() const;\n    std::vector<Node const*> infixe() const;\n    std::vector<Node const*> postfixe() const;\n    std::vector<Node const*> prefixe() const;\n};\n')))}m.isMDXComponent=!0}}]);