"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[2288],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9759:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={title:"TD4 - D\xe9duction de type et biblioth\xe8que standard"},o=void 0,l={unversionedId:"TDs/S2/AutoAndAlgorithm",id:"TDs/S2/AutoAndAlgorithm",title:"TD4 - D\xe9duction de type et biblioth\xe8que standard",description:"Exercice 1 (Vector and Algorithm)",source:"@site/content/TDs/S2/04_AutoAndAlgorithm.md",sourceDirName:"TDs/S2",slug:"/TDs/S2/AutoAndAlgorithm",permalink:"/Learn--cpp_programming/TDs/S2/AutoAndAlgorithm",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"TD4 - D\xe9duction de type et biblioth\xe8que standard"},sidebar:"TDs",previous:{title:"TD3 - Structures de donn\xe9es",permalink:"/Learn--cpp_programming/TDs/S2/dataStructures"},next:{title:"TD5 - Hachage et tableaux associatifs",permalink:"/Learn--cpp_programming/TDs/S2/hashAndAssociativeTables"}},s={},p=[{value:"Exercice 1 (Vector and Algorithm)",id:"exercice-1-vector-and-algorithm",level:2},{value:"Exercice 2 (String)",id:"exercice-2-string",level:2},{value:"Exemple 3 (Palindrome)",id:"exemple-3-palindrome",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"exercice-1-vector-and-algorithm"},"Exercice 1 (Vector and Algorithm)"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Remplir un ",(0,i.kt)("inlineCode",{parentName:"li"},"std::vector")," avec des nombres entiers al\xe9atoires compris entre 0 et 100."),(0,i.kt)("li",{parentName:"ol"},"Utiliser les it\xe9rateurs et les m\xe9thodes ",(0,i.kt)("inlineCode",{parentName:"li"},"begin")," et ",(0,i.kt)("inlineCode",{parentName:"li"},"end")," pour afficher les valeurs du vecteur \xe0 l'aide d'une boucle ",(0,i.kt)("inlineCode",{parentName:"li"},"for"),"."),(0,i.kt)("li",{parentName:"ol"},"Demander \xe0 l'utilisateur de saisir un nombre entier ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," compris entre 0 et 100."),(0,i.kt)("li",{parentName:"ol"},"Chercher si ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," est pr\xe9sent dans le vecteur \xe0 l'aide de la fonction ",(0,i.kt)("inlineCode",{parentName:"li"},"std::find"),"."),(0,i.kt)("li",{parentName:"ol"},"Afficher le r\xe9sultat de la recherche \xe0 l'aide d'un message adapt\xe9."),(0,i.kt)("li",{parentName:"ol"},"Utiliser la fonction ",(0,i.kt)("inlineCode",{parentName:"li"},"std::count")," pour compter le nombre d'occurrences d'un autre nombre entier le vecteur.\nVous pouvez trouver la documentation de la fonction ",(0,i.kt)("inlineCode",{parentName:"li"},"std::count")," ",(0,i.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/cpp/algorithm/count"},"ici"),"."),(0,i.kt)("li",{parentName:"ol"},"Utiliser la fonction ",(0,i.kt)("inlineCode",{parentName:"li"},"std::sort")," pour trier le vecteur."),(0,i.kt)("li",{parentName:"ol"},"Utiliser la fonction ",(0,i.kt)("inlineCode",{parentName:"li"},"std::accumulate")," pour calculer la somme des \xe9l\xe9ments du vecteur.")),(0,i.kt)("h2",{id:"exercice-2-string"},"Exercice 2 (String)"),(0,i.kt)("p",null,"\xc9tant donn\xe9e une phrase compos\xe9e de mots s\xe9par\xe9s par des espaces."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\xc9crire une fonction ( \xe0 l'aide des fonctions ",(0,i.kt)("inlineCode",{parentName:"p"},"std::find")," et ",(0,i.kt)("inlineCode",{parentName:"p"},"std::count")," ) qui prendre en param\xe8tre une r\xe9f\xe9rence constante sur une ",(0,i.kt)("inlineCode",{parentName:"p"},"std::string")," et qui retourne le nombre de lettres du premier mot de la phrase.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\xc9crire une fonction qui permet de d\xe9couper la phrase en mots et de les stocker dans un ",(0,i.kt)("inlineCode",{parentName:"p"},"std::vector")," de ",(0,i.kt)("inlineCode",{parentName:"p"},"std::string"),".\nVoil\xe0 le prototype de la fonction :"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'std::vector<std::string> split(std::string const& str, std::string const& delimiter = " ");\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Vous allez avoir besoin de la fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"std::distance"),", qui retourne la distance entre deux it\xe9rateurs, sous forme d\u2019un nombre entier.")),(0,i.kt)("h2",{id:"exemple-3-palindrome"},"Exemple 3 (Palindrome)"),(0,i.kt)("p",null,"\xc9crire une fonction qui prend en param\xe8tre une r\xe9f\xe9rence constante sur une ",(0,i.kt)("inlineCode",{parentName:"p"},"std::string")," et qui retourne ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," si la cha\xeene de caract\xe8res est un palindrome, ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," sinon."),(0,i.kt)("p",null,"Utiliser la fonctions ",(0,i.kt)("inlineCode",{parentName:"p"},"std::equal")," pour comparer les valeurs de deux it\xe9rateurs.\nUtiliser les fonctions ",(0,i.kt)("inlineCode",{parentName:"p"},"std::begin"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"std::end"),"  et ",(0,i.kt)("inlineCode",{parentName:"p"},"std::rbegin"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"std::rend")," pour obtenir les it\xe9rateurs de d\xe9but et de fin d'une cha\xeene de caract\xe8res et de sa version invers\xe9e."))}u.isMDXComponent=!0}}]);