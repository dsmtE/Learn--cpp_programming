"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[942],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>k});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=i,k=c["".concat(u,".").concat(d)]||c[d]||m[d]||a;return r?n.createElement(k,o(o({ref:t},s),{},{components:r})):n.createElement(k,o({ref:t},s))}));function k(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3942:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const a={title:"TD7 - Structures",sidebar_position:7},o=void 0,l={unversionedId:"TDs/Struct",id:"TDs/Struct",title:"TD7 - Structures",description:"Exercice 1",source:"@site/content/TDs/07_Struct.md",sourceDirName:"TDs",slug:"/TDs/Struct",permalink:"/Learn--cpp_programming/TDs/Struct",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"TD7 - Structures",sidebar_position:7},sidebar:"TDs",previous:{title:"TD6 - Fonctions",permalink:"/Learn--cpp_programming/TDs/Functions"}},u={},p=[{value:"Exercice 1",id:"exercice-1",level:2}],s={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"exercice-1"},"Exercice 1"),(0,i.kt)("p",null,"Vous \xeates le pilote d'un sous-marin, vous avez re\xe7u des ordres de mouvements sous la forme d'une instruction et d'une distance \xe0 parcourir. Vous devez \xe9crire un programme qui permet de calculer la position du sous-marin apr\xe8s avoir effectu\xe9 les mouvements re\xe7us."),(0,i.kt)("p",null,"Votre position initiale est (0, 0) et vous pouvez vous d\xe9placer dans les directions suivantes: Haut, Bas, Avant, Arri\xe8re."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\xc9crire une ",(0,i.kt)("strong",{parentName:"p"},"structure")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Position")," qui permet de stocker les coordonn\xe9es du sous-marin.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\xc9crire un ",(0,i.kt)("strong",{parentName:"p"},"enum")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Direction")," qui permet de stocker les directions possibles.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\xc9crire une structure ",(0,i.kt)("inlineCode",{parentName:"p"},"Move")," qui repr\xe9sente un mouvement sous la forme d'une direction et d'une distance \xe0 parcourir.")),(0,i.kt)("li",{parentName:"ul"}),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\xc9crire une fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"moveSubmarine")," qui permet de d\xe9placer le sous-marin en fonction d'un mouvement. La fonction ne doit rien retourner et doit modifier la position du sous-marin pass\xe9e en param\xe8tre.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\xc9crire une fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"display")," qui permet d'afficher la position du sous-marin pass\xe9e en param\xe8tre."))),(0,i.kt)("p",null,"Le but est d'indiquer la position du sous-marin apr\xe8s avoir effectu\xe9 les mouvements suivants:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Avant 10")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Bas 5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Arri\xe8re 3")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Haut 2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Avant 5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Bas 1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Arri\xe8re 2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Avant 3")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Bas 1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Haut 3")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Avant 1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Bas 5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Arri\xe8re 2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Avant 6"))),(0,i.kt)("p",null,"Vous pouvez repr\xe9senter les mouvements sous la forme d'un vecteur de ",(0,i.kt)("inlineCode",{parentName:"p"},"Move"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<Move> moves = {\n    {Direction::Forward, 10},\n    {Direction::Down, 5},\n    {Direction::Backward, 3},\n    {Direction::Up, 2},\n    {Direction::Forward, 5},\n    {Direction::Down, 1},\n    {Direction::Backward, 2},\n    {Direction::Forward, 3},\n    {Direction::Down, 1},\n    {Direction::Up, 3},\n    {Direction::Forward, 1},\n    {Direction::Down, 5},\n    {Direction::Backward, 2},\n    {Direction::Forward, 6}\n};\n")))}m.isMDXComponent=!0}}]);