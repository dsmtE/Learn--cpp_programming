"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[5109],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),c=i,f=d["".concat(p,".").concat(c)]||d[c]||m[c]||a;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={title:"TD8 - Headers",sidebar_position:8},o=void 0,l={unversionedId:"TDs/headers",id:"TDs/headers",title:"TD8 - Headers",description:"Exercice 1 (Fraction)",source:"@site/content/TDs/08_headers.md",sourceDirName:"TDs",slug:"/TDs/headers",permalink:"/Learn--cpp_programming/TDs/headers",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"TD8 - Headers",sidebar_position:8},sidebar:"TDs",previous:{title:"TD7 - Structures",permalink:"/Learn--cpp_programming/TDs/Struct"}},p={},u=[{value:"Exercice 1 (Fraction)",id:"exercice-1-fraction",level:2},{value:"Exercice 2",id:"exercice-2",level:2}],s={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"exercice-1-fraction"},"Exercice 1 (Fraction)"),(0,i.kt)("p",null,"Le but de cet exercice est de cr\xe9er une structure permettant de repr\xe9senter une fraction. Cette structure devra contenir deux entiers positifs, un pour le num\xe9rateur et un pour le d\xe9nominateur."),(0,i.kt)("p",null,"On va utiliser un fichier d'en-t\xeate pour d\xe9finir la structure et les fonctions qui vont permettre de manipuler les fractions."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"fraction.hpp")," qui contiendra la d\xe9finition de la structure et les prototypes des fonctions.\nLa structure devra s'appeler ",(0,i.kt)("inlineCode",{parentName:"p"},"Fraction")," et contenir deux entiers positifs nomm\xe9s ",(0,i.kt)("inlineCode",{parentName:"p"},"numerator")," et ",(0,i.kt)("inlineCode",{parentName:"p"},"denominator")," de type unsigned int avec comme valeur par d\xe9faut ",(0,i.kt)("inlineCode",{parentName:"p"},"0/1"),".\nLa structure devra contenir les fonctions suivantes :"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"- add : prend deux fractions en param\xe8tre et retourne la somme des deux fractions.\n- sub : prend deux fractions en param\xe8tre et retourne la diff\xe9rence des deux fractions.\n- mul : prend deux fractions en param\xe8tre et retourne le produit des deux fractions.\n- div : prend deux fractions en param\xe8tre et retourne le quotient des deux fractions.\n- display : prend une fraction en param\xe8tre et affiche la fraction sous la forme `numerator/denominator`.\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"fraction.cpp")," qui contiendra les d\xe9finitions des fonctions.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Impl\xe9menter les fonctions dans le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"fraction.cpp"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"utils.hpp")," qui contiendra les fonctions utilitaires suivantes :"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gcd")," : prend deux entiers positifs en param\xe8tre et retourne le plus grand diviseur commun."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"simplify")," : prend une fraction en param\xe8tre et retourne la fraction simplifi\xe9e."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"utils.cpp")," et impl\xe9menter les fonctions."))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Pour simplifier une fraction, il faut diviser le num\xe9rateur et le d\xe9nominateur par le plus grand diviseur commun.\nOn va donc utiliser la fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"gcd")," pour calculer le plus grand diviseur commun et ensuite diviser le ",(0,i.kt)("strong",{parentName:"p"},"num\xe9rateur")," et le ",(0,i.kt)("strong",{parentName:"p"},"d\xe9nominateur")," par ce nombre."),(0,i.kt)("p",{parentName:"admonition"},"la fraction ",(0,i.kt)("inlineCode",{parentName:"p"},"4/6")," devient ",(0,i.kt)("inlineCode",{parentName:"p"},"2/3")," car ",(0,i.kt)("inlineCode",{parentName:"p"},"gcd(4, 6) = 2")," et ",(0,i.kt)("inlineCode",{parentName:"p"},"4/2 = 2")," et ",(0,i.kt)("inlineCode",{parentName:"p"},"6/2 = 3"),"."),(0,i.kt)("p",{parentName:"admonition"},"Il faut importer le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"fraction.hpp")," dans le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"utils.hpp")," pour pouvoir utiliser la structure ",(0,i.kt)("inlineCode",{parentName:"p"},"Fraction")," dans la fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"simplify"),".")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Pour trouver le plus grand diviseur commun, on peut utiliser l'algorithme d'Euclide qui consiste \xe0 diviser le plus grand nombre par le plus petit et \xe0 r\xe9p\xe9ter l'op\xe9ration avec le reste de la division jusqu'\xe0 obtenir un reste nul. Dans ce cas, le plus petit nombre non nul est le plus grand diviseur commun."),(0,i.kt)("p",{parentName:"admonition"},"exemple avec 22 et 8:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"22 % 8 = 6 (reste de la division de 22 par 8) 6 est diff\xe9rent de 0 donc on continue"),(0,i.kt)("li",{parentName:"ul"},"8 % 6 = 2 (reste de la division de 8 par 6) 2 est diff\xe9rent de 0 donc on continue"),(0,i.kt)("li",{parentName:"ul"},"6 % 2 = 0 (reste de la division de 6 par 2) 0 est \xe9gal \xe0 0 donc on s'arr\xeate et le plus grand diviseur commun est 2."))),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"li"},"main.cpp")," qui contiendra le programme principal. Ce programme devra :",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cr\xe9er deux fractions ",(0,i.kt)("inlineCode",{parentName:"li"},"f1")," et ",(0,i.kt)("inlineCode",{parentName:"li"},"f2")," avec les valeurs de votre choix.(id\xe9alement avec des valeurs al\xe9atoires ou saisies par l'utilisateur)"),(0,i.kt)("li",{parentName:"ul"},"Afficher les deux fractions."),(0,i.kt)("li",{parentName:"ul"},"Afficher la somme des deux fractions."),(0,i.kt)("li",{parentName:"ul"},"Afficher la diff\xe9rence des deux fractions."),(0,i.kt)("li",{parentName:"ul"},"Afficher le produit des deux fractions."),(0,i.kt)("li",{parentName:"ul"},"Afficher le quotient des deux fractions."),(0,i.kt)("li",{parentName:"ul"},"Afficher les r\xe9sultats pr\xe9c\xe9dents sous forme de fraction simplifi\xe9e.")))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Vous d\xe9couvrirez au prochain semestre comment am\xe9liorer ce programme en utilisant la surcharge d'op\xe9rateurs \ud83d\udee0\ufe0f.")),(0,i.kt)("h2",{id:"exercice-2"},"Exercice 2"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"direction.hpp")," qui contiendra l'enum ",(0,i.kt)("inlineCode",{parentName:"p"},"Direction")," avec les valeurs suivantes :"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"north")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"south")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"east")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"west"))),(0,i.kt)("p",{parentName:"li"},"Cr\xe9er le prototype d'une fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"to_string")," qui retourne la direction sous forme de cha\xeene de caract\xe8res (std::string).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"direction.cpp")," qui contiendra la d\xe9finition de la fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"to_string"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"point.hpp")," qui contiendra une structure ",(0,i.kt)("inlineCode",{parentName:"p"},"Point")," contenant les attributs suivants :"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x")," : position en x"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"y")," : position en y")),(0,i.kt)("p",{parentName:"li"},"La structure devra contenir les fonctions suivantes :"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void display(Point const& p)")," : affiche les coordonn\xe9es du point sous la forme ",(0,i.kt)("inlineCode",{parentName:"li"},"(x, y)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void move(Point &p, Direction d, unsigned int n)")," : d\xe9place le point de ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," cases dans la direction ",(0,i.kt)("inlineCode",{parentName:"li"},"d"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"point.cpp")," qui contiendra les d\xe9finitions des fonctions.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er dans un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"robot.hpp")," qui contiendra une structure ",(0,i.kt)("inlineCode",{parentName:"p"},"Robot")," contenant les attributs suivants :"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," : nom du robot (std::string)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"position")," : position du robot (utiliser la structure ",(0,i.kt)("inlineCode",{parentName:"li"},"Point"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"direction")," : direction du robot (utiliser l'enum ",(0,i.kt)("inlineCode",{parentName:"li"},"Direction"),")")),(0,i.kt)("p",{parentName:"li"},"La structure devra contenir les fonctions suivantes :"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void display(Robot const& r)")," : affiche les informations du robot sous la forme ",(0,i.kt)("inlineCode",{parentName:"li"},"name((x, y), direction)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void turn_left(Robot &r)")," : tourne le robot de 90\xb0 vers la gauche."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void turn_right(Robot &r)")," : tourne le robot de 90\xb0 vers la droite."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void move(Robot &r, unsigned int n)")," : d\xe9place le robot de ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," cases dans la direction du robot."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Robot create_robot(Point const& position, Direction direction)")," : cr\xe9e un robot avec les param\xe8tres pass\xe9s en argument et le retourne. Le nom du robot sera g\xe9n\xe9r\xe9 al\xe9atoirement avec un format contenant 2 lettres majuscules suivies de 3 chiffres al\xe9atoires. (ex: ",(0,i.kt)("inlineCode",{parentName:"li"},"AB123"),")"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"robot.cpp")," qui contiendra les d\xe9finitions des fonctions."))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Pour g\xe9n\xe9rer un nombre al\xe9atoire, on peut utiliser la fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," comme vu dans le TD05."),(0,i.kt)("p",{parentName:"admonition"},"Pour g\xe9n\xe9rer une lettre al\xe9atoire, on peut utiliser la fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," et l'op\xe9rateur ",(0,i.kt)("inlineCode",{parentName:"p"},"%")," pour g\xe9n\xe9rer un nombre al\xe9atoire entre 0 et 25 et ajouter 65 (\xe9quivalent au caract\xe8re ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),") pour obtenir le code ",(0,i.kt)("strong",{parentName:"p"},"ASCII")," d'une lettre majuscule."),(0,i.kt)("p",{parentName:"admonition"},"exemple:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"char letter { rand() % 26 + `A` };\n")),(0,i.kt)("p",{parentName:"admonition"},"Vous pouvez \xe9galement utiliser la biblioth\xe8que ",(0,i.kt)("inlineCode",{parentName:"p"},"random")," qui permet de g\xe9n\xe9rer des nombres al\xe9atoires de mani\xe8re plus moderne et plus simple."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Exemple"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <random>\n\nstd::random_device rd;\n// Initialisation du g\xe9n\xe9rateur al\xe9atoire en utilisant un seed al\xe9atoire fournie par random_device (pour avoir des r\xe9sultats diff\xe9rents \xe0 chaque ex\xe9cution)\nstd::mt19937 gen(rd());\n\nstd::uniform_int_distribution<> rand_ascii('A', 'Z');\nstd::uniform_int_distribution<> rand_digits(0, 9);\n")))),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},"Cr\xe9er un fichier ",(0,i.kt)("inlineCode",{parentName:"li"},"main.cpp")," qui contiendra le programme principal. Ce programme devra :",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cr\xe9er un robot avec la fonction ",(0,i.kt)("inlineCode",{parentName:"li"},"create_robot")," et l'afficher."),(0,i.kt)("li",{parentName:"ul"},"Tourner le robot \xe0 gauche et l'afficher."),(0,i.kt)("li",{parentName:"ul"},"D\xe9placer le robot de 3 cases et l'afficher."),(0,i.kt)("li",{parentName:"ul"},"Tourner le robot \xe0 droite et l'afficher."),(0,i.kt)("li",{parentName:"ul"},"D\xe9placer le robot de 5 cases et l'afficher."),(0,i.kt)("li",{parentName:"ul"},"D\xe9placer le robot de 2 cases et l'afficher."),(0,i.kt)("li",{parentName:"ul"},"Tourner deux fois le robot \xe0 gauche et l'afficher."),(0,i.kt)("li",{parentName:"ul"},"D\xe9placer le robot de 1 case et l'afficher.")))))}m.isMDXComponent=!0}}]);