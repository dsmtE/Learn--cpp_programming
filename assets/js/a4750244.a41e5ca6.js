"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[317],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(t),c=r,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return t?a.createElement(k,l(l({ref:n},u),{},{components:t})):a.createElement(k,l({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7689:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={title:"Un peu de logique avec les conditions",tags:["C++"],sidebar_position:3},l="Introduction",o={unversionedId:"Lessons/Conditions",id:"Lessons/Conditions",title:"Un peu de logique avec les conditions",description:"Le C++ va nous permettre d'exprimer des conditions sur les valeurs de nos variables afin d'ex\xe9cuter des instructions diff\xe9rentes en fonction du r\xe9sultat des conditions.",source:"@site/content/Lessons/Conditions.md",sourceDirName:"Lessons",slug:"/Lessons/Conditions",permalink:"/Learn--cpp_programming/Lessons/Conditions",draft:!1,tags:[{label:"C++",permalink:"/Learn--cpp_programming/tags/c"}],version:"current",sidebarPosition:3,frontMatter:{title:"Un peu de logique avec les conditions",tags:["C++"],sidebar_position:3},sidebar:"Lessons",previous:{title:"Un monde de variables",permalink:"/Learn--cpp_programming/Lessons/Variables"},next:{title:"Des boucles pour gagner du temps",permalink:"/Learn--cpp_programming/Lessons/Loops"}},s={},p=[{value:"Les valeurs bool\xe9ennes",id:"les-valeurs-bool\xe9ennes",level:2},{value:"La logique bool\xe9enne",id:"la-logique-bool\xe9enne",level:2},{value:"NOT: La n\xe9gation",id:"not-la-n\xe9gation",level:3},{value:"AND",id:"and",level:3},{value:"OR",id:"or",level:2},{value:"Des structures de contr\xf4le",id:"des-structures-de-contr\xf4le",level:2},{value:"Si",id:"si",level:3},{value:"Sinon",id:"sinon",level:3},{value:"Sinon si",id:"sinon-si",level:3},{value:"Combinaison d&#39;expressions",id:"combinaison-dexpressions",level:2},{value:"Pour aller plus loin",id:"pour-aller-plus-loin",level:3},{value:"En r\xe9sum\xe9",id:"en-r\xe9sum\xe9",level:2}],u={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Le C++ va nous permettre d'exprimer des ",(0,r.kt)("strong",{parentName:"p"},"conditions")," sur les valeurs de nos variables afin d'ex\xe9cuter des instructions diff\xe9rentes en fonction du r\xe9sultat des conditions."),(0,r.kt)("h2",{id:"les-valeurs-bool\xe9ennes"},"Les valeurs bool\xe9ennes"),(0,r.kt)("p",null,"J'ai omis un type lors du pr\xe9c\xe9dent chapitre, il s'agit du ",(0,r.kt)("strong",{parentName:"p"},"type bool\xe9en"),", il s'utilise avec le mot cl\xe9 ",(0,r.kt)("strong",{parentName:"p"},"bool"),"."),(0,r.kt)("p",null,"Ce type peut prendre deux valeurs: soit ",(0,r.kt)("strong",{parentName:"p"},"true"),", signifiant vrai, soit ",(0,r.kt)("strong",{parentName:"p"},"false")," qui veut dire faux. C'est donc id\xe9al pour stocker le r\xe9sultat d'une condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Voici un petit exemple"',title:'"Voici',un:!0,petit:!0,'exemple"':!0},"int main()\n{\n    bool const condition { true };\n    return 0;\n}\n")),(0,r.kt)("p",null,"Cela va devenir int\xe9ressant gr\xe2ce \xe0 ce que l'on appelle les ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs de comparaison"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Op\xe9rateur"),(0,r.kt)("th",{parentName:"tr",align:null},"Signification"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"=="),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"\xc9galit\xe9"),", compare si deux variables sont ",(0,r.kt)("strong",{parentName:"td"},"\xe9gales"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"!="),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"In\xe9galit\xe9"),", compare si deux variables sont ",(0,r.kt)("strong",{parentName:"td"},"diff\xe9rentes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Strictement inf\xe9rieur"),", compare si la variable de gauche est ",(0,r.kt)("strong",{parentName:"td"},"strictement inf\xe9rieure")," \xe0 celle de droite")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<="),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Inf\xe9rieur ou \xe9gal"),", compare si la variable de gauche est ",(0,r.kt)("strong",{parentName:"td"},"inf\xe9rieure ou \xe9gale")," \xe0 celle de droite")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},">"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Strictement sup\xe9rieur"),", compare si la variable de gauche est ",(0,r.kt)("strong",{parentName:"td"},"strictement sup\xe9rieure")," \xe0 celle de droite")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},">="),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Sup\xe9rieur ou \xe9gal"),", compare si la variable de gauche est ",(0,r.kt)("strong",{parentName:"td"},"sup\xe9rieure ou \xe9gale")," \xe0 celle de droite")))),(0,r.kt)("p",null,"Ces op\xe9rateurs vont nous permettre de cr\xe9er des conditions (des valeurs bool\xe9ennes) \xe0 partir de nos autres variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\nint main()\n{\n    float const a { 10.0f };\n    float const b { 20.0f };\n\n    std::cout << a << " == " << b << " donne " << (a == b) << std::endl;\n    std::cout << a << " != " << b << " donne " << (a != b) << std::endl;\n    std::cout << a << " < " << b << " donne " << (a < b) << std::endl;\n    std::cout << a << " <= " << b << " donne " << (a <= b) << std::endl;\n\n    // On peut aussi stocker le r\xe9sultat de la condition dans une variable bool\xe9enne\n    float const price { 24.5f }\n    bool const is_too_expensive { price >= 100.f };\n\n    return 0;\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Par d\xe9faut, ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cout")," affiche 1 pour une condition vraie (true) et 0 pour une condition fausse (false)."),(0,r.kt)("p",{parentName:"admonition"},'Il est possible de changer ce comportement en ajoutant un "modificateur" sur le stream ',(0,r.kt)("inlineCode",{parentName:"p"},"std::cout"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\nint main()\n{\n    float const a { 10.0f };\n    float const b { 20.0f };\n\n    std::cout << std::boolalpha;\n    std::cout << a << " == " << b << " donne " << (a == b) << std::endl;\n\n    return 0;\n}\n'))),(0,r.kt)("h2",{id:"la-logique-bool\xe9enne"},"La logique bool\xe9enne"),(0,r.kt)("p",null,"Maintenant que nous disposons d'un moyen d'obtenir une valeur bool\xe9enne (via les op\xe9rateurs de comparaison) nous allons pouvoir manipuler ces valeurs avec ce que l'on nomme des ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs logiques"),"."),(0,r.kt)("p",null,"Ces op\xe9rateurs vont permettre de combiner et modifier des valeurs bool\xe9ennes afin d'en obtenir d'autres et faire ce que l'on appelle plus g\xe9n\xe9ralement de l\u2019",(0,r.kt)("strong",{parentName:"p"},"alg\xe8bre bool\xe9enne"),".\nMais ne vous inqui\xe9tez pas, derri\xe8re ce nom tr\xe8s math\xe9matique se cache des choses tr\xe8s simples."),(0,r.kt)("h3",{id:"not-la-n\xe9gation"},"NOT: La n\xe9gation"),(0,r.kt)("p",null,"L'op\xe9rateur ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," (plac\xe9 devant une valeur bool\xe9enne) permet d'exprimer la n\xe9gation d'une condition."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"C'est ici un op\xe9rateur dit ",(0,r.kt)("strong",{parentName:"p"},"unaire")," (qui s'applique sur une seule valeur) et donne en retour la condition inverse.")),(0,r.kt)("p",null,"Voici ce qu\u2019on appelle la ",(0,r.kt)("strong",{parentName:"p"},"table de v\xe9rit\xe9")," de l\u2019op\xe9rateur ",(0,r.kt)("strong",{parentName:"p"},"NOT"),", qui formalise les entr\xe9es et les sorties de cet op\xe9rateur."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"A"),(0,r.kt)("th",{parentName:"tr",align:null},"R\xe9sultat"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"float price { 114.2f };\nbool isExpensive { price >= 100.f };\n\nbool isCheap { !isExpensive };\n")),(0,r.kt)("h3",{id:"and"},"AND"),(0,r.kt)("p",null,"L'op\xe9rateur ",(0,r.kt)("inlineCode",{parentName:"p"},"&&")," (plac\xe9 entre deux valeurs bool\xe9ennes) permet d'exprimer la validit\xe9 de deux conditions ",(0,r.kt)("strong",{parentName:"p"},"en m\xeame temps"),".\nOn peut l'interpr\xe9ter en fran\xe7ais par : \"ma condition1 est vraie ",(0,r.kt)("strong",{parentName:"p"},"ET"),' ma condition2 est aussi vraie".'),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"A"),(0,r.kt)("th",{parentName:"tr",align:null},"B"),(0,r.kt)("th",{parentName:"tr",align:null},"R\xe9sultat"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"false")))),(0,r.kt)("h2",{id:"or"},"OR"),(0,r.kt)("p",null,"L'op\xe9rateur ",(0,r.kt)("inlineCode",{parentName:"p"},"||")," (plac\xe9 entre deux valeurs bool\xe9ennes) permet d'exprimer si ",(0,r.kt)("strong",{parentName:"p"},"au moins une des deux")," conditions est ",(0,r.kt)("strong",{parentName:"p"},"vraie"),".\nOn peut l'interpr\xe9ter en fran\xe7ais par : \"ma condition1 est vraie ",(0,r.kt)("strong",{parentName:"p"},"OU"),' ma condition2 est vraie".'),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"A"),(0,r.kt)("th",{parentName:"tr",align:null},"B"),(0,r.kt)("th",{parentName:"tr",align:null},"R\xe9sultat"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"false")))),(0,r.kt)("hr",null),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Il est \xe9galement possible d'utiliser les mots-cl\xe9s ",(0,r.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"or")," et ",(0,r.kt)("inlineCode",{parentName:"p"},"not")," pour remplacer respectivement les op\xe9rateurs ",(0,r.kt)("inlineCode",{parentName:"p"},"&&"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"||")," et ",(0,r.kt)("inlineCode",{parentName:"p"},"!"),"."),(0,r.kt)("p",{parentName:"admonition"},"C'est possible mais tr\xe8s peu r\xe9pandu en C++ c'est pourquoi je ne l'utiliserai pas personnellement mais sachez que \xe7a existe \xe9galement."),(0,r.kt)("p",{parentName:"admonition"},"Avec de vielles versions de Visual Studio il est possible que cette syntaxe ne fonctionne pas et dans ce cas il faut inclure le fichier ",(0,r.kt)("inlineCode",{parentName:"p"},"<ciso646>"),".")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Pour l'op\xe9rateur ",(0,r.kt)("strong",{parentName:"p"},"AND")," (",(0,r.kt)("inlineCode",{parentName:"p"},"&&"),") on note qu'il y a bien deux fois le symbole ",(0,r.kt)("kbd",null,"&"),". C'est tr\xe8s important car il existe un autre op\xe9rateur (avec un seul ",(0,r.kt)("strong",{parentName:"p"},"&"),") qui fait tout autre chose.\nJe ne d\xe9taillerai pas dans ce chapitre son utilit\xe9 mais il est important de le souligner car c'est une erreur qui arrive fr\xe9quemment."),(0,r.kt)("p",{parentName:"admonition"},"De m\xeame pour l'op\xe9rateur ",(0,r.kt)("strong",{parentName:"p"},"OR")," (",(0,r.kt)("inlineCode",{parentName:"p"},"||"),") diff\xe9rent de ",(0,r.kt)("kbd",null,"|"),".")),(0,r.kt)("h2",{id:"des-structures-de-contr\xf4le"},"Des structures de contr\xf4le"),(0,r.kt)("p",null,"C'est bien beau toutes ces valeurs bool\xe9ennes mais comment on peut s'en servir pour ex\xe9cuter une partie d'un code ou un autre en fonction d'une condition ?"),(0,r.kt)("h3",{id:"si"},"Si"),(0,r.kt)("p",null,"Notre premi\xe8re structure de contr\xf4le va s'utiliser avec le mot cl\xe9 ",(0,r.kt)("strong",{parentName:"p"},"if"),".\nDe l'anglais, ce mot cl\xe9 signifiant ",(0,r.kt)("strong",{parentName:"p"},'"si"'),", ex\xe9cute des instructions si et seulement si la condition donn\xe9e est vraie."),(0,r.kt)("p",null,"Un petit sch\xe9ma d'explications:"),(0,r.kt)("mermaid",{value:"flowchart\n\nA( ) --\x3e B{Condition}\nB --\x3e|false| D( )\nB --\x3e|true| C[bloc d'instructions]\n\nC --\x3e D\nD --\x3e|suite du programme| F( )"}),(0,r.kt)("p",null,"Voil\xe0 comment l'utiliser. Toutes les instructions entre accolades seront ex\xe9cut\xe9es si la condition est vraie."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"if( /* condtion */ )\n{\n    // ...\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Un petit exemple"',title:'"Un',petit:!0,'exemple"':!0},'#include <iostream>\nint main()\n{\n    float price { 114.2f };\n\n    if ( price >= 100.f )\n    {\n        // appliquer une r\xe9duction si l\'on d\xe9passe un certain prix\n        price *= 0.9f;\n    }\n\n    std::cout << "Le prix final est de " << price << "\u20ac" << std::endl;\n\n    return 0;\n}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Il est possible de cr\xe9er des variables \xe0 l'int\xe9rieur m\xeame des accolades de la structure de contr\xf4le mais celles-ci sont restreintes \xe0 cette ",(0,r.kt)("strong",{parentName:"p"},"port\xe9e"),".\nC'est ce qu'on appelle la port\xe9e des variables (",(0,r.kt)("strong",{parentName:"p"},"scope")," en anglais)."),(0,r.kt)("p",{parentName:"admonition"},"Plus g\xe9n\xe9ralement, cette r\xe8gle du C++ s'applique \xe0 n'importe quel bloc entre accolades.\n",(0,r.kt)("strong",{parentName:"p"},"Une variable n\u2019est utilisable que dans la port\xe9e, ou le bloc d\u2019accolades o\xf9 elle a \xe9t\xe9 d\xe9clar\xe9e.")),(0,r.kt)("p",{parentName:"admonition"},"Nous en reparlerons plus en d\xe9tail dans d'autres chapitres.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Il n'est pas tr\xe8s utile de tester par une \xe9galit\xe9 le r\xe9sultat d'une condition :"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"float const price { 114.2f };\nbool const isExpensive { price >= 100.f };\n\nif ( isExpensive == true )\n{\n    // ...\n}\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"isExpensive")," ici \xe9tant d\xe9j\xe0 une valeur bool\xe9enne ajouter une \xe9galit\xe9 suppl\xe9mentaire avec la valeur ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," ne va rien faire d'autre que de cr\xe9er une nouvelle valeur bool\xe9enne qui a la m\xeame valeur."),(0,r.kt)("p",{parentName:"admonition"},"Il est donc plus clair et concis d'\xe9crire directement:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool const isExpensive { price >= 100.f };\n\nif ( isExpensive )\n{\n    // ...\n}\n"))),(0,r.kt)("h3",{id:"sinon"},"Sinon"),(0,r.kt)("p",null,"C'est tr\xe8s bien de pouvoir effectuer quelque chose si une condition est v\xe9rif\xe9e mais comment faire si l'on veut effectuer une action A si la condition est v\xe9rif\xe9e et une autre action B si ce n'est pas le cas ?"),(0,r.kt)("p",null,"On pourrait tr\xe8s bien encha\xeener deux ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," avec la condition oppos\xe9e:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\nint main()\n{\n    float temperature { 24.0f };\n\n    if ( temperature >= 35.f )\n    {\n        std::cout << "il fait chaud" << std::endl;\n    }\n\n    if ( temperature < 35.f )\n    {\n        std::cout << "il fait froid" << std::endl;\n    }\n\n    return 0;\n}\n')),(0,r.kt)("p",null,"Mais c'est l\xe0 que le mot-cl\xe9 ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," (de l'anglais \"sinon\") nous permet d'ex\xe9cuter des instructions si la condition du ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," est fausse de mani\xe8re plus compr\xe9hensible:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\nint main()\n{\n    float temperature { 24.0f };\n\n    if ( temperature >= 35.f )\n    {\n        std::cout << "il fait chaud" << std::endl;\n    }\n    else\n    {\n        std::cout << "il fait froid" << std::endl;\n    }\n\n    return 0;\n}\n')),(0,r.kt)("p",null,"Ici le ",(0,r.kt)("strong",{parentName:"p"},"else"),' n\'a pas de parenth\xe8se et indique donc "tout le reste" (ce qui ne v\xe9rifie pas la condition).'),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"L'op\xe9rateur logique de n\xe9gation ",(0,r.kt)("kbd",null,"!")," est parfois tr\xe8s utile dans le cas o\xf9 l'on avait stock\xe9 une valeur mais l'on souhaite faire une suite d'instructions uniquement dans le bloc ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," du ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),"."),(0,r.kt)("p",{parentName:"admonition"},"Au lieu de faire :"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nint main()\n{\n    bool condition { false };\n\n    if ( condition )\n    {\n        // ... ne rien faire\n    }\n    else\n    {\n        // effectuer nos instructions\n    }\n\n    return 0;\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Il est pr\xe9f\xe9rable de faire:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nint main()\n{\n    bool condition { false };\n\n    if ( !condition )\n    {\n        // effectuer nos instructions\n    }\n\n    return 0;\n}\n"))),(0,r.kt)("p",null,'Mais comment tester une succession de conditions diff\xe9rentes avant de faire "tout le reste"\u202f?'),(0,r.kt)("h3",{id:"sinon-si"},"Sinon si"),(0,r.kt)("p",null,"On pourrait tr\xe8s bien cha\xeener plusieurs ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," et ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," imbriqu\xe9s de cette mani\xe8re:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nint main()\n{\n    float temperature { 24.0f };\n\n    if ( /* condition1 */ )\n    {\n        // ...\n    }\n    else\n    {\n        if ( /* condition2 */ )\n        {\n            // ...\n        }\n        else\n        {\n            if ( /* condition3 */ )\n            {\n                //...\n            }\n            else \n            {\n               //...  \n            }\n        }\n    }\n    return 0;\n}\n")),(0,r.kt)("p",null,"Mais vous \xeates s\xfbrement d'accord pour dire que \xe7a commence \xe0 \xeatre difficile \xe0 suivre et \xe9crire \xe0 cause des imbrications.\nLe C++ est bien fait et nous permet de d'utiliser la combinaison ",(0,r.kt)("inlineCode",{parentName:"p"},"else if")," pour ce cas de figure."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"else if")," s\u2019utilise entre un ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," et un ",(0,r.kt)("inlineCode",{parentName:"p"},"else"),' et signifie "ou alors si cette condition est vraie".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nint main()\n{\n    if ( /* condition1 */ )\n    {\n        // ...\n    }\n    else if ( /* condition2 */ )\n    {\n        // ...\n    }\n    else  if ( /* condition3 */ )\n    {\n        //...\n    }\n    else\n    {\n        //...  \n    }\n\n    return 0;\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Enfin, il existe une derni\xe8re syntaxe (le ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," pour les curieux) qui permet de faire quelque chose de similaire au ",(0,r.kt)("inlineCode",{parentName:"p"},"else if")," mais il nous manque quelques notions et je vous le pr\xe9senterai donc au chapitre suivant sur les boucles.")),(0,r.kt)("h2",{id:"combinaison-dexpressions"},"Combinaison d'expressions"),(0,r.kt)("p",null,"Avec tous les op\xe9rateurs logiques vu pr\xe9c\xe9demment il est m\xeame possible de tester plusieurs conditions dans un m\xeame ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nint main()\n{\n\n    float temperature { 24.0f };\n    bool const isRaining { false };\n    bool const wantToGoOut { true };\n    bool const ownsAnUmbrella { false };\n\n    if ( wantToGoOut && (!isRaining || (isRaining && ownsAnUmbrella) ) )\n    {\n        // ...\n    }\n    else\n    {\n        //...  \n    }\n\n    return 0;\n}\n")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Les op\xe9rateurs logiques sont comme les op\xe9rateurs math\xe9matiques que nous avons vus dans les chapitres pr\xe9c\xe9dents: ils ont une priorit\xe9."),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Le plus prioritaire est la n\xe9gation ",(0,r.kt)("kbd",null,"!")),(0,r.kt)("li",{parentName:"ol"},"Ensuite c'est le ",(0,r.kt)("strong",{parentName:"li"},"ET")," ",(0,r.kt)("kbd",null,"&&")),(0,r.kt)("li",{parentName:"ol"},"Enfin, le ",(0,r.kt)("strong",{parentName:"li"},"OU")," ",(0,r.kt)("kbd",null,"||")," est le moins prioritaire")),(0,r.kt)("p",{parentName:"admonition"},"Par exemple avec le code ",(0,r.kt)("inlineCode",{parentName:"p"},"a && b || c && d"),", dans l\u2019ordre, on \xe9value ",(0,r.kt)("inlineCode",{parentName:"p"},"a && b"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"c && d")," et enfin ",(0,r.kt)("inlineCode",{parentName:"p"},"(a && b) || (c && d)"),"."),(0,r.kt)("p",{parentName:"admonition"},'Pour des raisons de lisibilit\xe9 je vous recommande tr\xe8s fortement d\'ajouter des parenth\xe8ses (comme dans mon exemple ci-dessus) pour expliciter quelles op\xe9rations vous voulez prioriser dans ce genre de cas plus "complexe".')),(0,r.kt)("h3",{id:"pour-aller-plus-loin"},"Pour aller plus loin"),(0,r.kt)("p",null,"Enfin, pour aller encore plus loin il est possible de manipuler les op\xe9rateurs ",(0,r.kt)("inlineCode",{parentName:"p"},"&&"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"||")," et ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," et trouver des expressions donnant le m\xeame r\xe9sultat.\nCela permet parfois de simplifier le code ou alors d'exprimer la condition sous une forme plus lisible ou compr\xe9hensible."),(0,r.kt)("p",null,"Dans mon exemple pr\xe9c\xe9dent la condition ",(0,r.kt)("inlineCode",{parentName:"p"},"(!isRaining || (isRaining && ownsAnUmbrella))")," est \xe9quivalente \xe0 \xe9crire ",(0,r.kt)("inlineCode",{parentName:"p"},"(!isRaining || ownsAnUmbrella)"),"."),(0,r.kt)("p",null,"Il existe aussi le ",(0,r.kt)("strong",{parentName:"p"},"th\xe9or\xe8me de De Morgan")," qui permet d'exprimer la n\xe9gation d'un ",(0,r.kt)("strong",{parentName:"p"},"ET")," avec un ",(0,r.kt)("strong",{parentName:"p"},"OU")," et inversement."),(0,r.kt)("p",null,"Il est possible d'exprimer mon exemple pr\xe9c\xe9dent sous cette forme:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"(!isRaining || ownsAnUmbrella)")," \xe9quivalent \xe0 ",(0,r.kt)("inlineCode",{parentName:"p"},"!(isRaining && !ownsAnUmbrella)")),(0,r.kt)("p",null,"On peut s'en convaincre en essayant de traduire ces conditions en phrases:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"(!isRaining || ownsAnUmbrella)"),": c'est le cas o\xf9 il ne pleut pas ou alors j'ai un parapluie.\n",(0,r.kt)("inlineCode",{parentName:"p"},"!(isRaining && !ownsAnUmbrella)")," ce n'est ",(0,r.kt)("strong",{parentName:"p"},"pas")," le cas o\xf9 il pleut et je n'ai pas de parapluie."),(0,r.kt)("p",null,"Vous trouverez des exemples de propri\xe9t\xe9s et simplifications possibles sur la page Wikip\xe9dia suivante:\n",(0,r.kt)("a",{parentName:"p",href:"https://fr.wikipedia.org/wiki/Alg%C3%A8bre_de_Boole_(logique)"},"Alg\xe8bre de Boole")),(0,r.kt)("h2",{id:"en-r\xe9sum\xe9"},"En r\xe9sum\xe9"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Une valeur bool\xe9enne est du type ",(0,r.kt)("strong",{parentName:"p"},"bool")," et peut prendre comme valeur ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," ou ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"On obtient une valeur bool\xe9enne avec une condition sur nos variables (avec les op\xe9rateurs de comparaison ",(0,r.kt)("kbd",null,"=="),", ",(0,r.kt)("kbd",null,"!="),", ",(0,r.kt)("kbd",null,">"),", ",(0,r.kt)("kbd",null,"<="),", ",(0,r.kt)("kbd",null,">")," ou ",(0,r.kt)("kbd",null,">="),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Les op\xe9rateurs ",(0,r.kt)("kbd",null,"&&"),", ",(0,r.kt)("kbd",null,"||")," et ",(0,r.kt)("kbd",null,"!")," permettent de modifier et combiner les valeurs bool\xe9ennes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"On utilise les structures de contr\xf4le ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"else"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"else if")," pour ex\xe9cuter des instructions diff\xe9rentes en fonction des conditions."))))}m.isMDXComponent=!0}}]);