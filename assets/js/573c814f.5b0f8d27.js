"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[6657],{2890:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>a});var i=n(5893),s=n(1151),t=n(4996);const c={title:"TD2 - Algorithmes de tri"},l=void 0,d={id:"TDs/S2/sorting",title:"TD2 - Algorithmes de tri",description:"L'id\xe9e de ce TD est de mettre en pratique les notions vues en cours sur les algorithmes de tri et de recherche.",source:"@site/content/TDs/S2/02_sorting.md",sourceDirName:"TDs/S2",slug:"/TDs/S2/sorting",permalink:"/Learn--cpp_programming/TDs/S2/sorting",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"TD2 - Algorithmes de tri"},sidebar:"TDs",previous:{title:"TD1 - Op\xe9rateurs",permalink:"/Learn--cpp_programming/TDs/S2/operators"},next:{title:"TD3 - Structures de donn\xe9es",permalink:"/Learn--cpp_programming/TDs/S2/dataStructures"}},o={},a=[{value:"Exercice 1 (tri it\xe9ratif)",id:"exercice-1-tri-it\xe9ratif",level:2},{value:"Exercice 2 (tri r\xe9cursif)",id:"exercice-2-tri-r\xe9cursif",level:2},{value:"Exercice 3 (Comparaison des algorithmes de tri)",id:"exercice-3-comparaison-des-algorithmes-de-tri",level:2},{value:"biblioth\xe8que standard",id:"biblioth\xe8que-standard",level:3},{value:"Exercice 4 (dichotomie)",id:"exercice-4-dichotomie",level:2},{value:"Pour aller plus loin: Counting sort",id:"pour-aller-plus-loin-counting-sort",level:2}];function u(e){const r={a:"a",admonition:"admonition",annotation:"annotation",code:"code",h2:"h2",h3:"h3",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"L'id\xe9e de ce TD est de mettre en pratique les notions vues en cours sur les algorithmes de tri et de recherche."}),"\n",(0,i.jsx)(r.p,{children:"Tout d'abord, je vous donne une fonction qui va permettre de v\xe9rifier si un tableau est tri\xe9 par ordre croissant."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"#include <vector>\n#include <algorithm>\nbool is_sorted(std::vector<int> const& vec) { return std::is_sorted(vec.begin(), vec.end()); }\n"})}),"\n",(0,i.jsx)(r.p,{children:"Vous pouvez l'utiliser de la mani\xe8re suivante:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:'std::vector<int> array {1, 2, 3, 4, 5, 6, 7, 8, 9};\nif (is_sorted(array)) {\n    std::cout << "Le tableau est tri\xe9" << std::endl;\n} else {\n    std::cout << "Le tableau n\'est pas tri\xe9" << std::endl;\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"exercice-1-tri-it\xe9ratif",children:"Exercice 1 (tri it\xe9ratif)"}),"\n",(0,i.jsxs)(r.p,{children:["Dans cet exercice, vous devez \xe9crire une fonction qui prend en param\xe8tre un tableau d'entiers (",(0,i.jsx)(r.code,{children:"std::vector"}),") et le trie par ordre croissant."]}),"\n",(0,i.jsx)(r.p,{children:"Vous avez le choix entre deux algorithmes de tri:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/Lessons/S2/Sorting#tri-%C3%A0-bulles-bubble-sort",children:(0,i.jsx)(r.strong,{children:"tri \xe0 bulle"})})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/Lessons/S2/Sorting#tri-par-s%C3%A9lection-selection-sort",children:(0,i.jsx)(r.strong,{children:"tri par s\xe9lection"})})}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Voil\xe0 les prototypes des fonctions:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"void bubble_sort(std::vector<int> & vec);\nvoid selection_sort(std::vector<int> & vec);\n"})}),"\n",(0,i.jsx)(r.h2,{id:"exercice-2-tri-r\xe9cursif",children:"Exercice 2 (tri r\xe9cursif)"}),"\n",(0,i.jsxs)(r.p,{children:["De nouveau, vous devez \xe9crire une fonction qui prend en param\xe8tre un tableau d'entiers (",(0,i.jsx)(r.code,{children:"std::vector"}),") et le trie par ordre croissant."]}),"\n",(0,i.jsx)(r.p,{children:"Cette fois-ci, vous devez utiliser un algorithme de tri r\xe9cursif."}),"\n",(0,i.jsx)(r.p,{children:"Vous avez le choix entre deux algorithmes de tri:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/Lessons/S2/Sorting#tri-fusion-merge-sort",children:(0,i.jsx)(r.strong,{children:"tri fusion"})})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/Lessons/S2/Sorting#tri-rapide-quick-sort",children:(0,i.jsx)(r.strong,{children:"tri rapide"})})}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Voil\xe0 les prototypes des fonctions \xe0 utiliser et impl\xe9menter:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"size_t quick_sort_partition(std::vector<float> & vec, size_t left, size_t right, size_t const pivot);\nvoid quick_sort(std::vector<float> & vec, size_t const left, size_t const right);\nvoid quick_sort(std::vector<float> & vec) {\n    quick_sort(vec, 0, vec.size() - 1);\n}\n\nvoid merge_sort_merge(std::vector<float> & vec, size_t const left, size_t const middle, size_t const right);\nvoid merge_sort(std::vector<float> & vec, size_t const left, size_t const right);\nvoid merge_sort(std::vector<float> & vec) {\n    merge_sort(vec, 0, vec.size() - 1);\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Dans ces deux algorithmes, on va trier des ",(0,i.jsx)(r.strong,{children:"plages"})," du tableau par ",(0,i.jsx)(r.strong,{children:"r\xe9cursivit\xe9"}),". C'est pour cela que les fonctions prennent en param\xe8tre les indices de d\xe9but et de fin de la plage \xe0 trier (",(0,i.jsx)(r.code,{children:"left"})," et ",(0,i.jsx)(r.code,{children:"right"}),").\nDe plus, dans les deux algorithmes, on va utiliser une ",(0,i.jsx)(r.strong,{children:"fonction auxiliaire"})," pour s\xe9parer le tableau en deux parties (",(0,i.jsx)(r.code,{children:"quick_sort_partition"}),") ou pour fusionner deux tableaux tri\xe9s (",(0,i.jsx)(r.code,{children:"merge_sort_merge"}),")."]}),"\n",(0,i.jsxs)(r.admonition,{type:"tip",children:[(0,i.jsxs)(r.p,{children:["Pour l'\xe9tape de merge du merge sort (",(0,i.jsx)(r.code,{children:"merge_sort_merge"}),"), il faudra copier les valeurs dans des ",(0,i.jsx)(r.strong,{children:"vecteurs temporaires"})," pour stocker les deux parties du tableau \xe0 fusionner."]}),(0,i.jsx)(r.p,{children:"Il existe plusieurs fa\xe7ons de copier les valeurs d'un vecteur dans un autre. La plus simple est de donner \xe0 la construction du vecteur les it\xe9rateurs de d\xe9but et de fin du vecteur \xe0 copier.\nCela fonctionne de la mani\xe8re suivante:"}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"std::vector<int> vec1 {1, 2, 3, 4, 5};\n\n// copie de vec1 dans vec2\nstd::vector<int> vec2(vec1.begin(), vec1.end());\n\n// copie des \xe9l\xe9ments de vec1 dans vec3 \xe0 partir de l'\xe9l\xe9ment d'indice 2\nstd::vector<int> vec3(vec1.begin() + 2, vec1.end());\n\n// copie des \xe9l\xe9ments de vec1 dans vec4 \xe0 partir de l'\xe9l\xe9ment d'indice 1 jusqu'\xe0 l'\xe9l\xe9ment d'indice 3\nstd::vector<int> vec4(vec1.begin() + 1, vec1.begin() + 4);\n\n// il est \xe9galement possible de copier un vecteur dans un autre \xe0 l'aide de la fonction std::copy\nstd::vector<int> vec5(vec1.size());\nstd::copy(vec1.begin(), vec1.end(), vec5.begin());\n// il faut que le vecteur de destination ait la bonne taille pour pouvoir copier les valeurs\n\n// ou \xe0 l'aide de la m\xe9thode assign\nstd::vector<int> vec6;\nvec6.assign(vec1.begin(), vec1.end());\n"})})]}),"\n",(0,i.jsx)(r.h2,{id:"exercice-3-comparaison-des-algorithmes-de-tri",children:"Exercice 3 (Comparaison des algorithmes de tri)"}),"\n",(0,i.jsx)(r.p,{children:"Une fois nos algorithmes de tri impl\xe9ment\xe9s, nous allons les comparer en terme de complexit\xe9 temporelle."}),"\n",(0,i.jsx)(r.p,{children:"Je vous fournis une fonction qui permet de g\xe9n\xe9rer un tableau d'entiers al\xe9atoires."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"#include <vector>\n#include <cstdlib>\n#include <algorithm>\n\nstd::vector<int> generate_random_vector(size_t const size, int const max = 100) {\n    std::vector<int> vec(size);\n    std::generate(vec.begin(), vec.end(), [&max]() { return std::rand() % max;} );\n    return vec;\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Je vous fournis \xe9galement une structure chronom\xe8tre, il suffit de  t\xe9l\xe9charger le fichier ",(0,i.jsx)("a",{target:"_blank",href:(0,t.Z)("/code/S2/ScopedTimer.hpp"),download:"ScopedTimer.hpp",children:"ScopedTimer.hpp"})," et le copier dans le dossier de votre projet et de l'inclure dans votre fichier source:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:'#include "ScopedTimer.hpp"\n'})}),"\n",(0,i.jsx)(r.p,{children:"Elle fonctionne de la mani\xe8re suivante:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:'{\n    ScopedTimer timer("nom du chronom\xe8tre");\n    // code \xe0 chronom\xe9trer\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Elle affichera le temps \xe9coul\xe9 entre sa cr\xe9ation et sa destruction(c'est \xe0 dire \xe0 la fin du bloc de code, c'est pourquoi il est d\xe9clar\xe9 dans un bloc entre accolades (",(0,i.jsx)(r.strong,{children:"Scope"}),") dans l'exemple ci-dessus)."]}),"\n",(0,i.jsx)(r.h3,{id:"biblioth\xe8que-standard",children:"biblioth\xe8que standard"}),"\n",(0,i.jsxs)(r.p,{children:["La ",(0,i.jsx)(r.strong,{children:"biblioth\xe8que standard"})," de C++ fournit une fonction de tri ",(0,i.jsx)(r.code,{children:"std::sort"})," qui permet de trier des conteneurs (incluse dans la biblioth\xe8que ",(0,i.jsx)(r.code,{children:"<algorithm>"}),")"]}),"\n",(0,i.jsx)(r.p,{children:"Vous pouvez l'utiliser de la mani\xe8re suivante:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"std::vector<int> array {1, 2, 3, 4, 5, 6, 7, 8, 9};\nstd::sort(array.begin(), array.end());\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"note",children:(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"begin"})," et ",(0,i.jsx)(r.code,{children:"end"})," sont des m\xe9thodes de ",(0,i.jsx)(r.code,{children:"std::vector"})," qui permettent de r\xe9cup\xe9rer des ",(0,i.jsx)(r.strong,{children:"it\xe9rateurs"})," sur le d\xe9but et la fin du conteneur.\nNous verrons les it\xe9rateurs plus tard dans le cours."]})}),"\n",(0,i.jsx)(r.p,{children:"Avec cette fonction, vous pouvez comparer les temps d'ex\xe9cution de vos algorithmes de tri avec celui de la biblioth\xe8que standard."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Que constatez-vous ?"}),"\n",(0,i.jsx)(r.li,{children:"Que pouvez-vous en dire ?"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"exercice-4-dichotomie",children:"Exercice 4 (dichotomie)"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["\xc9crire une fonction ",(0,i.jsx)(r.code,{children:"search"})," qui prend en param\xe8tre un tableau d'entiers (",(0,i.jsx)(r.code,{children:"std::vector"}),") tri\xe9 par ordre croissant et une valeur enti\xe8re et retourne l'indice de la valeur dans le tableau. Si la valeur n'est pas pr\xe9sente dans le tableau, la fonction retournera ",(0,i.jsx)(r.code,{children:"-1"})," (on pourrait utiliser quelques chose de plus propre comme ",(0,i.jsx)(r.code,{children:"std::optional"})," que l'on d\xe9couvrira dans le prochain cours pour \xe9viter de retourner ",(0,i.jsx)(r.code,{children:"-1"})," pour indiquer que l'on ne trouve pas la valeur)."]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["la fonction devra utiliser l'algorithme de recherche ",(0,i.jsx)(r.strong,{children:"dichotomique"}),"."]}),"\n",(0,i.jsxs)(r.admonition,{type:"tip",children:[(0,i.jsx)(r.p,{children:"On utilisera deux indices pour d\xe9finir la partie du tableau \xe0 traiter:"}),(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"left"})," : indice du premier \xe9l\xe9ment de la partie du tableau \xe0 traiter"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"right"})," : indice du dernier \xe9l\xe9ment de la partie du tableau \xe0 traiter"]}),"\n"]}),(0,i.jsxs)(r.p,{children:["Exemple simple avec le tableau suivant ",(0,i.jsx)(r.code,{children:"[1, 2, 2, 3, 4, 8, 12]"})," (nombre d'\xe9l\xe9ments: 7) et la valeur recherch\xe9e ",(0,i.jsx)(r.code,{children:"8"}),":"]}),(0,i.jsxs)(r.ol,{start:"2",children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"left = 0"})," et ",(0,i.jsx)(r.code,{children:"right = 6"})," (indice du premier et dernier \xe9l\xe9ment du tableau)\n",(0,i.jsx)(r.code,{children:"middle = (left + right) / 2 = (0 + 6) / 2 = 3"})," (indice de l'\xe9l\xe9ment au milieu du tableau)\nla valeur au milieu du tableau est ",(0,i.jsx)(r.code,{children:"3"})," qui est inf\xe9rieure \xe0 la valeur recherch\xe9e ",(0,i.jsx)(r.code,{children:"8"}),", on ne garde que la partie droite du tableau.\n",(0,i.jsx)(r.code,{children:"left"})," devient ",(0,i.jsx)(r.code,{children:"middle + 1 = 3 + 1 = 4"})," (indice du premier \xe9l\xe9ment de la partie droite du tableau)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"left = 4"})," et ",(0,i.jsx)(r.code,{children:"right = 6"}),"\n",(0,i.jsx)(r.code,{children:"middle = (left + right) / 2 = (4 + 6) / 2 = 5"}),"\nla valeur au milieu du tableau est ",(0,i.jsx)(r.code,{children:"8"})," qui est \xe9gale \xe0 la valeur recherch\xe9e, on retourne l'indice ",(0,i.jsx)(r.code,{children:"5"})," de la valeur dans le tableau."]}),"\n"]})]}),"\n",(0,i.jsxs)(r.ol,{start:"4",children:["\n",(0,i.jsxs)(r.li,{children:["tester la fonction ",(0,i.jsx)(r.code,{children:"search"})," avec les tableaux suivants et afficher le r\xe9sultat de la recherche:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"[1, 2, 2, 3, 4, 8, 12]"})," (valeur recherch\xe9e: ",(0,i.jsx)(r.code,{children:"8"}),")"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"[1, 2, 3, 3, 6, 14, 12, 15]"})," (valeur recherch\xe9e: ",(0,i.jsx)(r.code,{children:"15"}),")"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"[2, 2, 3, 4, 5, 8, 12, 15, 16]"})," (valeur recherch\xe9e: ",(0,i.jsx)(r.code,{children:"16"}),")"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"[5, 6, 7, 8, 9, 10, 11, 12, 13]"})," (valeur recherch\xe9e: ",(0,i.jsx)(r.code,{children:"6"}),")"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"[1, 2, 3, 4, 5, 6, 7, 8, 9]"})," (valeur recherch\xe9e: ",(0,i.jsx)(r.code,{children:"10"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"pour-aller-plus-loin-counting-sort",children:"Pour aller plus loin: Counting sort"}),"\n",(0,i.jsxs)(r.p,{children:["Le ",(0,i.jsx)(r.a,{href:"/Lessons/S2/Sorting#tri-par-d%C3%A9nombrement-counting-sort",children:(0,i.jsx)(r.strong,{children:"counting sort"})})," est un algorithme de tri qui permet de trier un tableau d'entiers en temps lin\xe9aire (c'est \xe0 dire en ",(0,i.jsxs)(r.span,{className:"katex",children:[(0,i.jsx)(r.span,{className:"katex-mathml",children:(0,i.jsx)(r.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(r.semantics,{children:[(0,i.jsxs)(r.mrow,{children:[(0,i.jsx)(r.mi,{children:"O"}),(0,i.jsx)(r.mo,{stretchy:"false",children:"("}),(0,i.jsx)(r.mi,{children:"n"}),(0,i.jsx)(r.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(r.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,i.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(r.span,{className:"base",children:[(0,i.jsx)(r.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(r.span,{className:"mopen",children:"("}),(0,i.jsx)(r.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(r.span,{className:"mclose",children:")"})]})})]}),").\nIl est cependant limit\xe9 par le fait qu'il ne peut trier que des ",(0,i.jsx)(r.strong,{children:"entiers"}),' ("positifs" pour le cas le plus simple) et que la valeur ',(0,i.jsx)(r.strong,{children:"maximale"})," des entiers du tableau doit \xeatre connue (\xe0 calculer avant le tri ou connue en fonction du contexte)."]}),"\n",(0,i.jsx)(r.p,{children:"Essaye d'impl\xe9menter cet algorithme de tri.\nVoil\xe0 le prototype de la fonction:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"void counting_sort(std::vector<int> & vec, int const max);\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>c});var i=n(7294);const s={},t=i.createContext(s);function c(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);