"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[2819],{11470:(e,n,s)=>{s.d(n,{A:()=>C});var i=s(96540),r=s(34164),t=s(23104),l=s(56347),c=s(205),o=s(57485),a=s(31682),d=s(70679);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:s}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((({props:{value:e,label:n,attributes:s,default:i}})=>({value:e,label:n,attributes:s,default:i})))}(s);return function(e){const n=(0,a.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function h({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const s=(0,l.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,t=p(e),[l,o]=(0,i.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:t}))),[a,u]=m({queryString:s,groupId:r}),[x,j]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,r]=(0,d.Dv)(n);return[s,(0,i.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:r}),g=(()=>{const e=a??x;return h({value:e,tabValues:t})?e:null})();(0,c.A)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),j(e)}),[u,j,t]),tabValues:t}}var j=s(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=s(74848);function v({className:e,block:n,selectedValue:s,selectValue:i,tabValues:l}){const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.a_)(),a=e=>{const n=e.currentTarget,r=c.indexOf(n),t=l[r].value;t!==s&&(o(n),i(t))},d=e=>{let n=null;switch(e.key){case"Enter":a(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;n=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;n=c[s]??c[c.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:l.map((({value:e,label:n,attributes:i})=>(0,f.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{c.push(e)},onKeyDown:d,onClick:a,...i,className:(0,r.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":s===e}),children:n??e},e)))})}function b({lazy:e,children:n,selectedValue:s}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function q(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,f.jsx)(v,{...n,...e}),(0,f.jsx)(b,{...n,...e})]})}function C(e){const n=(0,j.A)();return(0,f.jsx)(q,{...e,children:u(e.children)},String(n))}},19365:(e,n,s)=>{s.d(n,{A:()=>l});s(96540);var i=s(34164);const r={tabItem:"tabItem_Ymn6"};var t=s(74848);function l({children:e,hidden:n,className:s}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,s),hidden:n,children:e})}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},93881:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"Lessons/S1/Headers","title":"Compilation et Headers: S\xe9parer en plusieurs fichiers","description":"Maintenant que l\'on sait d\xe9couper notre code en fonctions il va aussi \xeatre int\xe9ressant de le d\xe9couper en plusieurs fichiers. Cela va permettre de regrouper des fonctionnalit\xe9s et mieux organiser un projet.","source":"@site/content/Lessons/S1/08_Headers.md","sourceDirName":"Lessons/S1","slug":"/Lessons/S1/Headers","permalink":"/Learn--cpp_programming/Lessons/S1/Headers","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"C++","permalink":"/Learn--cpp_programming/tags/c"}],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Compilation et Headers: S\xe9parer en plusieurs fichiers","tags":["C++"]},"sidebar":"Lessons","previous":{"title":"Structure: organiser nos donn\xe9es","permalink":"/Learn--cpp_programming/Lessons/S1/Struct"},"next":{"title":"Allouer et manipuler la m\xe9moire","permalink":"/Learn--cpp_programming/Lessons/S1/MemoryAllocation"}}');var r=s(74848),t=s(28453),l=s(11470),c=s(19365);const o={title:"Compilation et Headers: S\xe9parer en plusieurs fichiers",tags:["C++"]},a=void 0,d={},u=[{value:"M\xe9canisme de compilation (en simple)",id:"m\xe9canisme-de-compilation-en-simple",level:2},{value:"Le pr\xe9processeur",id:"le-pr\xe9processeur",level:3},{value:"La compilation",id:"la-compilation",level:3},{value:"Le linkage",id:"le-linkage",level:3},{value:"En pratique",id:"en-pratique",level:2},{value:"Fichier d&#39;en-t\xeate",id:"fichier-den-t\xeate",level:3},{value:"Pragma once: \xe9viter les doublons",id:"pragma-once-\xe9viter-les-doublons",level:3},{value:"Structures",id:"structures",level:4},{value:"Espaces de noms",id:"espaces-de-noms",level:3},{value:"Utiliser Cmake",id:"utiliser-cmake",level:2},{value:"Quelques am\xe9liorations",id:"quelques-am\xe9liorations",level:3},{value:"R\xe9sum\xe9",id:"r\xe9sum\xe9",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Maintenant que l'on sait ",(0,r.jsx)(n.strong,{children:"d\xe9couper"})," notre code en fonctions il va aussi \xeatre int\xe9ressant de le d\xe9couper en ",(0,r.jsx)(n.strong,{children:"plusieurs fichiers"}),". Cela va permettre de ",(0,r.jsx)(n.strong,{children:"regrouper"})," des fonctionnalit\xe9s et mieux ",(0,r.jsx)(n.strong,{children:"organiser"})," un projet."]}),"\n",(0,r.jsx)(n.p,{children:"Prenons directement deux fichiers qui vont nous servir d'exemple tout le long de ce chapitre :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="maths.cpp"',children:"int sum (int const a, int const b)\n{\n    return a + b;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="main.cpp"',children:"#include <iostream>\nint main()\n{\n    std::cout << sum(42, 27) << std::endl;\n\n    return 0;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["J'aimerais ici s\xe9parer le corps de la fonction ",(0,r.jsx)(n.code,{children:"sum"})," de son utilisation dans la fonction ",(0,r.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Probl\xe8me si j'essaye de compiler ",(0,r.jsx)(n.strong,{children:"ind\xe9pendamment"})," ces deux fichiers je peux avoir des erreurs. Soit il manque une fonction d'entr\xe9e ",(0,r.jsx)(n.code,{children:"main"})," pour le fichier ",(0,r.jsx)(n.code,{children:"maths.cpp"})," soit la fonction ",(0,r.jsx)(n.code,{children:"sum"})," n'est pas d\xe9clar\xe9e pour le fichier ",(0,r.jsx)(n.code,{children:"main.cpp"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"m\xe9canisme-de-compilation-en-simple",children:"M\xe9canisme de compilation (en simple)"}),"\n",(0,r.jsx)(n.p,{children:"Revenons \xe0 la compilation quelques instants pour mieux comprendre."}),"\n",(0,r.jsxs)(n.p,{children:["Quand j'ai parl\xe9 de ",(0,r.jsx)(n.strong,{children:"compilation"})," j'ai fait un ",(0,r.jsx)(n.strong,{children:"abus de langage"})," et j'ai englob\xe9 plusieurs \xe9tapes. Pour faire simple, il y a en r\xe9alit\xe9 ",(0,r.jsx)(n.strong,{children:"trois"})," grandes \xe9tapes lors de la compilation en ",(0,r.jsx)(n.strong,{children:"C++"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Le pr\xe9processeur"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"La compilation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Le linkage"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"le-pr\xe9processeur",children:"Le pr\xe9processeur"}),"\n",(0,r.jsxs)(n.p,{children:["La toute premi\xe8re \xe9tape est celle du ",(0,r.jsx)(n.strong,{children:"pr\xe9processeur"}),". C'est le moment o\xf9 toutes les ",(0,r.jsx)(n.strong,{children:"directives pr\xe9processeur"})," sont trait\xe9es (toutes les lignes commen\xe7ant par ",(0,r.jsx)("kbd",{children:"#"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["Par exemple, nous avons d\xe9j\xe0 la ",(0,r.jsx)(n.strong,{children:"directive pr\xe9processeur"})," ",(0,r.jsx)(n.code,{children:"#include"})," qui permet d'inclure des fonctionnalit\xe9s."]}),"\n",(0,r.jsxs)(n.p,{children:["Cette directive fait simplement un ",(0,r.jsx)(n.strong,{children:"copi\xe9-coll\xe9"})," du contenu du fichier \xe0 inclure dans le fichier o\xf9 la directive est utilis\xe9e."]}),"\n",(0,r.jsx)(n.p,{children:"Je ne vais pas en parler ici mais sachez qu'il existe d'autres directives permettant de faire des conditions en fonction des plateformes par exemple."}),"\n",(0,r.jsx)(n.h3,{id:"la-compilation",children:"La compilation"}),"\n",(0,r.jsxs)(n.p,{children:["Ensuite nous avons la ",(0,r.jsx)(n.strong,{children:"compilation"})," \xe0 proprement parler."]}),"\n",(0,r.jsxs)(n.p,{children:["Chaque fichier ",(0,r.jsx)(n.code,{children:".cpp"}),", obtenu ",(0,r.jsx)(n.strong,{children:"apr\xe8s"})," les modifications du ",(0,r.jsx)(n.strong,{children:"pr\xe9processeur"}),", appel\xe9 ",(0,r.jsx)(n.strong,{children:"unit\xe9 de compilation"}),", va \xeatre trait\xe9 individuellement.\nLe but de cette \xe9tape est de ",(0,r.jsx)(n.strong,{children:"transformer"})," le code ",(0,r.jsx)(n.strong,{children:"C++"})," (sous format texte) en langage compr\xe9hensible pour l'ordinateur."]}),"\n",(0,r.jsxs)(n.p,{children:["C\u2019est \xe0 cette \xe9tape que des ",(0,r.jsx)(n.strong,{children:"v\xe9rifications"})," du code ont lieu. Par exemple, dans le cas o\xf9 le compilateur ne trouve pas la d\xe9claration d\u2019une fonction que vous appelez. Dans notre exemple pr\xe9c\xe9dent dans le fichier ",(0,r.jsx)(n.code,{children:"main.cpp"}),", la compilation va s'arr\xeater avec un message d'erreur indiquant ce qui n\u2019a pas fonctionn\xe9."]}),"\n",(0,r.jsxs)(n.p,{children:["Cette \xe9tape va produire des ",(0,r.jsx)(n.strong,{children:"fichiers objets"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Un ",(0,r.jsx)(n.strong,{children:"fichier objet"}),", reconnaissable \xe0 son extension en ",(0,r.jsx)(n.code,{children:".o"})," ou ",(0,r.jsx)(n.code,{children:".obj"}),", n\u2019est rien d\u2019autre que du langage machine mais seul, sans aucun lien avec le reste des autres fichiers. Tel quel, il n\u2019est ",(0,r.jsx)(n.strong,{children:"pas ex\xe9cutable"}),", car il lui manque des informations."]}),"\n",(0,r.jsx)(n.p,{children:"Il est possible de pr\xe9ciser aux compilateurs que l'on souhaite s'arr\xeater \xe0 ce stade en ajoutant des flags de compilation:"}),"\n",(0,r.jsxs)(l.A,{groupId:"operating-systems",children:[(0,r.jsxs)(c.A,{value:"Windows",label:"Windows",children:[(0,r.jsxs)(n.p,{children:["Avec ",(0,r.jsx)(n.strong,{children:"MSVC"})," le flag est ",(0,r.jsx)("kbd",{children:"/c"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cl /c helloImac.cpp\n"})})]}),(0,r.jsxs)(c.A,{value:"Linux&MacOS",label:"Linux et MacOS",children:[(0,r.jsxs)(n.p,{children:["Avec ",(0,r.jsx)(n.strong,{children:"G++"})," le flag est ",(0,r.jsx)("kbd",{children:"-c"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"g++ -c helloImac.cpp\n"})})]})]}),"\n",(0,r.jsxs)(n.p,{children:["Cela indique au compilateur que l'on souhaite produire des ",(0,r.jsx)(n.strong,{children:"fichiers objets"})," et pas directement ",(0,r.jsx)(n.strong,{children:"lier"})," les fichiers pour en faire un ",(0,r.jsx)(n.strong,{children:"ex\xe9cutable"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Les ",(0,r.jsx)(n.strong,{children:"fichiers d'objets"}),' peuvent faire r\xe9f\xe9rence \xe0 des "',(0,r.jsx)(n.strong,{children:"symboles"}),"\"(noms de fonctions ou de variables) qui ne sont pas encore enti\xe8rement d\xe9finis. C'est le cas lorsque l'on utilise une fonction d\xe9clar\xe9e et que l'on n'a pas encore \xe9crit le ",(0,r.jsx)(n.strong,{children:"corps"})," de celle-ci, nous allons le voir juste apr\xe8s. Le compilateur ne s'en pr\xe9occupe pas et produit le fichier objet demand\xe9 si le reste du code est correct."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["L'avantage est qu'il n'est pas n\xe9cessaire de tout recompiler si vous ne modifiez qu'un seul fichier. Si aucune modification n\u2019est d\xe9tect\xe9e depuis la derni\xe8re compilation, alors le compilateur ",(0,r.jsx)(n.strong,{children:"r\xe9utilise"})," le fichier objet ",(0,r.jsx)(n.strong,{children:"pr\xe9c\xe9demment cr\xe9\xe9"})," lors d'une prochaine compilation ce qui acc\xe9l\xe8re la compilation d\u2019un projet. ",(0,r.jsx)(n.strong,{children:"Cmake"})," g\xe8re les fichiers objets lui m\xeame automatiquement dans le fameux dossier ",(0,r.jsx)(n.strong,{children:"build"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"le-linkage",children:"Le linkage"}),"\n",(0,r.jsxs)(n.p,{children:["Nos fichiers objets ne sont pas utilisables en l'\xe9tat et c'est la derni\xe8re \xe9tape de ",(0,r.jsx)(n.strong,{children:"linkage"})," qui va les ",(0,r.jsx)(n.strong,{children:"lier"})," entre eux pour produire un ",(0,r.jsx)(n.strong,{children:"ex\xe9cutable"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["C'est ce qui va permettre de ",(0,r.jsx)(n.strong,{children:"lier"})," la ",(0,r.jsx)(n.strong,{children:"d\xe9claration"})," d'une fonction dans un fichier et le ",(0,r.jsx)(n.strong,{children:"corps de la fonction"})," dans un autre fichier par exemple."]}),"\n",(0,r.jsxs)(n.p,{children:["Il est aussi possible de faire cette op\xe9ration en ligne de commande \xe0 partir des ",(0,r.jsx)(n.strong,{children:"fichiers objets"})," mais ce n'est pas tr\xe8s utile en pratique car des outils comme ",(0,r.jsx)(n.strong,{children:"CMake"})," se charge de cette \xe9tape pour nous."]}),"\n",(0,r.jsx)(n.h2,{id:"en-pratique",children:"En pratique"}),"\n",(0,r.jsxs)(n.p,{children:["Revenons \xe0 notre exemple avec les fichiers ",(0,r.jsx)(n.code,{children:"maths.cpp"})," et ",(0,r.jsx)(n.code,{children:"main.cpp"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["Premi\xe8rement, il manque la ",(0,r.jsx)(n.strong,{children:"d\xe9claration"})," de la fonction ",(0,r.jsx)(n.code,{children:"sum"})," (son ",(0,r.jsx)(n.strong,{children:"prototype"}),") dans le fichier ",(0,r.jsx)(n.code,{children:"main.cpp"})," pour pouvoir produire un fichier objet valide:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="main.cpp"',children:"#include <iostream>\n\nint sum (int const a, int const b);\n\nint main()\n{\n    std::cout << sum(42, 27) << std::endl;\n\n    return 0;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Ce fichier ne permet toujours pas de cr\xe9er un ex\xe9cutable \xe0 lui seul (car il ",(0,r.jsx)(n.strong,{children:"manque"})," le ",(0,r.jsx)(n.strong,{children:"corps"})," de la fonction ",(0,r.jsx)(n.code,{children:"sum"}),") mais il est maintenant possible d'en faire un ",(0,r.jsx)(n.strong,{children:"fichier objet"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"fichier-den-t\xeate",children:"Fichier d'en-t\xeate"}),"\n",(0,r.jsxs)(n.p,{children:["Pour une seule fonction dans mon exemple c'est simple de ",(0,r.jsx)(n.strong,{children:"recopier"})," le ",(0,r.jsx)(n.strong,{children:"prototype"})," de la fonction. Imaginons que notre fichier ",(0,r.jsx)(n.code,{children:"maths.cpp"})," soit compos\xe9 de dizaines de fonctions et que l'on souhaite les utiliser dans le fichier ",(0,r.jsx)(n.code,{children:"main.cpp"})," mais aussi dans un autre fichier du m\xeame projet. Cela commence \xe0 \xeatre fastidieux de tout recopier."]}),"\n",(0,r.jsxs)(n.p,{children:["On va donc regrouper les ",(0,r.jsx)(n.strong,{children:"d\xe9clarations"})," des fonctions dans un autre fichier d'extension ",(0,r.jsx)(n.code,{children:".hpp"})," que l'on appelle ",(0,r.jsx)(n.strong,{children:"fichier d'en-t\xeate"})," (",(0,r.jsx)(n.strong,{children:"header"})," en anglais)."]}),"\n",(0,r.jsxs)(n.p,{children:["Ainsi gr\xe2ce \xe0 la ",(0,r.jsx)(n.strong,{children:"directive pr\xe9processeur"})," ",(0,r.jsx)(n.code,{children:"#include"})," on va pouvoir inclure (recopier) toutes les d\xe9clarations des fonctions facilement."]}),"\n",(0,r.jsx)(n.p,{children:"Dans notre exemple le fichier d'en-t\xeate serait simplement:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="maths.hpp"',children:"int sum (int const a, int const b);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["et le ",(0,r.jsx)(n.code,{children:"main.cpp"})," devient:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="main.cpp"',children:'#include <iostream>\n// highlight-next-line\n#include "maths.hpp"\n\nint main()\n{\n    std::cout << sum(42, 27) << std::endl;\n\n    return 0;\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.mdxAdmonitionTitle,{children:[(0,r.jsx)(n.strong,{children:"guillemets"})," ou ",(0,r.jsx)(n.strong,{children:"chevrons"})]}),(0,r.jsxs)(n.p,{children:["On peut noter une petite diff\xe9rence, j'utilise ici des ",(0,r.jsx)(n.strong,{children:"guillemets"})," ",(0,r.jsx)("kbd",{children:'""'})," pour l'inclusion et pas des ",(0,r.jsx)(n.strong,{children:"chevrons"})," ",(0,r.jsx)("kbd",{children:"< >"}),". On pourrait tr\xe8s bien utiliser des ",(0,r.jsx)(n.strong,{children:"guillemets"})," tout le temps et faire: ",(0,r.jsx)(n.code,{children:'#include "iostream"'}),". Cette diff\xe9rence est une question de ",(0,r.jsx)(n.strong,{children:"convention"})," et on r\xe9serve les ",(0,r.jsx)(n.strong,{children:"chevrons"})," ",(0,r.jsx)("kbd",{children:"< >"})," pour les fichiers de qui viennent de ",(0,r.jsx)(n.strong,{children:"biblioth\xe8ques"})," comme la ",(0,r.jsx)(n.strong,{children:"biblioth\xe8que standard"})," (",(0,r.jsx)(n.code,{children:"iostream"}),", ",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"vector"}),", etc) et les ",(0,r.jsx)(n.strong,{children:"guillemets"})," ",(0,r.jsx)("kbd",{children:'""'})," pour le reste."]})]}),"\n",(0,r.jsxs)(n.p,{children:["On va \xe9galement inclure ce fichier d'",(0,r.jsx)(n.strong,{children:"en-t\xeate"})," dans notre fichier ",(0,r.jsx)(n.code,{children:"maths.cpp"})," pour s'assurer que l'on impl\xe9mente les bonnes fonctions list\xe9es dans le fichier d'en-t\xeate."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="maths.cpp"',children:'// highlight-next-line\n#include "maths.hpp"\n\nint sum (int const a, int const b)\n{\n    return a + b;\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.mdxAdmonitionTitle,{children:[(0,r.jsx)(n.strong,{children:"cpp"})," ou ",(0,r.jsx)(n.strong,{children:"hpp"})]}),(0,r.jsxs)(n.p,{children:["Les fichiers d\u2019",(0,r.jsx)(n.strong,{children:"en-t\xeate"})," peuvent aussi utiliser l\u2019extension ",(0,r.jsx)(n.strong,{children:".h"}),". La diff\xe9rence n\u2019est qu\u2019une histoire de go\xfbt. Je pr\xe9f\xe8re utiliser ",(0,r.jsx)(n.strong,{children:".hpp"})," plut\xf4t que ",(0,r.jsx)(n.strong,{children:".h"})," pour mieux faire la distinction entre ",(0,r.jsx)(n.strong,{children:"C"})," et ",(0,r.jsx)(n.strong,{children:"C++"})," par analogie aux fichiers sources, qui se terminent par ",(0,r.jsx)(n.strong,{children:".cpp"})," en ",(0,r.jsx)(n.strong,{children:"C++"})," mais ",(0,r.jsx)(n.strong,{children:".c"})," en ",(0,r.jsx)(n.strong,{children:"C"}),"."]})]}),"\n",(0,r.jsx)(n.h3,{id:"pragma-once-\xe9viter-les-doublons",children:"Pragma once: \xe9viter les doublons"}),"\n",(0,r.jsxs)(n.p,{children:["Mais se pose alors la question des ",(0,r.jsx)(n.strong,{children:"doublons"})," si l'on inclut de nombreux fichiers, les uns d\xe9pendants des autres."]}),"\n",(0,r.jsxs)(n.p,{children:["Dans le cas des fonctions ce n'est pas bien grave car d\xe9clarer plusieurs fois une fonction (je parle du ",(0,r.jsx)(n.strong,{children:"prototype"})," pas du corps qui lui doit \xeatre unique) est autoris\xe9 bien que ce soit inutile."]}),"\n",(0,r.jsxs)(n.p,{children:["Par contre ce n'est pas toujours le cas. Par exemple avec les ",(0,r.jsx)(n.strong,{children:"Enums"})," il n'est pas possible de les d\xe9clarer deux fois et on obtient une erreur de compilation si on le fait."]}),"\n",(0,r.jsxs)(n.admonition,{title:"Un exemple",type:"info",children:[(0,r.jsxs)(n.p,{children:["Admettons que l'on a un autre fichier ",(0,r.jsx)(n.code,{children:"utils.cpp"})," qui inclut ",(0,r.jsx)(n.code,{children:"maths.cpp"})," pour fonctionner. ",(0,r.jsx)(n.code,{children:"utils.hpp"})," contient les d\xe9clarations des fonctions propres au fichier ",(0,r.jsx)(n.code,{children:"utils.cpp"}),". Le fichier ",(0,r.jsx)(n.code,{children:"maths.hpp"})," d\xe9finit un ",(0,r.jsx)(n.strong,{children:"enum"}),"."]}),(0,r.jsxs)(n.p,{children:["Si maintenant on souhaite utiliser des fonctions des deux fichiers dans notre fichier principal ",(0,r.jsx)(n.code,{children:"main.cpp"}),", on va se retrouver \xe0 inclure les deux:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="main.cpp"',children:'#include "utils.hpp"\n#include "maths.hpp"\n\nint main()\n{\n    // ...\n    return 0;\n}\n'})}),(0,r.jsxs)(n.p,{children:["Cela va provoquer une ",(0,r.jsx)(n.strong,{children:"erreur"})," lors de la compilation du fichier objet ",(0,r.jsx)(n.code,{children:"main"})," car l'",(0,r.jsx)(n.strong,{children:"enum"})," est d\xe9clar\xe9 deux fois. Une fois provenant de l'inclusion de ",(0,r.jsx)(n.code,{children:"utils.hpp"})," (qui inclut lui-m\xeame ",(0,r.jsx)(n.code,{children:"maths.hpp"}),") et une seconde fois en incluant directement le fichier ",(0,r.jsx)(n.code,{children:"maths.hpp"}),"."]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"#pragma once"})," est une ",(0,r.jsx)(n.strong,{children:"directive du pr\xe9processeur"})," l\xe0 pour r\xe9pondre \xe0 notre besoin."]}),"\n",(0,r.jsxs)(n.p,{children:["Elle est utilis\xe9e pour emp\xeacher que le contenu des fichiers d'",(0,r.jsx)(n.strong,{children:"en-t\xeate"})," soient inclus plusieurs fois. La directive ",(0,r.jsx)(n.code,{children:"#pragma once"}),", pr\xe9sente dans un fichier d'",(0,r.jsx)(n.strong,{children:"en-t\xeate"}),", garantit que le contenu du fichier sera inclus ",(0,r.jsx)(n.strong,{children:"une seule fois"})," dans une compilation."]}),"\n",(0,r.jsxs)(n.p,{children:["Le fichier ",(0,r.jsx)(n.code,{children:"maths.hpp"})," dans notre exemple devient donc:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="maths.hpp"',children:"// highlight-next-line\n#pragma once\nint sum (int const a, int const b);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Un fichier d'",(0,r.jsx)(n.strong,{children:"en-t\xeate"})," doit ",(0,r.jsx)(n.strong,{children:"toujours"})," contenir cette directive au d\xe9but du fichier."]}),"\n",(0,r.jsx)(n.h4,{id:"structures",children:"Structures"}),"\n",(0,r.jsxs)(n.p,{children:["Bien que ce soit possible de mettre la d\xe9claration d'une ",(0,r.jsx)(n.strong,{children:"structure"})," dans un fichier ",(0,r.jsx)(n.code,{children:".cpp"})," g\xe9n\xe9ralement on a besoin de s'en resservir dans plusieurs fichiers et la d\xe9claration se trouve donc dans un ",(0,r.jsx)(n.strong,{children:"fichier d'en-t\xeate"})," (",(0,r.jsx)(n.code,{children:".hpp"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["Cependant, comme pour les ",(0,r.jsx)(n.strong,{children:"enums"}),", une ",(0,r.jsx)(n.strong,{children:"structure"})," ne peut \xeatre d\xe9clar\xe9e qu'une fois et il ne faut donc surtout pas oublier la ",(0,r.jsx)(n.strong,{children:"directive pr\xe9processeur"})," ",(0,r.jsx)(n.code,{children:"#pragma once"})," pour \xe9viter un ",(0,r.jsx)(n.strong,{children:"doublon"})," lors d'inclusions."]}),"\n",(0,r.jsxs)(n.p,{children:["On utilisera dans ce cas la d\xe9claration de la structure avec les ",(0,r.jsx)(n.strong,{children:"prototypes"})," des fonctions qui lui sont associ\xe9es dans notre fichier d'en-t\xeate."]}),"\n",(0,r.jsx)(n.h3,{id:"espaces-de-noms",children:"Espaces de noms"}),"\n",(0,r.jsxs)(n.p,{children:["Il est possible de regrouper du code (d\xe9claration, fonction, ect) dans un ",(0,r.jsx)(n.strong,{children:"espace de noms"})," (namespace en anglais) pour \xe9viter les conflits de noms."]}),"\n",(0,r.jsxs)(n.p,{children:["Nous avons d\xe9j\xe0 rencontr\xe9 sans le savoir des espaces de noms avec la ",(0,r.jsx)(n.strong,{children:"biblioth\xe8que standard"})," de ",(0,r.jsx)(n.strong,{children:"C++"}),". Par exemple, ",(0,r.jsx)(n.code,{children:"std::cout"})," est dans l'espace de noms ",(0,r.jsx)(n.code,{children:"std"})," (pour ",(0,r.jsx)(n.strong,{children:"standard"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"Cela permet de diff\xe9rencier et s\xe9parer des fonctions (venant de diff\xe9rentes biblioth\xe8ques par exemple) qui ont le m\xeame nom."}),"\n",(0,r.jsxs)(n.p,{children:["Par exemple, si vous avez deux fonctions ",(0,r.jsx)(n.code,{children:"sum"})," (avec la m\xeame signature) dans deux fichiers diff\xe9rents, vous allez avoir une erreur de compilation car le compilateur ne saura pas laquelle choisir."]}),"\n",(0,r.jsxs)(n.p,{children:["Dans ce cas, vous pouvez les mettre dans un ",(0,r.jsx)(n.strong,{children:"espace de noms"})," pour les diff\xe9rencier."]}),"\n",(0,r.jsxs)(n.p,{children:["Pour cela on utilise le mot cl\xe9 ",(0,r.jsx)(n.code,{children:"namespace"})," suivi du nom de l'espace de noms et des accolades pour d\xe9limiter le code qui appartient \xe0 cet espace de noms."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="maths.hpp"',children:"// highlight-next-line\nnamespace Maths\n{\n    int sum (int const a, int const b);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Pour d\xe9finir la fonction on va devoir pr\xe9ciser l'espace de noms en ajoutant le pr\xe9fixe ",(0,r.jsx)(n.code,{children:"Maths::"})," devant le nom de la fonction."]}),"\n",(0,r.jsxs)(n.p,{children:["On peut \xe9galement de nouveau utiliser le mot cl\xe9 ",(0,r.jsx)(n.code,{children:"namespace"})," si on souhaite d\xe9finir plusieurs fonctions dans le m\xeame espace de noms."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="maths.cpp"',children:'#include "maths.hpp"\n\n// highlight-next-line\nint Maths::sum (int const a, int const b)\n{\n    return a + b;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Pour appeler la fonction ",(0,r.jsx)(n.code,{children:"sum"})," dans le fichier ",(0,r.jsx)(n.code,{children:"main.cpp"})," il faudra maintenant pr\xe9ciser l'espace de noms en ajoutant le pr\xe9fixe ",(0,r.jsx)(n.code,{children:"Maths::"})," devant le nom de la fonction."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="main.cpp"',children:'#include <iostream>\n// highlight-next-line\n#include "maths.hpp"\n\nint sum (int const a, int const b)\n{\n    return a + 2*b;\n}\n\nint main()\n{   \n    // Cette ligne va appeler la fonction sum du namespace Maths\n    std::cout << Maths::sum(42, 27) << std::endl;\n    // Cette ligne va appeler la fonction sum d\xe9clar\xe9e dans le fichier main.cpp\n    std::cout << sum(42, 27) << std::endl;\n\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"utiliser-cmake",children:"Utiliser Cmake"}),"\n",(0,r.jsx)(n.p,{children:"Pour r\xe9sumer nous avons donc maintenant les fichiers suivants:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="maths.hpp"',children:"#pragma once\nint sum (int const a, int const b);\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="main.cpp"',children:'#include <iostream>\n#include "maths.hpp"\n\nint main()\n{\n    std::cout << sum(42, 27) << std::endl;\n\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:'title="maths.cpp"',children:'#include "maths.hpp"\n\nint sum (int const a, int const b)\n{\n    return a + b;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Nous allons les placer dans un ",(0,r.jsx)(n.strong,{children:"dossier de projet"})," puis dans un ",(0,r.jsx)(n.strong,{children:"sous dossier"})," ",(0,r.jsx)(n.code,{children:"/src"})," (pour sources).\nPour certains projets on peut avoir plusieurs sous dossiers comme ",(0,r.jsx)(n.code,{children:"/src"}),", ",(0,r.jsx)(n.code,{children:"/include"})," (pour s\xe9parer les fichiers d'en-t\xeate). C'est une question d'",(0,r.jsx)(n.strong,{children:"organisation"})," et de ",(0,r.jsx)(n.strong,{children:"pr\xe9f\xe9rence"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Dans ce dossier de projet nous allons cr\xe9er notre fichier ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," pour nous aider \xe0 compiler le projet."]}),"\n",(0,r.jsxs)(n.p,{children:["Nous allons reprendre et modifier notre premier fichier ",(0,r.jsx)(n.strong,{children:"Cmake"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Dans le fichier ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," il va falloir indiquer les r\xe9pertoires o\xf9 se trouvent les ",(0,r.jsx)(n.strong,{children:"fichiers d'en-t\xeate"})," par ",(0,r.jsx)(n.code,{children:"target_include_directories()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["On va \xe9galement r\xe9gler une variable ",(0,r.jsx)(n.strong,{children:"Cmake"})," ",(0,r.jsx)(n.code,{children:"CMAKE_RUNTIME_OUTPUT_DIRECTORY"})," qui va permettre d'indiquer que l'on souhaite placer l'",(0,r.jsx)(n.strong,{children:"ex\xe9cutable"})," compil\xe9 dans un sous dossier ",(0,r.jsx)(n.code,{children:"bin"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",metastring:'title="CMakeLists.txt"',children:'# la version de cmake \xe0 utiliser\ncmake_minimum_required(VERSION 3.10)\n\n# La version du C++ que l\'on souhaite utiliser (dans notre cas C++17)\nset(CMAKE_CXX_STANDARD 17)\n\n# Le nom du projet\nproject(IMAC_project)\n\n# On souhaite placer l\'ex\xe9cutable dans un sous-dossier "bin" au lieu de le mettre dans le dossier build\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)\n\n# On indique que l\'on souhaite faire un ex\xe9cutable avec nos deux fichiers .cpp\nadd_executable(helloImac "src/main.cpp" "src/maths.cpp")\n\n# le dossier contenant les fichiers d\'en-t\xeate pour notre executable helloImac\ntarget_include_directories(helloImac PUBLIC "src/")\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"CMAKE_SOURCE_DIR"})," est une variable cmake qui indique le dossier dans lequel se trouve le fichier ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," (documentation ",(0,r.jsx)(n.a,{href:"https://cmake.org/cmake/help/latest/variable/CMAKE_SOURCE_DIR.html#variable:CMAKE_SOURCE_DIR",children:"ici"}),")."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Il faut s'assurer qu'il y a exactement une fonction d'entr\xe9e ",(0,r.jsx)(n.strong,{children:"main()"})," dans les fichiers sources list\xe9s pour un ",(0,r.jsx)(n.strong,{children:"ex\xe9cutable"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"Petit r\xe9sum\xe9 de notre dossier:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"projet_folder/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.cpp\n\u2502   \u251c\u2500\u2500 maths.cpp\n\u2502   \u2514\u2500\u2500 maths.hpp\n\u2514\u2500\u2500 CMakeLists.txt\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Vous pouvez maintenant ouvrir le dossier de projet dans ",(0,r.jsx)(n.strong,{children:"VSCode"})," et compiler votre projet."]}),"\n",(0,r.jsx)(n.h3,{id:"quelques-am\xe9liorations",children:"Quelques am\xe9liorations"}),"\n",(0,r.jsxs)(n.p,{children:['Je vous ai parl\xe9 de "',(0,r.jsx)(n.strong,{children:"warnings"}),"\" de compilation \xe0 plusieurs reprises.\nIl est possible d'ajouter des options pour activer des ",(0,r.jsx)(n.strong,{children:"warnings"})," et avoir des informations suppl\xe9mentaires lors de la compilation."]}),"\n",(0,r.jsxs)(n.p,{children:["Je vous propose d'ajouter ces lignes dans votre fichier ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",children:"if (MSVC)\n    add_compile_options(/W3)\nelse()\n    add_compile_options(-Wall -Wextra -Wpedantic -pedantic-errors)\nendif()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Cela va se complexifier avec un nombre plus important de fichiers sources.\nAvec ",(0,r.jsx)(n.strong,{children:"Cmake"})," il est possible de faire une ",(0,r.jsx)(n.strong,{children:"recherche de fichier"})," afin de ne pas avoir \xe0 lister tous les fichiers sources manuellement:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",children:'file(GLOB_RECURSE SRC_FILES CONFIGURE_DEPENDS "src/*.cpp")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Notre fichier ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," devient:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",children:'# la version de cmake \xe0 utiliser\ncmake_minimum_required(VERSION 3.10)\n\n# La version du C++ que l\'on souhaite utiliser (dans notre cas C++17)\nset(CMAKE_CXX_STANDARD 17)\n\n# Le nom du projet\nproject(IMAC_project)\n\n# R\xe9glage du compilateur pour les warnings\n// highlight-start\nif (MSVC)\n    add_compile_options(/W3)\nelse()\n    add_compile_options(-Wall -Wextra -Wpedantic -pedantic-errors)\nendif()\n// highlight-end\n\n# On souhaite placer l\'ex\xe9cutable dans un sous-dossier "bin" au lieu de le mettre dans le dossier build\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)\n\n# Obtenir la liste des fichiers sources dans le dossier src\n// highlight-next-line\nfile(GLOB_RECURSE SRC_FILES CONFIGURE_DEPENDS "src/*.cpp")\n\n# Optionnel : afficher la liste des fichiers sources\nmessage(STATUS "Found source files:")\nforeach(SRC_FILE ${SRC_FILES})\n    message(STATUS " - ${SRC_FILE}")\nendforeach()\n\n# On indique que l\'on souhaite faire un ex\xe9cutable avec nos fichiers sources\n// highlight-next-line\nadd_executable(helloImac ${SRC_FILES})\n\n# le dossier contenant les fichiers d\'en-t\xeate pour notre executable helloImac\ntarget_include_directories(helloImac PUBLIC "src/")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"r\xe9sum\xe9",children:"R\xe9sum\xe9"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Les ",(0,r.jsx)(n.strong,{children:"fichiers d'en-t\xeate"})," ou ",(0,r.jsx)(n.strong,{children:"headers"})," (d'extension ",(0,r.jsx)(n.code,{children:".hpp"}),") sont l\xe0 pour lister les diff\xe9rentes d\xe9clarations des fonctions (et d'autres choses comme les ",(0,r.jsx)(n.strong,{children:"enums"}),") afin de pouvoir les utiliser dans ",(0,r.jsx)(n.strong,{children:"plusieurs fichiers"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Les ",(0,r.jsx)(n.strong,{children:"fichiers objets"}),' sont des fichiers g\xe9n\xe9r\xe9s pendant la compilation. Ils peuvent faire r\xe9f\xe9rence \xe0 des "',(0,r.jsx)(n.strong,{children:"symboles"}),"\"(noms de fonctions ou de variables) qui ne sont pas encore enti\xe8rement d\xe9finis mais seulement d\xe9clar\xe9s (et inclus \xe0 l'aide des ",(0,r.jsx)(n.strong,{children:"fichiers d'en-t\xeate"}),"). Ils permettent aussi d'",(0,r.jsx)(n.strong,{children:"acc\xe9l\xe9rer la compilation"})," pour r\xe9utiliser des parties de code inchang\xe9es."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["La ",(0,r.jsx)(n.strong,{children:"directive pr\xe9processeur"})," ",(0,r.jsx)(n.code,{children:"#include"})," fait simplement un ",(0,r.jsx)(n.strong,{children:"copier-coller"})," du fichier cible dans le fichier actuel."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["La ",(0,r.jsx)(n.strong,{children:"directive pr\xe9processeur"})," ",(0,r.jsx)(n.code,{children:"#pragma once"})," permet d'\xe9viter de copier deux fois des d\xe9clarations lors d'inclusions. C'est tr\xe8s utile pour les ",(0,r.jsx)(n.strong,{children:"fichiers d'en-t\xeate"})," contenant des ",(0,r.jsx)(n.strong,{children:"enums"})," ou des ",(0,r.jsx)(n.strong,{children:"structures"}),". Il faut ",(0,r.jsx)(n.strong,{children:"toujours"})," l'utiliser dans les ",(0,r.jsx)(n.strong,{children:"fichiers d'en-t\xeate"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["il y a ",(0,r.jsx)(n.strong,{children:"3"})," \xe9tapes dans la compilation:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Le ",(0,r.jsx)(n.strong,{children:"pr\xe9processeur"})," qui transforme les ",(0,r.jsx)(n.strong,{children:"directives pr\xe9processeur"})," comme ",(0,r.jsx)(n.code,{children:"#include"})," ou ",(0,r.jsx)(n.code,{children:"#pragma once"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"La compilation"})," qui g\xe9n\xe8re des ",(0,r.jsx)(n.strong,{children:"fichiers objets"})," pour chaque unit\xe9 de compilation (fichiers ",(0,r.jsx)(n.code,{children:".cpp"})," apr\xe8s traitement du pr\xe9processeur)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Le linkage"})," qui permet de ",(0,r.jsx)(n.strong,{children:"lier"})," tous les ",(0,r.jsx)(n.strong,{children:"fichiers objets"})," ensemble pour obtenir un ",(0,r.jsx)(n.strong,{children:"ex\xe9cutable"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cmake"})," permet de g\xe9rer ces \xe9tapes de compilation simplement."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);