"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[287],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),c=r,k=m["".concat(o,".").concat(c)]||m[c]||d[c]||s;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<s;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const s={title:"Un monde de variables",tags:["C++"],sidebar_position:2},i="Introduction",l={unversionedId:"Lessons/Variables",id:"Lessons/Variables",title:"Un monde de variables",description:"Maintenant que l'on sait ex\xe9cuter notre premier programme il est temps de d\xe9couvrir ce que l'on va pouvoir manipuler en C++.",source:"@site/content/Lessons/Variables.md",sourceDirName:"Lessons",slug:"/Lessons/Variables",permalink:"/Learn--cpp_programming/Lessons/Variables",draft:!1,tags:[{label:"C++",permalink:"/Learn--cpp_programming/tags/c"}],version:"current",sidebarPosition:2,frontMatter:{title:"Un monde de variables",tags:["C++"],sidebar_position:2},sidebar:"sidebar",previous:{title:"Premier programme",permalink:"/Learn--cpp_programming/Lessons/Setup/HelloImac"},next:{title:"Un peu de logique avec les conditions",permalink:"/Learn--cpp_programming/Lessons/Conditions"}},o={},u=[{value:"Les litt\xe9raux",id:"les-litt\xe9raux",level:2},{value:"Les caract\xe8res",id:"les-caract\xe8res",level:3},{value:"Les cha\xeenes de caract\xe8res",id:"les-cha\xeenes-de-caract\xe8res",level:3},{value:"Les caract\xe8res sp\xe9ciaux",id:"les-caract\xe8res-sp\xe9ciaux",level:4},{value:"Les nombres",id:"les-nombres",level:3},{value:"Cr\xe9er une variable",id:"cr\xe9er-une-variable",level:2},{value:"Les types",id:"les-types",level:2},{value:"Des pr\xe9fixes modificateurs",id:"des-pr\xe9fixes-modificateurs",level:2},{value:"Comportement ind\xe9termin\xe9",id:"comportement-ind\xe9termin\xe9",level:2},{value:"Quelques r\xe8gles de nommage",id:"quelques-r\xe8gles-de-nommage",level:2},{value:"Un joli petit nom",id:"un-joli-petit-nom",level:3},{value:"Quelques mauvais exemples",id:"quelques-mauvais-exemples",level:3},{value:"Enum: Un type suppl\xe9mentaire",id:"enum-un-type-suppl\xe9mentaire",level:2},{value:"Des op\xe9rateurs pour manipuler nos variables",id:"des-op\xe9rateurs-pour-manipuler-nos-variables",level:2},{value:"Op\xe9rateurs d&#39;affectation",id:"op\xe9rateurs-daffectation",level:3},{value:"Op\xe9rateurs d&#39;incr\xe9mentation",id:"op\xe9rateurs-dincr\xe9mentation",level:3},{value:"Quelques exemples",id:"quelques-exemples",level:3},{value:"Variables constantes",id:"variables-constantes",level:2},{value:"Entr\xe9e / Sortie",id:"entr\xe9e--sortie",level:2},{value:"Cast",id:"cast",level:2},{value:"En r\xe9sum\xe9",id:"en-r\xe9sum\xe9",level:2}],p={toc:u},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Maintenant que l'on sait ex\xe9cuter notre premier programme il est temps de d\xe9couvrir ce que l'on va pouvoir manipuler en C++."),(0,r.kt)("h2",{id:"les-litt\xe9raux"},"Les litt\xe9raux"),(0,r.kt)("p",null,"Un ",(0,r.kt)("strong",{parentName:"p"},"litt\xe9ral")," est une valeur donn\xe9e explicitement dans le code. Il y a plusieurs types de litt\xe9raux en ",(0,r.kt)("strong",{parentName:"p"},"C++"),"."),(0,r.kt)("h3",{id:"les-caract\xe8res"},"Les caract\xe8res"),(0,r.kt)("p",null,"En effet, la phrase ",(0,r.kt)("strong",{parentName:"p"},'"Hello and welcome to IMAC !"')," pr\xe9c\xe9demment rencontr\xe9e repr\xe9sente simplement du texte.\nC'est ce qu'on appelle une ",(0,r.kt)("strong",{parentName:"p"},"cha\xeene de caract\xe8res"),"."),(0,r.kt)("p",null,"Qui dit ",(0,r.kt)("strong",{parentName:"p"},"cha\xeene de caract\xe8res")," dit ",(0,r.kt)("strong",{parentName:"p"},"caract\xe8res")," et il est \xe9galement possible de repr\xe9senter un unique caract\xe8re avec des guillemets simples ",(0,r.kt)("strong",{parentName:"p"},"'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    std::cout << 'a' << std::endl;\n    std::cout << '7' << std::endl;\n    std::cout << '?' << std::endl;\n    return 0;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    std::cout << 'H' << 'e'  << 'l' << 'l' << 'o' << ' ' << 'I' << 'M' << 'A' << 'C' << '!' << std::endl;\n    return 0;\n}\n")),(0,r.kt)("h3",{id:"les-cha\xeenes-de-caract\xe8res"},"Les cha\xeenes de caract\xe8res"),(0,r.kt)("p",null,"On pourrait simplement se contenter de ",(0,r.kt)("strong",{parentName:"p"},"caract\xe8res")," me direz vous mais c'est un peu fastidieux et les ",(0,r.kt)("strong",{parentName:"p"},"cha\xeenes de caract\xe8res")," sont donc l\xe0 pour nous simplifier la vie."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main()\n{\n    std::cout << "Hello IMAC!" << std::endl;\n    return 0;\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"On diff\xe9rencie les caract\xe8res simples (utilisant des ",(0,r.kt)("kbd",null,"'"),") des chaines de caract\xe8res par les guillemets ",(0,r.kt)("kbd",null,'"'),".")),(0,r.kt)("h4",{id:"les-caract\xe8res-sp\xe9ciaux"},"Les caract\xe8res sp\xe9ciaux"),(0,r.kt)("p",null,"Avez vous une id\xe9e de comment afficher des guillemets ?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main()\n{\n    std::cout << "Hello "IMAC"!" << std::endl;\n    return 0;\n}\n')),(0,r.kt)("p",null,"Si j'essaie d'utiliser des guillemets cela ne compile pas comme dans l'exemple ci-dessus."),(0,r.kt)("p",null,"En effet, les guillemets permettent d\xe9j\xe0 de signaler le d\xe9but et la fin d'une cha\xeene de caract\xe8res."),(0,r.kt)("p",null,'C\'est \xe9galement le cas quand on essaye de repr\xe9senter un chemin de dossier au format Windows, par exemple, avec le chemin de fichier "C:\\Program Files" et on obtient une erreur du type ',(0,r.kt)("inlineCode",{parentName:"p"},"warning: unknown escape sequence: '\\P'"),"."),(0,r.kt)("p",null,"Il existe en ",(0,r.kt)("strong",{parentName:"p"},"C++")," des ",(0,r.kt)("strong",{parentName:"p"},"caract\xe8res")," dits ",(0,r.kt)("strong",{parentName:"p"},"sp\xe9ciaux"),", appel\xe9s s\xe9quences d\u2019\xe9chappement. Le symbole ",(0,r.kt)("kbd",null,"\\")," permet d'indiquer au compilateur d\u2019afficher et non interpr\xe9ter ces caract\xe8res."),(0,r.kt)("p",null,"Il faut donc pr\xe9fixer les guillemets du caract\xe8re ",(0,r.kt)("kbd",null,"\\")," pour pouvoir les afficher:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main()\n{\n    std::cout << "Hello \\"IMAC\\"!" << std::endl;\n    return 0;\n}\n')),(0,r.kt)("p",null,"Vous pouvez trouver tous les caract\xe8res d'\xe9chappement ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/escape"},"ici"),"."),(0,r.kt)("p",null,"Voil\xe0 les plus utiles en pratique:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("kbd",null,"\\'")," qui permet d\u2019afficher un guillemet simple ",(0,r.kt)("kbd",null,"'")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("kbd",null,'\\"')," qui permet d\u2019afficher un guillemet double ",(0,r.kt)("kbd",null,'"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("kbd",null,"\\n")," qui permet d\u2019aller \xe0 la ligne, comme std::endl"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("kbd",null,"\\t")," qui permet de faire une tabulation horizontale"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("kbd",null,"\\\\")," qui permet d\u2019afficher un antislash ",(0,r.kt)("kbd",null,"\\"))),(0,r.kt)("h3",{id:"les-nombres"},"Les nombres"),(0,r.kt)("p",null,"On peut \xe9galement manipuler des nombres."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    std::cout << -1 << std::endl;\n    std::cout << 0 << std::endl;\n    std::cout << 42 << std::endl;\n    return 0;\n}\n")),(0,r.kt)("p",null,"On les appelle ",(0,r.kt)("strong",{parentName:"p"},"nombres entiers")," mais il est aussi possible d'utiliser des nombres \xe0 virgule, appel\xe9s ",(0,r.kt)("strong",{parentName:"p"},"flottants"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    std::cout << 3.141593 << std::endl;\n    std::cout << -1.5 << std::endl;\n    return 0;\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"On remarque que l'on peut utiliser des ",(0,r.kt)("strong",{parentName:"p"},"nombres n\xe9gatifs")," sans aucun probl\xe8me. On y reviendra un peu plus tard.")),(0,r.kt)("p",null,"Concernant les nombres (entiers ou flottants) les ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs arithm\xe9tiques")," usuels sont utilisables:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Op\xe9rateur"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"+"),(0,r.kt)("td",{parentName:"tr",align:null},"Addition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Soustraction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null},"Multiplication")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"/"),(0,r.kt)("td",{parentName:"tr",align:null},"Division")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%"),(0,r.kt)("td",{parentName:"tr",align:null},"Modulo (reste de la division)")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main()\n{\n    std::cout << "Op\xe9rateurs arithm\xe9tiques :" << std::endl;\n    std::cout << "Addition: 1 + 2 = " << 1 + 2 << std::endl;\n    std::cout << "Soustraction: 6 - 2 = " << 6 - 2 << std::endl;\n    std::cout << "Multiplication: 3.14 * 2 = " << 3.14 * 2 << std::endl;\n    std::cout << "Division: 42.5 / 3.2 = " << 42.5 / 3.2 << std::endl;\n    std::cout << "Modulo: 7 % 3 = " << 7 % 3 << std::endl;\n\n    std::cout << "5 / 2 = " << 5 / 2 << std::endl;\n    std::cout << "5. / 2 = " << 5. / 2 << std::endl;\n\n    return 0;\n}\n')),(0,r.kt)("p",null,"C'est aussi vrai pour les r\xe8gles de ",(0,r.kt)("strong",{parentName:"p"},"distributivit\xe9"),", ",(0,r.kt)("strong",{parentName:"p"},"associativit\xe9"),", ",(0,r.kt)("strong",{parentName:"p"},"commutativit\xe9")," ou ",(0,r.kt)("strong",{parentName:"p"},"priorit\xe9 des op\xe9rateurs"),", rien de bien \xe9tonnant me direz vous."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main()\n{\n    td::cout << "Associativit\xe9 :" << std::endl;\n    std::cout << "2 + (3 + 6) = " << 2 + (3 + 6) << std::endl;\n    std::cout << "(2 + 3) + 6 = " << (2 + 3) + 6 << std::endl;\n \n    std::cout << "Distributivit\xe9 :" << std::endl;\n    std::cout << "2 * (4 + 3) = " << 2 * (4 + 3) << std::endl;\n\n    std::cout << "Priorit\xe9 des op\xe9rateurs :" << std::endl;\n    std::cout << "42 * 3 + (2 + 8 / 4) = " << 42 * 3 + (2 + 8 / 4) << std::endl;\n    \n    return 0;\n}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Ne remarquez vous pas quelque chose d'\xe9tonnant ? ",(0,r.kt)("inlineCode",{parentName:"p"},"5 / 2")," et ",(0,r.kt)("inlineCode",{parentName:"p"},"5. / 2")," ne donne pas la m\xeame chose\u202f?"),(0,r.kt)("p",{parentName:"admonition"},"La raison est que pour le ",(0,r.kt)("strong",{parentName:"p"},"C++"),", si on fait une op\xe9ration sur deux nombres entiers, le r\xe9sultat doit ",(0,r.kt)("strong",{parentName:"p"},"rester")," un nombre entier."),(0,r.kt)("p",{parentName:"admonition"},"Si l\u2019on veut que le r\xe9sultat soit un flottant, il faut qu\u2019",(0,r.kt)("strong",{parentName:"p"},"au moins un des deux")," nombres soit un flottant."),(0,r.kt)("p",{parentName:"admonition"},"C'est pour cela d'ailleurs que mon exemple ",(0,r.kt)("inlineCode",{parentName:"p"},"3.14 * 2")," fonctionne bien car au moins un des deux nombres est un flottant et le r\xe9sultat est donc un flottant \xe9galement.")),(0,r.kt)("p",null,"Pour r\xe9sumer, toutes ces valeurs \xe9crites dans notre code s'appellent des ",(0,r.kt)("strong",{parentName:"p"},"litt\xe9raux"),"."),(0,r.kt)("h1",{id:"les-variables"},"Les variables"),(0,r.kt)("p",null,"Les litt\xe9raux c'est sympa mais comment faire si l'on veut se resservir d'un r\xe9sultat pr\xe9c\xe9demment calcul\xe9 ? C'est avec les ",(0,r.kt)("strong",{parentName:"p"},"variables")," que l'on va pouvoir faire \xe7a !"),(0,r.kt)("p",null,"C\u2019est un concept commun \xe0 beaucoup de langages de programmation qui permet de stocker une valeur et de lui associer un nom, afin de pouvoir l'identifier et la manipuler facilement."),(0,r.kt)("p",null,"Nous ne rentrons pas dans le d\xe9tail de comment sont stock\xe9es ces valeurs dans la m\xe9moire de l'ordinateur car ce n'est pas le propos ici."),(0,r.kt)("h2",{id:"cr\xe9er-une-variable"},"Cr\xe9er une variable"),(0,r.kt)("p",null,"Pour d\xe9clarer une variable en ",(0,r.kt)("strong",{parentName:"p"},"C++"),", il faut trois choses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pr\xe9ciser d'abord son ",(0,r.kt)("strong",{parentName:"li"},"type"),", qui indique ce que la variable va stocker (un ",(0,r.kt)("strong",{parentName:"li"},"entier"),", un ",(0,r.kt)("strong",{parentName:"li"},"flottant"),", une ",(0,r.kt)("strong",{parentName:"li"},"cha\xeene de caract\xe8res"),", ",(0,r.kt)("strong",{parentName:"li"},"etc"),")"),(0,r.kt)("li",{parentName:"ul"},"Un ",(0,r.kt)("strong",{parentName:"li"},"nom")," qui permet d'identifier la variable"),(0,r.kt)("li",{parentName:"ul"},"Enfin, la valeur \xe0 stocker dans notre variable. Ceci se fait en mettant la valeur entre accolades ",(0,r.kt)("kbd",null,"{}"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <string>\n\nint main()\n{\n    int number { 42 };\n    char letter { 'A' };\n    float pi { 3.1415927f };\n    double pi_double { 1415926535897931 };\n    std::string text { \"Hello IMAC!\" };\n\n    return 0;\n}\n")),(0,r.kt)("admonition",{title:"Syntaxe h\xe9rit\xe9e",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Il existe \xe9galement une syntaxe alternative, de la forme ",(0,r.kt)("inlineCode",{parentName:"p"},"type nom = valeur;"),". Essayez, vous verrez que \xe7a marche."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    int number = 42;\n    std::cout << number << std::endl;\n\n    return 0;\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Cette syntaxe est ",(0,r.kt)("strong",{parentName:"p"},"h\xe9rit\xe9e du C")," et est ",(0,r.kt)("strong",{parentName:"p"},"toujours valable en C++"),".\nDans ce cours je vous conseille fortement d'utiliser la syntaxe dite ",(0,r.kt)("strong",{parentName:"p"},"moderne")," utilisant les accolades ",(0,r.kt)("strong",{parentName:"p"},"{}"),".\nDe plus la syntaxe avec le symbole ",(0,r.kt)("kbd",null,"=")," a d'autres subtilit\xe9s et peut parfois induire en erreur (des conversions implicites non desir\xe9es par exemple), c'est pourquoi nous ne l'utiliserons pas dans la majorit\xe9 des cas."),(0,r.kt)("p",{parentName:"admonition"},"Ne soyez pas surpris si vous rencontrez cette syntaxe, elle est encore tr\xe8s utilis\xe9e et je l'ai moi m\xeame utilis\xe9 pendant tr\xe8s longtemps.")),(0,r.kt)("h2",{id:"les-types"},"Les types"),(0,r.kt)("p",null,"Dans l'exemple pr\xe9c\xe9dent j'ai utilis\xe9 divers mots-cl\xe9s qui font chacun r\xe9f\xe9rence \xe0 un ",(0,r.kt)("strong",{parentName:"p"},"type")," de variable sp\xe9cifique:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pour les ",(0,r.kt)("strong",{parentName:"li"},"nombres entiers")," c'est le mot-cl\xe9 ",(0,r.kt)("strong",{parentName:"li"},"int"),", (abr\xe9viation de l\u2019anglais ",(0,r.kt)("strong",{parentName:"li"},"int"),"eger signifiant nombre entier). Gr\xe2ce \xe0 ce type, on peut stocker des entiers ",(0,r.kt)("strong",{parentName:"li"},"n\xe9gatifs")," ou ",(0,r.kt)("strong",{parentName:"li"},"positifs"),"."),(0,r.kt)("li",{parentName:"ul"},"Pour les ",(0,r.kt)("strong",{parentName:"li"},"flottants"),"(les nombres \xe0 virgule), nous avons le mot-cl\xe9 ",(0,r.kt)("strong",{parentName:"li"},'"float"'),", (abr\xe9viation de ",(0,r.kt)("strong",{parentName:"li"},"float"),"ing point numbers en anglais). Il existe aussi le mot cl\xe9 ",(0,r.kt)("strong",{parentName:"li"},'"double"')," pour stocker des nombres \xe0 virgule plus pr\xe9cis quand c'est n\xe9cessaire.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Il est recommand\xe9 de faire la distinction entre ",(0,r.kt)("strong",{parentName:"p"},"float")," et ",(0,r.kt)("strong",{parentName:"p"},"double")," en ajoutant le suffixe ",(0,r.kt)("kbd",null,"f")," \xe0 la fin du nombre:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    float pi { 3.141592f };\n    double price { 4.14 };\n\n    return 0;\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"Pour l'instant \xe7a n'a pas beaucoup d'importance mais essayez de le mettre car c'est une bonne pratique et a son importance avec des concepts plus avanc\xe9s en C++.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pour les ",(0,r.kt)("strong",{parentName:"li"},"caract\xe8res"),", nous avons ",(0,r.kt)("strong",{parentName:"li"},"char"),"."),(0,r.kt)("li",{parentName:"ul"},"Pour les ",(0,r.kt)("strong",{parentName:"li"},"cha\xeenes de caract\xe8res")," nous avons ",(0,r.kt)("strong",{parentName:"li"},"std::string"),".")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"mdxAdmonitionTitle"},"Cha\xeene de caract\xe8res")),(0,r.kt)("p",{parentName:"admonition"},"Pour les cha\xeenes de caract\xe8res c'est l\xe9g\xe8rement diff\xe9rent, nous avons le type ",(0,r.kt)("strong",{parentName:"p"},"std::string"),".\nCe type est particulier car il n\u2019existe ",(0,r.kt)("strong",{parentName:"p"},"pas nativement en C++"),".\nPour ceux qui sont attentifs \xe0  ",(0,r.kt)("inlineCode",{parentName:"p"},"std::")," c'est un type issu de la ",(0,r.kt)("strong",{parentName:"p"},"biblioth\xe8que standard")," dont j'ai d\xe9j\xe0 parl\xe9.\nCe sont des programmeurs experts qui ont cod\xe9 ce type afin de manipuler ais\xe9ment des cha\xeenes de caract\xe8res. Afin de pouvoir manipuler des ",(0,r.kt)("strong",{parentName:"p"},"std::string"),", il faut donc inclure le bon fichier, ce que l\u2019on fait gr\xe2ce \xe0 la ligne ",(0,r.kt)("inlineCode",{parentName:"p"},"#include <string>"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\nint main()\n{\n    std::string hello { "Hello IMAC!" };\n    std::cout << hello << std::endl;\n\n    return 0;\n}\n'))),(0,r.kt)("h2",{id:"des-pr\xe9fixes-modificateurs"},"Des pr\xe9fixes modificateurs"),(0,r.kt)("p",null,"Il est possible d'utiliser des mot-cl\xe9s modificateurs sur les ",(0,r.kt)("strong",{parentName:"p"},"entiers")," (type ",(0,r.kt)("strong",{parentName:"p"},"int"),") devant le type de la variable pour alt\xe9rer son fonctionnement (et implicitement la fa\xe7on dont ils sont stock\xe9s en m\xe9moire)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"signed"),": permet d'indiquer que le nombre est sign\xe9 (",(0,r.kt)("kbd",null,"+")," ou ",(0,r.kt)("kbd",null,"-"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"unsigned"),": permet d'indiquer que le nombre n'a pas de signe (une valeur absolue ou une taille)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"short"),": le nombre sera stock\xe9 sur ",(0,r.kt)("strong",{parentName:"p"},"16")," bits minimum (dans le cas des petits nombres)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"long"),": le nombre sera stock\xe9 sur ",(0,r.kt)("strong",{parentName:"p"},"32")," bits minimum (dans le cas de plus grands nombres)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"long long"),": le nombre sera stock\xe9 sur ",(0,r.kt)("strong",{parentName:"p"},"64")," bits minimum"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Ces pr\xe9fixes sont une indication pour le compilateur. Cela donne donc un ",(0,r.kt)("strong",{parentName:"p"},"minimum")," mais le compilateur est libre de choisir une repr\xe9sentation m\xe9moire s'il estime que c'est mieux ou plus adapt\xe9 \xe0 un ordinateur sp\xe9cifique."),(0,r.kt)("hr",{parentName:"admonition"}),(0,r.kt)("p",{parentName:"admonition"},"Pour garantir une taille tr\xe8s pr\xe9cise en m\xe9moire il existe depuis le ",(0,r.kt)("strong",{parentName:"p"},"C++11")," des entiers de taille fix\xe9e (",(0,r.kt)("strong",{parentName:"p"},"Fixed width integer types")," en anglais) disponible dans le fichier \xe0 inclure ",(0,r.kt)("inlineCode",{parentName:"p"},"< cstdint >"),"."),(0,r.kt)("p",{parentName:"admonition"},"On retrouve donc par exemple ",(0,r.kt)("strong",{parentName:"p"},"int16_t")," pour un entier sur ",(0,r.kt)("strong",{parentName:"p"},"16 bits")," ou ",(0,r.kt)("strong",{parentName:"p"},"uint32_t")," pour repr\xe9senter un entier non sign\xe9 de ",(0,r.kt)("strong",{parentName:"p"},"32 bits"),". Une liste exhaustive est disponible ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/types/integer"},"ici"),"."),(0,r.kt)("p",{parentName:"admonition"},"C'est vraiment un usage tr\xe8s sp\xe9cifique et nous allons pas du tout nous en servir.")),(0,r.kt)("h2",{id:"comportement-ind\xe9termin\xe9"},"Comportement ind\xe9termin\xe9"),(0,r.kt)("p",null,"Mais qu'est ce qui se passe si je ne pr\xe9cise rien comme valeur pour ma variable (sans les accolades ",(0,r.kt)("kbd",null,"{}"),") ?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int my_varaible;\n")),(0,r.kt)("p",null,"C'est ce qu'on appelle un ",(0,r.kt)("strong",{parentName:"p"},"comportement ind\xe9termin\xe9"),", en anglais ",(0,r.kt)("strong",{parentName:"p"},'"undefined behaviour"'),". La variable se voit attribu\xe9e une valeur ind\xe9termin\xe9e. Cela peut \xeatre ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," comme ",(0,r.kt)("inlineCode",{parentName:"p"},"142857"),", on ne peut pas le pr\xe9voir."),(0,r.kt)("p",null,"C'est donc quelque chose qu'il faut absolument \xe9viter !"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Le compilateur l'autorise pour des questions d'optimisation et d'h\xe9ritage avec le ",(0,r.kt)("strong",{parentName:"p"},"C"),". Certains warnings de compilation indique ces erreurs.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Il faut toujours initialiser ses variables.")),(0,r.kt)("admonition",{title:"Valeur par d\xe9faut",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Si on ajoute les accolades mais sans pr\xe9ciser de valeur, notre variable va contenir une ",(0,r.kt)("strong",{parentName:"p"},"valeur par d\xe9faut"),"."),(0,r.kt)("p",{parentName:"admonition"},"Ce sera par exemple une cha\xeene de caract\xe8res vide (",(0,r.kt)("inlineCode",{parentName:"p"},'""'),") pour les ",(0,r.kt)("strong",{parentName:"p"},"std::string")," ou un ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," dans le cas d'un ",(0,r.kt)("strong",{parentName:"p"},"entier"),".\nJe vous laisse essayer:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\nint main()\n{\n    std::string default_string { };\n    std::cout << default_string << std::endl; // ""\n\n    int default_int { };\n    std::cout << default_int << std::endl; // 0\n\n    float default_float { };\n    std::cout << default_float << std::endl; // 0.0f\n\n    return 0;\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"Pour commencer, nous \xe9crirons toujours les valeurs explicitement pour \xe9viter de mauvaise surprise..."),(0,r.kt)("p",{parentName:"admonition"},"Plus tard, avec un peu plus de pratique, vous aurez la libert\xe9 d'utiliser l\u2019",(0,r.kt)("strong",{parentName:"p"},"initialisation par d\xe9faut"),", en connaissance de cause.")),(0,r.kt)("h2",{id:"quelques-r\xe8gles-de-nommage"},"Quelques r\xe8gles de nommage"),(0,r.kt)("p",null,"Les noms des variables sont tout de m\xeame soumis \xe0 quelques r\xe8gles de nommage."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Premi\xe8rement, de son origine am\xe9ricaine, le C++ n\u2019autorise que ",(0,r.kt)("strong",{parentName:"p"},"les 26 lettres de l\u2019alphabet")," anglais (plus les ",(0,r.kt)("strong",{parentName:"p"},"chiffres")," et l\u2019",(0,r.kt)("strong",{parentName:"p"},"underscore")," ",(0,r.kt)("kbd",null,"_"),"), on peut donc malheureusement dire adieu \xe0 nos jolis accents fran\xe7ais. Les espaces et les signes de ponctuation sont aussi interdits (",(0,r.kt)("kbd",null,"'"),", ",(0,r.kt)("kbd",null,"?"),", etc).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Il ne peut pas commencer par un chiffre, c\u2019est ",(0,r.kt)("strong",{parentName:"p"},"interdit"),". L'usage de l'underscore ",(0,r.kt)("kbd",null,"_")," au d\xe9but, bien que possible, est conventionnellement utilis\xe9 dans un cadre sp\xe9cifique et je vous d\xe9conseille donc de l'utiliser pour commencer.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Enfin, il n'est pas possible d'utiliser un ",(0,r.kt)("strong",{parentName:"p"},"mot-cl\xe9")," du C++ comme nom de variable. Par exemple, il est ",(0,r.kt)("strong",{parentName:"p"},"interdit")," de d\xe9clarer une variable s\u2019appelant ",(0,r.kt)("strong",{parentName:"p"},"int"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Quelques exemples"',title:'"Quelques','exemples"':!0},"int main()\n{\n    int variable42 { 42 };\n\n    int 42variable { 42 };\n    // Erreur : ne peut pas  commencer par un chiffre.\n\n    int my_variable { 0 };\n\n    int my variable { 0 };\n    // Erreur : espace interdit.\n\n    float result { 2.71f };\n\n    float return { 2.71f };\n    // Erreur : mot-cl\xe9 r\xe9serv\xe9 par le C++\n\n    return 0;\n}\n")),(0,r.kt)("h3",{id:"un-joli-petit-nom"},"Un joli petit nom"),(0,r.kt)("p",null,"Au-del\xe0 des r\xe8gles de nommage, ",(0,r.kt)("strong",{parentName:"p"},"trouver un nom adapt\xe9")," \xe0 une variable est un casse t\xeate que m\xeame les programmeurs exp\xe9riment\xe9s rencontrent."),(0,r.kt)("p",null,"En effet, respecter les r\xe8gles ne suffit pas \xe0 bien nommer une variable. Le nom d'une variable permet de l'",(0,r.kt)("strong",{parentName:"p"},"identifier"),", de ",(0,r.kt)("strong",{parentName:"p"},"comprendre ce qu'elle stocke")," et ",(0,r.kt)("strong",{parentName:"p"},"comment on la manipule"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Le nom d'une variable est destin\xe9 \xe0 un lecteur ",(0,r.kt)("strong",{parentName:"p"},"humain"),". On choisit un nom de variable pour qu'il soit compr\xe9hensible pour nous et nos futurs lecteurs, amis, coll\xe8gues, etc"),(0,r.kt)("p",{parentName:"admonition"},"Une fois le code compil\xe9, l'ordinateur ne fait aucune diff\xe9rence entre un nom ou un autre.")),(0,r.kt)("h3",{id:"quelques-mauvais-exemples"},"Quelques mauvais exemples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"lpi"),": Un acronyme ? Que signifie t'il ?"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value"),": Que stocke-t-elle\u202f? Dans quel contexte\u202f? Pourquoi existe-t-elle\u202f?"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"multiplication_of_two_by_sqrt_of_pi"),": Clair mais un peu trop long."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dIsTanCe"),": Court et compr\xe9hensible mais les majuscules / minuscules peuvent rendre la lecture moins facile."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"qsqffqedfqzdjzqoid"),": Surement un chat qui est pass\xe9 sur mon clavier.")),(0,r.kt)("p",null,"Avec l'exp\xe9rience et le temps vous arriverez \xe0 trouver plus facilement des noms clairs et simples."),(0,r.kt)("p",null,"Je vous demande d\xe8s maintenant de faire quelques efforts pour r\xe9fl\xe9chir aux noms des variables. Cela peut vous sembler peu important, jusqu'au jour o\xf9 vous perdrez une semaine de travail \xe0 comprendre ce que votre programme ou variable est suppos\xe9e faire."),(0,r.kt)("h2",{id:"enum-un-type-suppl\xe9mentaire"},"Enum: Un type suppl\xe9mentaire"),(0,r.kt)("p",null,"Vous allez s\xfbrement le d\xe9couvrir en pratiquant mais parfois on souhaite stocker un nombre limit\xe9 de possibilit\xe9s."),(0,r.kt)("p",null,"Par exemple les points cardinaux (Nord, Sud, Est, Ouest), les saisons (\xe9t\xe9, printemps, automne, hiver), les jours de la semaine, etc"),(0,r.kt)("p",null,"On pourrait bien associer un entier \xe0 chaque possibilit\xe9 (c'est une pratique tr\xe8s r\xe9pandue en ",(0,r.kt)("strong",{parentName:"p"},"C"),") mais ce n'est pas la meilleure fa\xe7on de faire. Un entier peut stocker des valeurs n\xe9gatives ou alors \xeatre sup\xe9rieur au nombre de possibilit\xe9s voulues ce qui n'a pas vraiment de sens."),(0,r.kt)("p",null,"C'est l\xe0 qu'entre en jeu les ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," (de l'anglais ",(0,r.kt)("strong",{parentName:"p"},"Enumeration"),")."),(0,r.kt)("p",null,"On le d\xe9clare en utilisant le pr\xe9fixe ",(0,r.kt)("inlineCode",{parentName:"p"},"enum class")," puis le nom de notre \xe9num\xe9ration suivis des valeurs possibles entre accolades."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Un exemple"',title:'"Un','exemple"':!0},"enum class Season {\n    Spring, \n    Summer, \n    Autumn,\n    Winter,\n};\n\nint main()\n{\n    Season current_season { Season::Spring };\n    return 0;\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"On utilise ici aussi la syntaxe avec ",(0,r.kt)("kbd",null,"::")," pour signifier l'appartenance de la valeur \xe0 l'",(0,r.kt)("strong",{parentName:"p"},"enum")," (de la m\xeame fa\xe7on qu'avec la biblioth\xe8que standard comme avec ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string"),").")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Mais pourquoi le mot cl\xe9 ",(0,r.kt)("strong",{parentName:"p"},"class")," ici ?"),(0,r.kt)("p",{parentName:"admonition"},"Il est \xe9galement possible de l'omettre mais cette syntaxe est un autre \"type\" d'enum h\xe9rit\xe9 du ",(0,r.kt)("strong",{parentName:"p"},"C")," qui a de nombreux incov\xe9nients:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Il n'est pas possible de d\xe9clarer deux enums utilisant la m\xeame valeur (mais dans un contexte diff\xe9rent)."),(0,r.kt)("li",{parentName:"ul"},"D\xe9clarer une variable ayant le m\xeame nom qu'une valeur d'un enum peut avoir des comportements impr\xe9vus.")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nenum PrimaryColor {\n    Red,\n    Yellow,\n    Blue\n};\n\nenum EyesColor {\n    Brown,\n    Hazel,\n    Blue, // Erreur de compilation ici car la valeur Blue est aussi utilis\xe9e dans l'enum PrimaryColor\n    Green,\n    Grey,\n    Amber\n};\n\nint main()\n{\n    \n    // Ici Red fait r\xe9f\xe9rence \xe0 la valeur dans l'enum PrimaryColor\n    std::cout << Red << std::endl;\n    \n    int Red { 35 };\n    \n    // Maintenant, bien que la ligne soit identique, Red fait r\xe9f\xe9rence \xe0 la variable cr\xe9\xe9e ci-dessus\n    std::cout << Red << std::endl;\n\n    return 0;\n}\n")),(0,r.kt)("p",{parentName:"admonition"},'On parle de "',(0,r.kt)("strong",{parentName:"p"},"Scoped enumerations"),'" avec ',(0,r.kt)("inlineCode",{parentName:"p"},"enum class")," (autrement dit ayant une port\xe9e limit\xe9e pour \xe9viter les collisions de valeurs).\nPour faire simple on \xe9crira syst\xe9matiquement ",(0,r.kt)("inlineCode",{parentName:"p"},"enum class")," en ",(0,r.kt)("strong",{parentName:"p"},"C++ moderne")," pour s'\xe9viter des probl\xe8mes.")),(0,r.kt)("h2",{id:"des-op\xe9rateurs-pour-manipuler-nos-variables"},"Des op\xe9rateurs pour manipuler nos variables"),(0,r.kt)("p",null,"Il n'est pas seulement possible d'afficher nos variables (via ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cout"),"), il est aussi possible de faire des op\xe9rations dessus."),(0,r.kt)("p",null,"Pour cela nous allons utiliser des ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs"),"."),(0,r.kt)("p",null,"Les ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs")," sont des ",(0,r.kt)("strong",{parentName:"p"},"symboles")," qui permettent de manipuler des variables, c'est-\xe0-dire effectuer des op\xe9rations, les \xe9valuer, etc."),(0,r.kt)("p",null,"Il y a principalement deux cat\xe9gories d'",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Les op\xe9rateurs ",(0,r.kt)("strong",{parentName:"li"},"binaires")," qui utilisent ",(0,r.kt)("strong",{parentName:"li"},"deux valeurs")," pour en produire une nouvelle (comme ",(0,r.kt)("inlineCode",{parentName:"li"},"a + b")," par exemple)"),(0,r.kt)("li",{parentName:"ul"},"Les op\xe9rateurs ",(0,r.kt)("strong",{parentName:"li"},"unaires")," qui s'appliquent sur ",(0,r.kt)("strong",{parentName:"li"},"une valeur")," pour en produire une nouvelle.")),(0,r.kt)("p",null,"Nous avons par exemple vu pr\xe9c\xe9demment les ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs arithm\xe9tiques")," (",(0,r.kt)("kbd",null,"+"),", ",(0,r.kt)("kbd",null,"-"),", ",(0,r.kt)("kbd",null,"*"),", ",(0,r.kt)("kbd",null,"/")," et ",(0,r.kt)("kbd",null,"%"),") sur les nombres. Ces op\xe9rateurs sont ",(0,r.kt)("strong",{parentName:"p"},"binaires"),"."),(0,r.kt)("h3",{id:"op\xe9rateurs-daffectation"},"Op\xe9rateurs d'affectation"),(0,r.kt)("p",null,"Pour attribuer une nouvelle valeur \xe0 une variable, on utilise l\u2019",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateur d\u2019affectation ",(0,r.kt)("kbd",null,"=")),", pr\xe9c\xe9d\xe9 du nom de la variable et suivi de la valeur \xe0 affecter\u202f: ",(0,r.kt)("inlineCode",{parentName:"p"},"nom = valeur;"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\nint main()\n{\n    int x{ 0 };\n    std::cout << x << std::endl;\n    x = 3;\n    std::cout << x << std::endl;\n\n    return 0;\n}\n")),(0,r.kt)("p",null,"C++ s'occupe en premier lieu de tout ce qui se trouve \xe0 droite du signe ",(0,r.kt)("kbd",null,"="),". On peut donc utiliser la valeur d'une variable pour faire un calcul avant de l'assigner \xe0 cette m\xeame variable."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Dans le cas o\xf9 l'on veut effectuer une op\xe9ration sur une variable et assigner le r\xe9sultat \xe0 cette ",(0,r.kt)("strong",{parentName:"p"},"m\xeame")," variable il existe des op\xe9rateurs binaires nomm\xe9s ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs d'assignation compos\xe9s"),"."),(0,r.kt)("p",null,"On retrouve principalement ces op\xe9rateurs compos\xe9es avec les op\xe9rateurs ",(0,r.kt)("strong",{parentName:"p"},"arithm\xe9tiques"),":"),(0,r.kt)("kbd",null,"+="),", ",(0,r.kt)("kbd",null,"-="),", ",(0,r.kt)("kbd",null,"*="),", ",(0,r.kt)("kbd",null,"/=")," et ",(0,r.kt)("kbd",null,"%="),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'int integer { 42 };\n\n// \xe9quivalent \xe0 \xe9crire "integer = integer + 3"\ninteger += 3;\n\ninteger -= 1;\ninteger *= 4;\ninteger /= 2;\ninteger %= 2;\n')),(0,r.kt)("p",null,"Il existe d'autres ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs d'affectation compos\xe9s")," mais nous les d\xe9couvrirons le moment venu."),(0,r.kt)("h3",{id:"op\xe9rateurs-dincr\xe9mentation"},"Op\xe9rateurs d'incr\xe9mentation"),(0,r.kt)("p",null,"Cela va m\xeame plus loin, il existe un raccourci suppl\xe9mentaire lorsque l'on souhaite ajouter ou soustraire ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," \xe0 un nombre.\nOn parle d'",(0,r.kt)("strong",{parentName:"p"},"incr\xe9mentation")," et de ",(0,r.kt)("strong",{parentName:"p"},"d\xe9cr\xe9mentation"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"a++")," ou ",(0,r.kt)("strong",{parentName:"li"},"++a")," pour incr\xe9menter de ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"  la valeur de la variable ",(0,r.kt)("inlineCode",{parentName:"li"},"a"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"a--")," ou ",(0,r.kt)("strong",{parentName:"li"},"--a")," pour d\xe9cr\xe9menter de ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"  la valeur de la variable ",(0,r.kt)("inlineCode",{parentName:"li"},"a"),".")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Les deux syntaxes sont quasiment \xe9quivalentes, il y a une petite diff\xe9rence lorsque l'on souhaite utiliser le r\xe9sultat de l'incr\xe9mentation:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"On parle de ",(0,r.kt)("strong",{parentName:"li"},"Post-incr\xe9mentation")," avec ",(0,r.kt)("strong",{parentName:"li"},"a++"),":\nCette forme signifie que la variable ",(0,r.kt)("strong",{parentName:"li"},"a")," est d'abord utilis\xe9e, ",(0,r.kt)("strong",{parentName:"li"},"puis")," elle est incr\xe9ment\xe9e de 1. Cela signifie que l'effet de l'incr\xe9mentation ne sera visible qu'apr\xe8s l'\xe9valuation de l'expression qui contient ",(0,r.kt)("strong",{parentName:"li"},"a++"),".")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a { 5 };\nint result { a++ }; // result prend la valeur de a (5) puis a est incr\xe9ment\xe9 \xe0 6.\n// Maintenant, a vaut 6 et result vaut 5.\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"On parle de ",(0,r.kt)("strong",{parentName:"li"},"Pr\xe9-incr\xe9mentation")," avec ",(0,r.kt)("strong",{parentName:"li"},"++a"),":\nCette forme signifie que la variable ",(0,r.kt)("strong",{parentName:"li"},"a")," est d'abord incr\xe9ment\xe9e, ",(0,r.kt)("strong",{parentName:"li"},"puis")," cette nouvelle valeur est utilis\xe9e. Cela signifie que l'effet de l'incr\xe9mentation sera visible imm\xe9diatement dans l'expression qui contient ",(0,r.kt)("strong",{parentName:"li"},"++a"),".")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a { 5 };\nint result { ++a }; // a est incr\xe9ment\xe9 \xe0 6, puis result prend la nouvelle valeur de a (6).\n// Maintenant, a et result valent tous les deux 6.\n")),(0,r.kt)("p",{parentName:"admonition"},"En r\xe9sum\xe9, la seule diff\xe9rence entre les deux formes r\xe9side dans le moment o\xf9 l'incr\xe9mentation est r\xe9alis\xe9e (avant ou apr\xe8s l'utilisation de sa valeur actuelle). Lorsque vous voulez r\xe9cup\xe9rer le r\xe9sultat de l'incr\xe9mentation, assurez-vous de choisir celle qui convient le mieux \xe0 votre situation pour obtenir le comportement souhait\xe9 dans votre programme."),(0,r.kt)("p",{parentName:"admonition"},"Dans la plupart des cas, je vous recommande tout simplement de ne ",(0,r.kt)("strong",{parentName:"p"},"pas l'utiliser"),"! C'est une grosse source d\u2019erreurs. Faites plut\xf4t:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a { 5 };\na++;\nint result { a };\n")),(0,r.kt)("p",{parentName:"admonition"},"ou "),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a { 5 };\nint result { a };\na++;\n")),(0,r.kt)("p",{parentName:"admonition"},"Aussi, je recommandes m\xeame d\u2019utiliser ",(0,r.kt)("inlineCode",{parentName:"p"},"a += 1")," \xe0 la place. Comme \xe7a pas de surprise on est certain de ce qu\u2019on fait."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a { 5 };\na += 1;\nint result { a };\n"))),(0,r.kt)("h3",{id:"quelques-exemples"},"Quelques exemples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nint main()\n{\n    int variable { 42 };\n    std::cout << variable << std::endl;\n    \n    // Je donne une nouvelle valeur \xe0 ma variable \n    variable = 2 + (3 * 9);\n    std::cout << variable << std::endl;\n    \n    // J'utilise la valeur de ma variable pour un calcul et r\xe9affecte le r\xe9sultat \xe0 la m\xeame variable\n    variable = variable + 7;\n    std::cout << variable << std::endl;\n    \n    // Je me sers de ma variable pour en cr\xe9er une nouvelle\n    int other_value { variable * 3 };\n    std::cout << other_value << std::endl;\n    std::cout << variable << std::endl;\n\n    // Je peux utiliser d'autres variables \xe9galement\n    variable = other_value - 1;\n    std::cout << variable << std::endl;\n\n    // Je peux incr\xe9menter ma variable de deux fa\xe7ons\n    variable += 1;\n    variable++;\n    std::cout << variable << std::endl;\n\n    return 0;\n}\n")),(0,r.kt)("h2",{id:"variables-constantes"},"Variables constantes"),(0,r.kt)("p",null,"Il existe enfin un dernier mot cl\xe9 important, le mot cl\xe9 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"const")),".\nIl va permettre, comme son nom l'indique, de rendre constant une variable et ainsi emp\xeacher toute modification de celle-ci.\nSi l\u2019on essaye de modifier une constante, on obtient une erreur de compilation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int main()\n{\n    float const gravity { 9.80665f };\n    gravity = 9.0f; // Erreur de compilation\n\n    return 0;\n}\n")),(0,r.kt)("p",null,"Pour l'instant cela ne va pas \xeatre tr\xe8s utile. Mais c'est une tr\xe8s (tr\xe8s (tr\xe8s)) bonne pratique et permet de prot\xe9ger des variables et donner des contraintes fortes \xe0 notre code.\nJe vais l'utiliser r\xe9guli\xe8rement dans des exemples et on d\xe9couvrira ensemble plus tard o\xf9 cela prendra vraiment toute son importance d'utiliser des ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," ",(0,r.kt)("strong",{parentName:"p"},"d\xe8s que possible"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Vous verrez souvent des codes qui inversent l\u2019ordre de ",(0,r.kt)("strong",{parentName:"p"},"const")," et \xe9crivent ",(0,r.kt)("strong",{parentName:"p"},"const float variable {};"),".\nC'est tout \xe0 fait possible car le ",(0,r.kt)("strong",{parentName:"p"},"const")," respecte la r\xe8gle suivante :\nIl s\u2019applique \xe0 ce qui est \xe0 ",(0,r.kt)("strong",{parentName:"p"},"sa gauche"),", ",(0,r.kt)("strong",{parentName:"p"},"sauf")," s\u2019il n\u2019y a rien, auquel cas il s\u2019applique \xe0 ce qu\u2019il y a \xe0 droite.\nJe vais le placer \xe0 droite dans la suite de ce cours car c'est le fonctionnement voulu initialement du ",(0,r.kt)("strong",{parentName:"p"},"const"),".\nC'est une question de pr\xe9f\xe9rence et de lisibilit\xe9, vous \xeates libre de choisir ce que vous pr\xe9f\xe9rez.")),(0,r.kt)("h2",{id:"entr\xe9e--sortie"},"Entr\xe9e / Sortie"),(0,r.kt)("p",null,"Jusque l\xe0, nous avons r\xe9guli\xe8rement rencontr\xe9 ",(0,r.kt)("strong",{parentName:"p"},"std::cout")," qui nous permet d'afficher des caract\xe8res."),(0,r.kt)("p",null,"Il est \xe9galement possible de faire l'inverse en manipulant ce qu'on appelle une ",(0,r.kt)("strong",{parentName:"p"},"entr\xe9e"),"."),(0,r.kt)("p",null,"Gr\xe2ce aux variables, il est possible de demander des informations \xe0 l\u2019utilisateur et de stocker cette information afin d'en faire quelque chose."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main()\n{\n    std::cout << "Entre ton age : " << std::endl;\n    int age { 0 };\n    std::cin >> age;\n    std::cout << "Tu as " << age << " ans." << std::endl;\n\n    return 0;\n}\n')),(0,r.kt)("p",null,"Ici ",(0,r.kt)("strong",{parentName:"p"},"std::cin"),' est tr\xe8s similaire \xe0 std::cout et signifie "',(0,r.kt)("strong",{parentName:"p"},"c"),"haracter ",(0,r.kt)("strong",{parentName:"p"},"in"),'put".'),(0,r.kt)("p",null,"Il faut le pr\xe9fixer par ",(0,r.kt)("inlineCode",{parentName:"p"},"std::"),", car lui aussi appartient \xe0 la biblioth\xe8que standard. De plus, on utilise ici les chevrons ",(0,r.kt)("kbd",null,">>"),' dans le sens inverse pour signifier que l\'on "ins\xe8re"" ce qui vient de notre entr\xe9e pour le stocker dans notre variable.'),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Dans notre cas le ",(0,r.kt)("strong",{parentName:"p"},"C++")," comprend que c'est un nombre et le convertit en entier (int)."),(0,r.kt)("p",{parentName:"admonition"},"Mais que se passe t'il si l'on entre des lettres ?"),(0,r.kt)("p",{parentName:"admonition"},"Dans ce cas de figure ",(0,r.kt)("strong",{parentName:"p"},"la variable (",(0,r.kt)("inlineCode",{parentName:"strong"},"age")," ici) n'est pas modifi\xe9e"),". Mais pas seulement, ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin")," n'arrive pas \xe0 convertir notre entr\xe9e, il passe dans un \xe9tat invalide, m\xe9morise tous les caract\xe8res invalides et toutes les utilisations suivantes de ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin")," seront \xe9rron\xe9es."),(0,r.kt)("p",{parentName:"admonition"},"Nous verrons plus tard comment g\xe9rer ce cas de figure et d\xe9tecter si une erreur survient.")),(0,r.kt)("h2",{id:"cast"},"Cast"),(0,r.kt)("p",null,"Il est possible de convertir un ",(0,r.kt)("strong",{parentName:"p"},"type")," en un autre ",(0,r.kt)("strong",{parentName:"p"},"type"),". C'est ce qu'on appelle un ",(0,r.kt)("strong",{parentName:"p"},"cast"),"."),(0,r.kt)("p",null,"Il existe plusieurs types de ",(0,r.kt)("strong",{parentName:"p"},"cast")," dont le plus courant est le ",(0,r.kt)("strong",{parentName:"p"},"cast")," statique (",(0,r.kt)("strong",{parentName:"p"},"static_cast"),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"static_cast")," permet de ",(0,r.kt)("strong",{parentName:"p"},"convertir")," un type en un autre type. Par exemple, un ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," en ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),". C'est un ",(0,r.kt)("strong",{parentName:"p"},"cast")," s\xfbr car il fait des v\xe9rifications. Il est \xe0 utiliser par d\xe9faut pour les ",(0,r.kt)("strong",{parentName:"p"},"conversions")," de type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main()\n{\n    int integer {42};\n    float floating {3.14f};\n\n    float floatingFromInteger {static_cast<float>(integer)};\n    int integerFromFloating {static_cast<int>(floating)};\n\n    std::cout << "integer: " << integer << std::endl;\n    std::cout << "floating: " << floating << std::endl;\n\n    // static_cast\n    std::cout << "static_cast<float>(integer): " << floatingFromInteger << std::endl;\n    std::cout << "static_cast<int>(floating): " << integerFromFloating << std::endl;\n\n    return 0;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"integer: 42\nfloating: 3.14\nstatic_cast<float>(integer): 42\nstatic_cast<int>(floating): 3\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Il existe \xe9galement un cast h\xe9rit\xe9 du ",(0,r.kt)("strong",{parentName:"p"},"C")," qui s'effectue avec des parenth\xe8ses (",(0,r.kt)("kbd",null," ( ) "),") autour du type vers lequel on veut caster devant la variable \xe0 caster."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\nint integer {42};\nfloat floating {3.14f};\n\nfloat floatingFromInteger {(float)integer};\nint integerFromFloating {(int)floating};\n")),(0,r.kt)("p",{parentName:"admonition"},"Il est \xe0 \xe9viter car il est dangereux et fonctionne de diff\xe9rentes mani\xe8res en fonction des cas sans v\xe9rifications et peut donc provoquer des erreurs ou comportements inattendus.")),(0,r.kt)("h2",{id:"en-r\xe9sum\xe9"},"En r\xe9sum\xe9"),(0,r.kt)("p",null,"Nous venons de d\xe9couvrir les variables en ",(0,r.kt)("strong",{parentName:"p"},"C++"),". C'est la base de tout programme informatique, ce qui permet d'\xe9changer et de manipuler des informations."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"C++ nous permet de manipuler diff\xe9rents ",(0,r.kt)("strong",{parentName:"p"},"types")," de donn\xe9es:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"des caract\xe8res simples (",(0,r.kt)("strong",{parentName:"li"},"char"),")"),(0,r.kt)("li",{parentName:"ul"},"des cha\xeenes de caract\xe8res (via ",(0,r.kt)("strong",{parentName:"li"},"std::string"),")"),(0,r.kt)("li",{parentName:"ul"},"des nombres entiers (",(0,r.kt)("strong",{parentName:"li"},"int"),")"),(0,r.kt)("li",{parentName:"ul"},"des nombres r\xe9els (",(0,r.kt)("strong",{parentName:"li"},"float")," ou ",(0,r.kt)("strong",{parentName:"li"},"double"),")"),(0,r.kt)("li",{parentName:"ul"},"Des \xe9num\xe9rations (avec ",(0,r.kt)("strong",{parentName:"li"},"enum class"),")"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Il est possible d'utiliser toutes les op\xe9rations usuelles qui existent sur les nombres.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Les ",(0,r.kt)("strong",{parentName:"p"},"variables")," nous permettent de ",(0,r.kt)("strong",{parentName:"p"},"stocker")," des valeurs et d'y ",(0,r.kt)("strong",{parentName:"p"},"associer un nom")," (en tenant compte de certaines r\xe8gles de nommage).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Il est ",(0,r.kt)("strong",{parentName:"p"},"important")," de choisir un nom de variable qui a du sens et le plus simple possible.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Il est possible de sp\xe9cifier qu'une variable est non modifiable avec le mot-cl\xe9 ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"On utilise des ",(0,r.kt)("strong",{parentName:"p"},"op\xe9rateurs")," pour manipuler nos variables.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Il est possible de convertir un type en un autre type. C'est ce qu'on appelle un ",(0,r.kt)("strong",{parentName:"p"},"cast"),". Le plus courant est le ",(0,r.kt)("strong",{parentName:"p"},"cast")," statique (",(0,r.kt)("strong",{parentName:"p"},"static_cast"),"). Il fait des v\xe9rifications et est donc plus s\xfbr. Il est \xe0 utiliser par d\xe9faut pour les ",(0,r.kt)("strong",{parentName:"p"},"conversions")," de type.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Nous pouvons demander des informations \xe0 l\u2019utilisateur gr\xe2ce \xe0 ",(0,r.kt)("strong",{parentName:"p"},"std::cin"),"."))))}d.isMDXComponent=!0}}]);