"use strict";(self.webpackChunkprogramming_support_courses=self.webpackChunkprogramming_support_courses||[]).push([[9383],{76488:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var i=s(85893),r=s(11151);const t={title:"Des conditions et des boucles",tags:["C++"]},l=void 0,o={id:"Lessons/S1/ConditionsAndLoops",title:"Des conditions et des boucles",description:"On sait maintenant comment stocker des valeurs dans des variables et comment les manipuler avec des op\xe9rations math\xe9matiques. Mais il est temps de voir comment on peut contr\xf4ler l'ex\xe9cution de notre programme en fonction de conditions et de r\xe9p\xe9ter des instructions plusieurs fois.",source:"@site/content/Lessons/S1/03_ConditionsAndLoops.md",sourceDirName:"Lessons/S1",slug:"/Lessons/S1/ConditionsAndLoops",permalink:"/Learn--cpp_programming/Lessons/S1/ConditionsAndLoops",draft:!1,unlisted:!1,tags:[{inline:!0,label:"C++",permalink:"/Learn--cpp_programming/tags/c"}],version:"current",sidebarPosition:3,frontMatter:{title:"Des conditions et des boucles",tags:["C++"]},sidebar:"Lessons",previous:{title:"Un monde de variables",permalink:"/Learn--cpp_programming/Lessons/S1/Variables"},next:{title:"Des tableaux",permalink:"/Learn--cpp_programming/Lessons/S1/Arrays"}},c={},d=[{value:"Conditions",id:"conditions",level:2},{value:"Les valeurs bool\xe9ennes",id:"les-valeurs-bool\xe9ennes",level:3},{value:"La logique bool\xe9enne",id:"la-logique-bool\xe9enne",level:3},{value:"NOT: La n\xe9gation",id:"not-la-n\xe9gation",level:4},{value:"AND",id:"and",level:4},{value:"OR",id:"or",level:4},{value:"Des structures de contr\xf4le",id:"des-structures-de-contr\xf4le",level:3},{value:"Si",id:"si",level:4},{value:"Sinon",id:"sinon",level:4},{value:"Sinon si",id:"sinon-si",level:4},{value:"Faux-ami",id:"faux-ami",level:3},{value:"Combinaison d&#39;expressions",id:"combinaison-dexpressions",level:3},{value:"Pour aller plus loin: Alg\xe8bre de Boole",id:"pour-aller-plus-loin-alg\xe8bre-de-boole",level:4},{value:"Switch",id:"switch",level:3},{value:"Boucles",id:"boucles",level:2},{value:"While - &quot;Tant que ...&quot;",id:"while---tant-que-",level:3},{value:"Do while",id:"do-while",level:3},{value:"For",id:"for",level:3},{value:"Contr\xf4ler l&#39;ex\xe9cution",id:"contr\xf4ler-lex\xe9cution",level:3},{value:"Break",id:"break",level:4},{value:"Continue",id:"continue",level:4},{value:"En r\xe9sum\xe9",id:"en-r\xe9sum\xe9",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"On sait maintenant comment stocker des valeurs dans des variables et comment les manipuler avec des op\xe9rations math\xe9matiques. Mais il est temps de voir comment on peut contr\xf4ler l'ex\xe9cution de notre programme en fonction de conditions et de r\xe9p\xe9ter des instructions plusieurs fois."}),"\n",(0,i.jsxs)(n.p,{children:["Le C++ va nous permettre d'exprimer des ",(0,i.jsx)(n.strong,{children:"conditions"})," sur les valeurs de nos variables afin d'ex\xe9cuter des instructions diff\xe9rentes en fonction du r\xe9sultat des conditions."]}),"\n",(0,i.jsx)(n.h2,{id:"conditions",children:"Conditions"}),"\n",(0,i.jsx)(n.h3,{id:"les-valeurs-bool\xe9ennes",children:"Les valeurs bool\xe9ennes"}),"\n",(0,i.jsxs)(n.p,{children:["J'ai omis un type lors du pr\xe9c\xe9dent chapitre, il s'agit du ",(0,i.jsx)(n.strong,{children:"type bool\xe9en"}),", il s'utilise avec le mot cl\xe9 ",(0,i.jsx)(n.strong,{children:"bool"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Ce type peut prendre deux valeurs: soit ",(0,i.jsx)(n.strong,{children:"true"}),", signifiant vrai, soit ",(0,i.jsx)(n.strong,{children:"false"})," qui veut dire faux. C'est donc id\xe9al pour stocker le r\xe9sultat d'une condition."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Voici un petit exemple"',children:"int main()\n{\n    bool const condition { true };\n    return 0;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Cela va devenir int\xe9ressant gr\xe2ce \xe0 ce que l'on appelle les ",(0,i.jsx)(n.strong,{children:"op\xe9rateurs de comparaison"}),"."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Op\xe9rateur"}),(0,i.jsx)(n.th,{children:"Signification"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"=="}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"\xc9galit\xe9"}),", compare si deux variables sont ",(0,i.jsx)(n.strong,{children:"\xe9gales"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"!="}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"In\xe9galit\xe9"}),", compare si deux variables sont ",(0,i.jsx)(n.strong,{children:"diff\xe9rentes"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"<"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Strictement inf\xe9rieur"}),", compare si la variable de gauche est ",(0,i.jsx)(n.strong,{children:"strictement inf\xe9rieure"})," \xe0 celle de droite"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"<="}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Inf\xe9rieur ou \xe9gal"}),", compare si la variable de gauche est ",(0,i.jsx)(n.strong,{children:"inf\xe9rieure ou \xe9gale"})," \xe0 celle de droite"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:">"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Strictement sup\xe9rieur"}),", compare si la variable de gauche est ",(0,i.jsx)(n.strong,{children:"strictement sup\xe9rieure"})," \xe0 celle de droite"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:">="}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Sup\xe9rieur ou \xe9gal"}),", compare si la variable de gauche est ",(0,i.jsx)(n.strong,{children:"sup\xe9rieure ou \xe9gale"})," \xe0 celle de droite"]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Ces op\xe9rateurs vont nous permettre de cr\xe9er des conditions (des valeurs bool\xe9ennes) \xe0 partir de nos autres variables."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nint main()\n{\n    float const a { 10.0f };\n    float const b { 20.0f };\n\n    std::cout << a << " == " << b << " donne " << (a == b) << std::endl;\n    std::cout << a << " != " << b << " donne " << (a != b) << std::endl;\n    std::cout << a << " < " << b << " donne " << (a < b) << std::endl;\n    std::cout << a << " <= " << b << " donne " << (a <= b) << std::endl;\n\n    // On peut aussi stocker le r\xe9sultat de la condition dans une variable bool\xe9enne\n    float const price { 24.5f };\n    bool const is_too_expensive { price >= 100.f };\n\n    return 0;\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["Par d\xe9faut, ",(0,i.jsx)(n.code,{children:"std::cout"})," affiche 1 pour une condition vraie (true) et 0 pour une condition fausse (false)."]}),(0,i.jsxs)(n.p,{children:['Il est possible de changer ce comportement en ajoutant un "modificateur" sur le stream ',(0,i.jsx)(n.code,{children:"std::cout"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nint main()\n{\n    float const a { 10.0f };\n    float const b { 20.0f };\n\n    std::cout << std::boolalpha;\n    std::cout << a << " == " << b << " donne " << (a == b) << std::endl;\n\n    return 0;\n}\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"la-logique-bool\xe9enne",children:"La logique bool\xe9enne"}),"\n",(0,i.jsxs)(n.p,{children:["Maintenant que nous disposons d'un moyen d'obtenir une valeur bool\xe9enne (via les op\xe9rateurs de comparaison) nous allons pouvoir manipuler ces valeurs avec ce que l'on nomme des ",(0,i.jsx)(n.strong,{children:"op\xe9rateurs logiques"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Ces op\xe9rateurs vont permettre de combiner et modifier des valeurs bool\xe9ennes afin d'en obtenir d'autres et faire ce que l'on appelle plus g\xe9n\xe9ralement de l\u2019",(0,i.jsx)(n.strong,{children:"alg\xe8bre bool\xe9enne"}),".\nMais ne vous inqui\xe9tez pas, derri\xe8re ce nom tr\xe8s math\xe9matique se cache des choses tr\xe8s simples."]}),"\n",(0,i.jsx)(n.h4,{id:"not-la-n\xe9gation",children:"NOT: La n\xe9gation"}),"\n",(0,i.jsxs)(n.p,{children:["L'op\xe9rateur ",(0,i.jsx)(n.code,{children:"!"})," (plac\xe9 devant une valeur bool\xe9enne) permet d'exprimer la n\xe9gation d'une condition."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["C'est ici un op\xe9rateur dit ",(0,i.jsx)(n.strong,{children:"unaire"})," (qui s'applique sur une seule valeur) et donne en retour la condition inverse."]})}),"\n",(0,i.jsxs)(n.p,{children:["Voici ce qu\u2019on appelle la ",(0,i.jsx)(n.strong,{children:"table de v\xe9rit\xe9"})," de l\u2019op\xe9rateur ",(0,i.jsx)(n.strong,{children:"NOT"}),", qui formalise les entr\xe9es et les sorties de cet op\xe9rateur."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"A"}),(0,i.jsx)(n.th,{children:"R\xe9sultat"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"false"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"true"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"float price { 114.2f };\nbool isExpensive { price >= 100.f };\n\nbool isCheap { !isExpensive };\n"})}),"\n",(0,i.jsx)(n.h4,{id:"and",children:"AND"}),"\n",(0,i.jsxs)(n.p,{children:["L'op\xe9rateur ",(0,i.jsx)(n.code,{children:"&&"})," (plac\xe9 entre deux valeurs bool\xe9ennes) permet d'exprimer la validit\xe9 de deux conditions ",(0,i.jsx)(n.strong,{children:"en m\xeame temps"}),".\nOn peut l'interpr\xe9ter en fran\xe7ais par : \"ma condition1 est vraie ",(0,i.jsx)(n.strong,{children:"ET"}),' ma condition2 est aussi vraie".']}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"A"}),(0,i.jsx)(n.th,{children:"B"}),(0,i.jsx)(n.th,{children:"R\xe9sultat"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"false"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"false"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"false"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"or",children:"OR"}),"\n",(0,i.jsxs)(n.p,{children:["L'op\xe9rateur ",(0,i.jsx)(n.code,{children:"||"})," (plac\xe9 entre deux valeurs bool\xe9ennes) permet d'exprimer si ",(0,i.jsx)(n.strong,{children:"au moins une des deux"})," conditions est ",(0,i.jsx)(n.strong,{children:"vraie"}),".\nOn peut l'interpr\xe9ter en fran\xe7ais par : \"ma condition1 est vraie ",(0,i.jsx)(n.strong,{children:"OU"}),' ma condition2 est vraie".']}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"A"}),(0,i.jsx)(n.th,{children:"B"}),(0,i.jsx)(n.th,{children:"R\xe9sultat"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"false"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["Il est \xe9galement possible d'utiliser les mots-cl\xe9s ",(0,i.jsx)(n.code,{children:"and"}),", ",(0,i.jsx)(n.code,{children:"or"})," et ",(0,i.jsx)(n.code,{children:"not"})," pour remplacer respectivement les op\xe9rateurs ",(0,i.jsx)(n.code,{children:"&&"}),", ",(0,i.jsx)(n.code,{children:"||"})," et ",(0,i.jsx)(n.code,{children:"!"}),"."]}),(0,i.jsx)(n.p,{children:"C'est possible mais tr\xe8s peu r\xe9pandu en C++ c'est pourquoi je ne l'utiliserai pas personnellement mais sachez que \xe7a existe \xe9galement."}),(0,i.jsxs)(n.p,{children:["Avec de vielles versions de Visual Studio il est possible que cette syntaxe ne fonctionne pas et dans ce cas il faut inclure le fichier ",(0,i.jsx)(n.code,{children:"<ciso646>"}),"."]})]}),"\n",(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsxs)(n.p,{children:["Pour l'op\xe9rateur ",(0,i.jsx)(n.strong,{children:"AND"})," (",(0,i.jsx)(n.code,{children:"&&"}),") on note qu'il y a bien deux fois le symbole ",(0,i.jsx)("kbd",{children:"&"}),". C'est tr\xe8s important car il existe un autre op\xe9rateur (avec un seul ",(0,i.jsx)(n.strong,{children:"&"}),") qui fait tout autre chose.\nJe ne d\xe9taillerai pas dans ce chapitre son utilit\xe9 mais il est important de le souligner car c'est une erreur qui arrive fr\xe9quemment."]}),(0,i.jsxs)(n.p,{children:["De m\xeame pour l'op\xe9rateur ",(0,i.jsx)(n.strong,{children:"OR"})," (",(0,i.jsx)(n.code,{children:"||"}),") diff\xe9rent de ",(0,i.jsx)("kbd",{children:"|"}),"."]})]}),"\n",(0,i.jsx)(n.h3,{id:"des-structures-de-contr\xf4le",children:"Des structures de contr\xf4le"}),"\n",(0,i.jsx)(n.p,{children:"C'est bien beau toutes ces valeurs bool\xe9ennes mais comment on peut s'en servir pour ex\xe9cuter une partie d'un code ou un autre en fonction d'une condition ?"}),"\n",(0,i.jsx)(n.h4,{id:"si",children:"Si"}),"\n",(0,i.jsxs)(n.p,{children:["Notre premi\xe8re structure de contr\xf4le va s'utiliser avec le mot cl\xe9 ",(0,i.jsx)(n.strong,{children:"if"}),".\nDe l'anglais, ce mot cl\xe9 signifiant ",(0,i.jsx)(n.strong,{children:'"si"'}),", ex\xe9cute des instructions si et seulement si la condition donn\xe9e est vraie."]}),"\n",(0,i.jsx)(n.p,{children:"Un petit sch\xe9ma d'explications:"}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart\n\nA( ) --\x3e B{Condition}\nB --\x3e|false| D( )\nB --\x3e|true| C[bloc d'instructions]\n\nC --\x3e D\nD --\x3e|suite du programme| F( )"}),"\n",(0,i.jsx)(n.p,{children:"Voil\xe0 comment l'utiliser. Toutes les instructions entre accolades seront ex\xe9cut\xe9es si la condition est vraie."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"if( /* condtion */ )\n{\n    // ...\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Un petit exemple"',children:'#include <iostream>\nint main()\n{\n    float price { 114.2f };\n\n    if ( price >= 100.f )\n    {\n        // appliquer une r\xe9duction si l\'on d\xe9passe un certain prix\n        price *= 0.9f;\n    }\n\n    std::cout << "Le prix final est de " << price << "\u20ac" << std::endl;\n\n    return 0;\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsxs)(n.p,{children:["Il est possible de cr\xe9er des variables \xe0 l'int\xe9rieur m\xeame des accolades de la structure de contr\xf4le mais celles-ci sont restreintes \xe0 cette ",(0,i.jsx)(n.strong,{children:"port\xe9e"}),".\nC'est ce qu'on appelle la port\xe9e des variables (",(0,i.jsx)(n.strong,{children:"scope"})," en anglais)."]}),(0,i.jsxs)(n.p,{children:["Plus g\xe9n\xe9ralement, cette r\xe8gle du C++ s'applique \xe0 n'importe quel bloc entre accolades.\n",(0,i.jsx)(n.strong,{children:"Une variable n\u2019est utilisable que dans la port\xe9e, ou le bloc d\u2019accolades o\xf9 elle a \xe9t\xe9 d\xe9clar\xe9e."})]}),(0,i.jsx)(n.p,{children:"Nous en reparlerons plus en d\xe9tail dans d'autres chapitres."})]}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.p,{children:"Il n'est pas tr\xe8s utile de tester par une \xe9galit\xe9 le r\xe9sultat d'une condition :"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"float const price { 114.2f };\nbool const isExpensive { price >= 100.f };\n\nif ( isExpensive == true )\n{\n    // ...\n}\n"})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"isExpensive"})," ici \xe9tant d\xe9j\xe0 une valeur bool\xe9enne ajouter une \xe9galit\xe9 suppl\xe9mentaire avec la valeur ",(0,i.jsx)(n.code,{children:"true"})," ne va rien faire d'autre que de cr\xe9er une nouvelle valeur bool\xe9enne qui a la m\xeame valeur."]}),(0,i.jsx)(n.p,{children:"Il est donc plus clair et concis d'\xe9crire directement:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"bool const isExpensive { price >= 100.f };\n\nif ( isExpensive )\n{\n    // ...\n}\n"})})]}),"\n",(0,i.jsx)(n.h4,{id:"sinon",children:"Sinon"}),"\n",(0,i.jsx)(n.p,{children:"C'est tr\xe8s bien de pouvoir effectuer quelque chose si une condition est v\xe9rif\xe9e mais comment faire si l'on veut effectuer une action A si la condition est v\xe9rif\xe9e et une autre action B si ce n'est pas le cas ?"}),"\n",(0,i.jsxs)(n.p,{children:["On pourrait tr\xe8s bien encha\xeener deux ",(0,i.jsx)(n.code,{children:"if"})," avec la condition oppos\xe9e:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nint main()\n{\n    float temperature { 24.0f };\n\n    if ( temperature >= 35.f )\n    {\n        std::cout << "il fait chaud" << std::endl;\n    }\n\n    if ( temperature < 35.f )\n    {\n        std::cout << "il fait froid" << std::endl;\n    }\n\n    return 0;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Mais c'est l\xe0 que le mot-cl\xe9 ",(0,i.jsx)(n.code,{children:"else"})," (de l'anglais \"sinon\") nous permet d'ex\xe9cuter des instructions si la condition du ",(0,i.jsx)(n.code,{children:"if"})," est fausse de mani\xe8re plus compr\xe9hensible:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nint main()\n{\n    float temperature { 24.0f };\n\n    if ( temperature >= 35.f )\n    {\n        std::cout << "il fait chaud" << std::endl;\n    }\n    else\n    {\n        std::cout << "il fait froid" << std::endl;\n    }\n\n    return 0;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Ici le ",(0,i.jsx)(n.strong,{children:"else"}),' n\'a pas de parenth\xe8se et indique donc "tout le reste" (ce qui ne v\xe9rifie pas la condition).']}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["L'op\xe9rateur logique de n\xe9gation ",(0,i.jsx)("kbd",{children:"!"})," est parfois tr\xe8s utile dans le cas o\xf9 l'on avait stock\xe9 une valeur mais l'on souhaite faire une suite d'instructions uniquement dans le bloc ",(0,i.jsx)(n.code,{children:"else"})," du ",(0,i.jsx)(n.code,{children:"if"}),"."]}),(0,i.jsx)(n.p,{children:"Au lieu de faire :"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    bool condition { false };\n\n    if ( condition )\n    {\n        // ... ne rien faire\n    }\n    else\n    {\n        // effectuer nos instructions\n    }\n\n    return 0;\n}\n"})}),(0,i.jsx)(n.p,{children:"Il est pr\xe9f\xe9rable de faire:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    bool condition { false };\n\n    if ( !condition )\n    {\n        // effectuer nos instructions\n    }\n\n    return 0;\n}\n"})})]}),"\n",(0,i.jsx)(n.p,{children:'Mais comment tester une succession de conditions diff\xe9rentes avant de faire "tout le reste"\u202f?'}),"\n",(0,i.jsx)(n.h4,{id:"sinon-si",children:"Sinon si"}),"\n",(0,i.jsxs)(n.p,{children:["On pourrait tr\xe8s bien cha\xeener plusieurs ",(0,i.jsx)(n.code,{children:"if"})," et ",(0,i.jsx)(n.code,{children:"else"})," imbriqu\xe9s de cette mani\xe8re:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    float temperature { 24.0f };\n\n    if ( /* condition1 */ )\n    {\n        // ...\n    }\n    else\n    {\n        if ( /* condition2 */ )\n        {\n            // ...\n        }\n        else\n        {\n            if ( /* condition3 */ )\n            {\n                //...\n            }\n            else \n            {\n               //...  \n            }\n        }\n    }\n    return 0;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Mais vous \xeates s\xfbrement d'accord pour dire que \xe7a commence \xe0 \xeatre difficile \xe0 suivre et \xe9crire \xe0 cause des imbrications.\nLe C++ est bien fait et nous permet de d'utiliser la combinaison ",(0,i.jsx)(n.code,{children:"else if"})," pour ce cas de figure."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"else if"})," s\u2019utilise entre un ",(0,i.jsx)(n.code,{children:"if"})," et un ",(0,i.jsx)(n.code,{children:"else"}),' et signifie "ou alors si cette condition est vraie".']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    if ( /* condition1 */ )\n    {\n        // ...\n    }\n    else if ( /* condition2 */ )\n    {\n        // ...\n    }\n    else  if ( /* condition3 */ )\n    {\n        //...\n    }\n    else\n    {\n        //...  \n    }\n\n    return 0;\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Enfin, il existe une derni\xe8re syntaxe (le ",(0,i.jsx)(n.code,{children:"switch"})," pour les curieux) qui permet de faire quelque chose de similaire au ",(0,i.jsx)(n.code,{children:"else if"})," mais il nous manque quelques notions et je vous le pr\xe9senterai juste apr\xe8s les boucles."]})}),"\n",(0,i.jsx)(n.h3,{id:"faux-ami",children:"Faux-ami"}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["Attention le test d'\xe9galit\xe9 ",(0,i.jsx)(n.code,{children:"=="})," est diff\xe9rent de l'op\xe9rateur d'affectation ",(0,i.jsx)(n.code,{children:"="}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int number { 20 };\nif ( number = 10 )\n{\n    // ...\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["En ",(0,i.jsx)(n.strong,{children:"C++"}),", l'assignation retourne la valeur de la variable assign\xe9e. Ici, la condition sera vraie car ",(0,i.jsx)(n.code,{children:"number"})," vaut 10 apr\xe8s l'assignation et 10 est consid\xe9r\xe9 comme vrai."]}),"\n",(0,i.jsx)(n.p,{children:"Les valeurs num\xe9riques non nulles sont consid\xe9r\xe9es comme vraies et la valeur 0 est consid\xe9r\xe9e comme fausse."}),"\n",(0,i.jsx)(n.h3,{id:"combinaison-dexpressions",children:"Combinaison d'expressions"}),"\n",(0,i.jsxs)(n.p,{children:["Avec tous les op\xe9rateurs logiques vu pr\xe9c\xe9demment il est m\xeame possible de tester plusieurs conditions dans un m\xeame ",(0,i.jsx)(n.code,{children:"if"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n\n    float temperature { 24.0f };\n    bool const isRaining { false };\n    bool const wantToGoOut { true };\n    bool const ownsAnUmbrella { false };\n\n    if ( wantToGoOut && (!isRaining || (isRaining && ownsAnUmbrella) ) )\n    {\n        // ...\n    }\n    else\n    {\n        //...  \n    }\n\n    return 0;\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsx)(n.p,{children:"Les op\xe9rateurs logiques sont comme les op\xe9rateurs math\xe9matiques que nous avons vus dans les chapitres pr\xe9c\xe9dents: ils ont une priorit\xe9."}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Le plus prioritaire est la n\xe9gation ",(0,i.jsx)("kbd",{children:"!"})]}),"\n",(0,i.jsxs)(n.li,{children:["Ensuite c'est le ",(0,i.jsx)(n.strong,{children:"ET"})," ",(0,i.jsx)("kbd",{children:"&&"})]}),"\n",(0,i.jsxs)(n.li,{children:["Enfin, le ",(0,i.jsx)(n.strong,{children:"OU"})," ",(0,i.jsx)("kbd",{children:"||"})," est le moins prioritaire"]}),"\n"]}),(0,i.jsxs)(n.p,{children:["Par exemple avec le code ",(0,i.jsx)(n.code,{children:"a && b || c && d"}),", dans l\u2019ordre, on \xe9value ",(0,i.jsx)(n.code,{children:"a && b"}),", ",(0,i.jsx)(n.code,{children:"c && d"})," et enfin ",(0,i.jsx)(n.code,{children:"(a && b) || (c && d)"}),"."]}),(0,i.jsx)(n.p,{children:'Pour des raisons de lisibilit\xe9 je vous recommande tr\xe8s fortement d\'ajouter des parenth\xe8ses (comme dans mon exemple ci-dessus) pour expliciter quelles op\xe9rations vous voulez prioriser dans ce genre de cas plus "complexe".'})]}),"\n",(0,i.jsx)(n.h4,{id:"pour-aller-plus-loin-alg\xe8bre-de-boole",children:"Pour aller plus loin: Alg\xe8bre de Boole"}),"\n",(0,i.jsxs)(n.p,{children:["Enfin, pour aller encore plus loin il est possible de manipuler les op\xe9rateurs ",(0,i.jsx)(n.code,{children:"&&"}),", ",(0,i.jsx)(n.code,{children:"||"})," et ",(0,i.jsx)(n.code,{children:"!"})," et trouver des expressions donnant le m\xeame r\xe9sultat.\nCela permet parfois de simplifier le code ou alors d'exprimer la condition sous une forme plus lisible ou compr\xe9hensible."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans mon exemple pr\xe9c\xe9dent la condition ",(0,i.jsx)(n.code,{children:"(!isRaining || (isRaining && ownsAnUmbrella))"})," est \xe9quivalente \xe0 \xe9crire ",(0,i.jsx)(n.code,{children:"(!isRaining || ownsAnUmbrella)"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["En effet, si il ne ",(0,i.jsx)(n.strong,{children:"pleut pas"}),"(",(0,i.jsx)(n.code,{children:"!isRaining"}),") , peu importe si j'ai un parapluie ou non, je peux sortir, Si cependant la premi\xe8re condition est fausse (il pleut) alors inutile de v\xe9rifier de nouveau si il pleut (",(0,i.jsx)(n.code,{children:"!isRaining || (isRaining &&..."}),") c'est impliqu\xe9 par la premi\xe8re condition et donc il suffit de v\xe9rifier si j'ai un parapluie."]}),"\n",(0,i.jsxs)(n.p,{children:["Il existe aussi le ",(0,i.jsx)(n.strong,{children:"th\xe9or\xe8me de De Morgan"})," qui permet d'exprimer la n\xe9gation d'un ",(0,i.jsx)(n.strong,{children:"ET"})," avec un ",(0,i.jsx)(n.strong,{children:"OU"})," et inversement."]}),"\n",(0,i.jsx)(n.p,{children:"Il est possible d'exprimer mon exemple pr\xe9c\xe9dent sous cette forme:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(!isRaining || ownsAnUmbrella)"})," \xe9quivalent \xe0 ",(0,i.jsx)(n.code,{children:"!(isRaining && !ownsAnUmbrella)"})]}),"\n",(0,i.jsx)(n.p,{children:"On peut s'en convaincre en essayant de traduire ces conditions en phrases:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(!isRaining || ownsAnUmbrella)"}),": c'est le cas o\xf9 il ne pleut pas ou alors j'ai un parapluie.\n",(0,i.jsx)(n.code,{children:"!(isRaining && !ownsAnUmbrella)"})," ce n'est ",(0,i.jsx)(n.strong,{children:"pas"})," le cas o\xf9 il pleut et je n'ai pas de parapluie."]}),"\n",(0,i.jsxs)(n.p,{children:["Vous trouverez des exemples de propri\xe9t\xe9s et simplifications possibles sur la page Wikip\xe9dia suivante:\n",(0,i.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Alg%C3%A8bre_de_Boole_(logique)",children:"Alg\xe8bre de Boole"})]}),"\n",(0,i.jsx)(n.h3,{id:"switch",children:"Switch"}),"\n",(0,i.jsxs)(n.p,{children:["Maintenant que nous avons toutes les cartes en main revenons bri\xe8vement au ",(0,i.jsx)(n.strong,{children:"switch"})," dont je vous parlais pr\xe9c\xe9demment."]}),"\n",(0,i.jsxs)(n.p,{children:["Tr\xe8s souvent on veut seulement tester la valeur d'une variable et effectuer telle ou telle action en fonction. On pourrait tr\xe8s bien \xe9crire cela avec des ",(0,i.jsx)(n.code,{children:"else if"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    int value { 42 };\n    if ( value == 12 )\n    {\n        // ...\n    }\n    else if ( value == 33 )\n    {\n        // ...\n    }\n    else  if ( value == 52)\n    {\n        //...\n    }\n    else\n    {\n        //...  \n    }\n    return 0;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["C'est avec le mot cl\xe9 ",(0,i.jsx)(n.code,{children:"switch"})," que l'on va pouvoir faire cela de fa\xe7on plus lisible:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    int value { 42 };\n    switch (value)\n    {\n        case 12:\n            // ...\n            break; // permet de quitter le bloc switch\n        case 33:\n            // ...\n            break;\n        case 52:\n            // ...\n            break;\n        default:\n            // ...\n            break;\n    }\n\n    return 0;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Lorsque l'expression test\xe9e est \xe9gale \xe0 une des valeurs list\xe9es avec les mots-cl\xe9s ",(0,i.jsx)(n.code,{children:"case"})," la ",(0,i.jsx)(n.strong,{children:"totalit\xe9"})," des instructions qui suivent sont ex\xe9cut\xe9es.\nLe mot cl\xe9 ",(0,i.jsx)(n.code,{children:"break"})," indique la sortie de la structure de contr\xf4le.\nLe mot cl\xe9 ",(0,i.jsx)(n.code,{children:"default"})," indique quelles instructions ex\xe9cuter si l'expression n'est jamais \xe9gale \xe0 une des valeurs."]}),"\n",(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsxs)(n.p,{children:["De mani\xe8re g\xe9n\xe9rale, n'oubliez pas d'ins\xe9rer des instructions ",(0,i.jsx)(n.code,{children:"break"})," entre chaque test, ce genre d'oubli est difficile \xe0 d\xe9tecter car aucune erreur n'est signal\xe9e...\nEn effet la ",(0,i.jsx)(n.strong,{children:"totalit\xe9"})," des instructions suivant le ",(0,i.jsx)(n.code,{children:"case"})," sont ex\xe9cut\xe9es et donc on pourrait se retrouver \xe0 ex\xe9cuter des instructions de mani\xe8re involontaire."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nint main()\n{\n    int value { 33 };\n    switch (value)\n    {\n        case 12:\n            std::cout << "value est \xe9gale \xe0 12" << std::endl;\n        case 33:\n            std::cout << "value est \xe9gale \xe0 33" << std::endl;\n        default:\n            std::cout << "value est diff\xe9rent de 12 ou 33" << std::endl;\n    }\n\n    return 0;\n}\n'})}),(0,i.jsx)(n.p,{children:"qui nous donne:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"value est \xe9gale \xe0 33\nvalue est diff\xe9rent de 12 ou 33\n"})}),(0,i.jsxs)(n.p,{children:["Cela peut \xeatre parfois voulu mais ici on se rend bien compte qu'il y a un probl\xe8me et il ne faut donc pas oublier le mot cl\xe9 ",(0,i.jsx)(n.code,{children:"break"}),"."]}),(0,i.jsx)(n.p,{children:"Voici un exemple o\xf9 cela peut \xeatre utile:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    char letter { 'e' };\n    switch(letter)\n    {\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n        case 'y':\n            std::cout << \"You entered a vowel.\" << std::endl;\n            break;\n        default:\n            std::cout << \"You entered a consonant.\" << std::endl;\n            break;\n    }\n\n    return 0;\n}\n"})}),(0,i.jsx)(n.p,{children:"Certains warnings de compilateur permette d'indiquer ce genre de cas mais c'est mieux d'y faire attention."})]}),"\n",(0,i.jsxs)(n.admonition,{title:"Switch et cha\xeenes de caract\xe8res",type:"warning",children:[(0,i.jsxs)(n.p,{children:["Il est important de noter que le mot cl\xe9 ",(0,i.jsx)(n.code,{children:"switch"})," ne peut pas \xeatre utilis\xe9 avec des cha\xeenes de caract\xe8res. Il ne peut \xeatre utilis\xe9 qu'avec des types entiers (",(0,i.jsx)(n.code,{children:"int"}),", ",(0,i.jsx)(n.code,{children:"char"}),", ",(0,i.jsx)(n.code,{children:"short"}),", ",(0,i.jsx)(n.code,{children:"long"}),", etc...) ou encore les ",(0,i.jsx)(n.a,{href:"/Lessons/S1/Variables/#enum-un-type-suppl%C3%A9mentaire",children:(0,i.jsx)(n.strong,{children:"\xe9num\xe9rations"})}),"."]}),(0,i.jsxs)(n.p,{children:["il est possible de faire cela avec des ",(0,i.jsx)(n.code,{children:"if"})," et ",(0,i.jsx)(n.code,{children:"else if"})," mais g\xe9n\xe9ralement lors de l'utilisation de switch on conna\xeet \xe0 l'avance les valeurs possibles et donc on utilisera de pr\xe9f\xe9rence des ",(0,i.jsx)(n.a,{href:"/Lessons/S1/Variables/#enum-un-type-suppl%C3%A9mentaire",children:(0,i.jsx)(n.strong,{children:"\xe9num\xe9rations"})})," ou des constantes."]})]}),"\n",(0,i.jsx)(n.h2,{id:"boucles",children:"Boucles"}),"\n",(0,i.jsxs)(n.p,{children:["Nous avons maintenant la capacit\xe9 d'ex\xe9cuter des codes diff\xe9rents en fonction de ",(0,i.jsx)(n.strong,{children:"conditions"}),".\nCependant, notre programme reste essentiellement lin\xe9aire, car nous ex\xe9cutons les instructions de haut en bas, l'un \xe0 la suite des autres."]}),"\n",(0,i.jsxs)(n.p,{children:["Nous allons maintenant explorer de nouvelles structures de contr\xf4le: les ",(0,i.jsx)(n.strong,{children:"boucles"}),".\nElles vont nous permettre de r\xe9p\xe9ter plusieurs fois une s\xe9rie d'instructions, selon nos besoins."]}),"\n",(0,i.jsx)(n.h3,{id:"while---tant-que-",children:'While - "Tant que ..."'}),"\n",(0,i.jsxs)(n.p,{children:["La premi\xe8re est la boucle ",(0,i.jsx)(n.strong,{children:"while"}),", de l'anglais qui signifie \"tant que\".\nElle ex\xe9cute une s\xe9rie d\u2019instructions tant qu'une condition est vraie.\nUne fois que la condition devient fausse la boucle s\u2019arr\xeate et passe \xe0 la suite."]}),"\n",(0,i.jsx)(n.mermaid,{value:"graph\nA(Start)\nB{Condition}\nC{Instructions}\nD(End)\n\nA --\x3e B\nB -- Condition is true --\x3e C\nC --\x3e B\nB -- Condition is false --\x3e D"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Un petit exemple"',children:"#include <iostream>\nint main()\n{\n    int count { 0 }; // initialisation (d'un compteur ou autre chose li\xe9 \xe0 la boucle)\n    while ( count < 10 /* condition */)\n    {\n        std::cout << count << std::endl; // Instructions\n        count++; // It\xe9ration (mise \xe0 jour du compteur g\xe9n\xe9ralement)\n    }\n\n    return 0;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Le code \xe9value la condition avant d'effectuer quoi que ce soit. Dans notre cas si le ",(0,i.jsx)(n.strong,{children:"compte est inf\xe9rieur \xe0 10"})," alors on va afficher le nombre et l'incr\xe9menter.\nQuand finalement count vaut 10, la condition devient fausse, on passe \xe0 la suite du code. (",(0,i.jsx)(n.strong,{children:"on ne va donc pas afficher la valeur 10"}),")"]}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsxs)(n.p,{children:["Attention aux ",(0,i.jsx)(n.strong,{children:"boucles infinies"})," !"]}),(0,i.jsx)(n.p,{children:"Lorsque vous cr\xe9ez une boucle, assurez-vous qu'elle puisse s'arr\xeater \xe0 un moment ! Si la condition est toujours vraie, votre programme ne s'arr\xeatera jamais !"})]}),"\n",(0,i.jsx)(n.h3,{id:"do-while",children:"Do while"}),"\n",(0,i.jsxs)(n.p,{children:["De mani\xe8re tr\xe8s similaire il existe la boucle ",(0,i.jsx)(n.code,{children:"Do... while"}),', qui signifie "fait .. tant que..."']}),"\n",(0,i.jsx)(n.p,{children:"Ce type de boucle est moins utilis\xe9. La seule chose qui change par rapport \xe0 une boucle while, c'est la position de la condition : au lieu d'\xeatre au d\xe9but de la boucle, la condition est \xe0 la fin."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["La boucle ",(0,i.jsx)(n.code,{children:"while"})," peut tr\xe8s bien ne ",(0,i.jsx)(n.strong,{children:"jamais"})," \xeatre ex\xe9cut\xe9e si la ",(0,i.jsx)(n.strong,{children:"condition est fausse d\xe8s le d\xe9part"}),".\nDans mon exemple pr\xe9c\xe9dent, si on avait initialis\xe9 le count \xe0 ",(0,i.jsx)(n.code,{children:"20"}),", la condition aurait \xe9t\xe9 fausse d\xe8s le d\xe9but, et on ne serait jamais rentr\xe9 dans la boucle."]})}),"\n",(0,i.jsxs)(n.p,{children:["Pour la boucle ",(0,i.jsx)(n.code,{children:"Do... while"}),", on rentre ",(0,i.jsx)(n.strong,{children:"au moins une fois"})," \xe0 l'int\xe9rieur. Le test se fait \xe0 la fin."]}),"\n",(0,i.jsx)(n.p,{children:"Il est donc parfois utile de faire des boucles de ce type, pour s'assurer que l'on rentre au moins une fois dans la boucle."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nint main()\n{\n    int sum {0};\n    int number;\n    \n\tdo {\n\t\tstd::cout << "Entre un nombre: ";\n\n\t\tstd::cin >> number;\n\n\t\tsum += number;\n\n\t} while (number != 0);\n\n\tstd::cout << "La somme vaut " << sum << std::endl;\n\n\treturn 0;\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:['Il y a une petite sp\xe9cificit\xe9 suppl\xe9mentaire ici, il faut ajouter un "',(0,i.jsx)(n.strong,{children:";"}),'" \xe0 la fin de la ligne contenant la condition while.']})}),"\n",(0,i.jsx)(n.h3,{id:"for",children:"For"}),"\n",(0,i.jsx)(n.p,{children:"Un des cas les plus fr\xe9quents avec les boucles est d'avoir un compteur et un nombre d'it\xe9rations pr\xe9d\xe9fini."}),"\n",(0,i.jsxs)(n.p,{children:["On pourrait tr\xe8s bien le faire avec la boucle ",(0,i.jsx)(n.code,{children:"while"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int count { 0 }; // initialisation (d'un compteur ou autre chose li\xe9 \xe0 la boucle)\nwhile ( count < 10 /* condition */)\n{\n    // Instructions\n    count++; // It\xe9ration (mise \xe0 jour du compteur g\xe9n\xe9ralement)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Mais il existe une boucle d\xe9di\xe9e \xe0 cela qui permet de s\xe9parer le reste de notre code de ce qui est li\xe9 \xe0 la boucle. Cela rend le code plus clair et plus compr\xe9hensible surtout dans le cas ou l'on connait \xe0 l'avance le nombre d'it\xe9rations."}),"\n",(0,i.jsxs)(n.p,{children:["C'est la boucle ",(0,i.jsx)(n.code,{children:"for"}),' ("',(0,i.jsx)(n.strong,{children:"pour"}),"\" en anglais) et elle s'utilise selon le sch\xe9ma suivant:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"for (int count {0} /*initialisation*/ ; count < 10 /*condition*/ ; count++/*It\xe9ration*/)\n{\n    // Instructions\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Voil\xe0 le m\xeame exemple qu'avec la boucle ",(0,i.jsx)(n.code,{children:"while"})," mais ici avec la boucle ",(0,i.jsx)(n.code,{children:"for"})," :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    for (int count { 0 }; count < 10 ; count++)\n    {\n        std::cout << count << std::endl;\n    }\n\n    return 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"L'avantage ici est que le d\xe9tail de ce que fait la boucle est concentr\xe9 sur une m\xeame ligne."}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Un autre gros avantage est que la ",(0,i.jsx)(n.strong,{children:"port\xe9e de la variable"})," (",(0,i.jsx)(n.strong,{children:"scope"}),") est ",(0,i.jsx)(n.strong,{children:"limit\xe9e"})," \xe0 la boucle et donc rend notre code plus s\xfbr et propre."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    for (int count { 10 }; count > 0 ; count--)\n    {\n        std::cout << count << std::endl;\n    }\n    \n    std::cout << count << std::endl;\n\n    return 0;\n}\n"})}),(0,i.jsxs)(n.p,{children:["La variable ",(0,i.jsx)(n.code,{children:"count"})," ici est uniquement n\xe9cessaire pour la boucle en question et n'a donc pas lieu d'\xeatre partag\xe9e ensuite avec le reste du code pour \xe9viter des erreurs.\nSi on essaye de le faire le compilateur nous donne l'erreur suivante:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Compilation failed due to following error(s)"',children:"main.cpp: In function \u2018int main()\u2019:\nmain.cpp:17:18: error: \u2018count\u2019 was not declared in this scope\n   17 |     std::cout << count << std::endl;\n      |                  ^~~~~\n"})})]}),"\n",(0,i.jsxs)(n.p,{children:["Mais alors quand choisir une boucle ",(0,i.jsx)(n.code,{children:"while"})," ou une boucle ",(0,i.jsx)(n.code,{children:"for"})," ?"]}),"\n",(0,i.jsxs)(n.p,{children:["C'est une question l\xe9gitime et il n'y a pas de bonne r\xe9ponse, vous \xeates libre.\nEn g\xe9n\xe9ral on utilise une boucle ",(0,i.jsx)(n.code,{children:"for"})," dans le cas o\xf9 l'on ",(0,i.jsx)(n.strong,{children:"conna\xeet"})," le nombre d'it\xe9rations \xe0 l'avance (un compteur, un nombre de niveaux ou de joueurs dans un jeu, etc...).\nLa boucle ",(0,i.jsx)(n.code,{children:"while"}),", quant \xe0 elle, est g\xe9n\xe9ralement utilis\xe9e pour effectuer des actions sans savoir \xe0 l'avance le nombre d'it\xe9rations que l'on va effectuer (par exemple la gestion de l'entr\xe9e utilisateur ou dans un jeu faire bouger un ennemi ",(0,i.jsx)(n.strong,{children:"tant qu"}),"'il n'a pas atteint sa cible)"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:['Plus simplement, essayez de dire ce que vous voulez faire et si votre phrase contient "',(0,i.jsx)(n.strong,{children:"pour"}),'" ou "',(0,i.jsx)(n.strong,{children:"pour chaque ... faire ..."}),"\" il est pr\xe9f\xe9rable d'utiliser une boucle ",(0,i.jsx)(n.code,{children:"for"}),'. Et si vous vous d\xeetes "',(0,i.jsx)(n.strong,{children:"Tant que ... faire ..."}),'" alors vous devriez utiliser une boucle ',(0,i.jsx)(n.code,{children:"while"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"contr\xf4ler-lex\xe9cution",children:"Contr\xf4ler l'ex\xe9cution"}),"\n",(0,i.jsx)(n.p,{children:"Les boucles sont tr\xe8s utiles, mais parfois on aimerait pouvoir contr\xf4ler plus finement les instructions \xe0 l\u2019int\xe9rieur des accolades et pouvoir s'arr\xeater plus t\xf4t ou ne pas ex\xe9cuter les instructions pour un cas particulier."}),"\n",(0,i.jsxs)(n.p,{children:["Il existe en ",(0,i.jsx)(n.strong,{children:"C++"})," deux mots-cl\xe9s: ",(0,i.jsx)(n.strong,{children:"break"})," et ",(0,i.jsx)(n.strong,{children:"continue"})]}),"\n",(0,i.jsx)(n.h4,{id:"break",children:"Break"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Break"}),' (de anglais "casser"/"interrompre") permet d\'interrompre une boucle et mettre fin \xe0 l\u2019ex\xe9cution de celle-ci peu importe o\xf9 on en est.']}),"\n",(0,i.jsx)(n.p,{children:'Voyons un exemple plus "complexe" ensemble:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'for (int i { 0 }; i < 5; ++i)\n    {\n        std::cout << "i : " << i << std::endl;\n        \n        for (int j { 0 }; j < i; ++j)\n        {\n            if (j == 2)\n            {\n                std::cout << "break j == 2" << std::endl;\n                break;\n            }\n    \n            std::cout << "j : " << j << std::endl;\n        }\n        std::cout << std::endl;\n        \n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:"qui nous donne le r\xe9sultat suivant:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"i: 0\n\ni: 1\nj: 0\n\ni: 2\nj: 0\nj: 1\n\ni: 3\nj: 0\nj: 1\nbreak j == 2\n\ni: 4\nj: 0\nj: 1\nbreak j == 2\n"})}),"\n",(0,i.jsx)(n.p,{children:"Ici il y a plusieurs choses qui se passent:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"il y a d\xe9j\xe0 deux boucles imbriqu\xe9es, et oui rien ne nous emp\xeache de faire cela en C++"}),"\n",(0,i.jsxs)(n.li,{children:["la deuxi\xe8me boucle (sur la variable ",(0,i.jsx)(n.strong,{children:"j"}),") d\xe9pend de la variable ",(0,i.jsx)(n.strong,{children:"i"})," de la premi\xe8re (c'est parfois utile de le faire et je vous montre donc un petit exemple)"]}),"\n",(0,i.jsxs)(n.li,{children:["ici le mot cl\xe9 ",(0,i.jsx)(n.code,{children:"break"})," permet d'interrompre la boucle de la variable j si la valeur de j est \xe9gale \xe0 2."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Une petite analyse des it\xe9rations s'impose:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["la premi\xe8re fois i est \xe9gal \xe0 0 et donc la condition ",(0,i.jsx)(n.code,{children:"j < i"})," est directement fausse vu que j aussi est \xe9gal \xe0 0.\nensuite"]}),"\n",(0,i.jsxs)(n.li,{children:["ensuite i est \xe9gal \xe0 1 et donc on passe une fois seulement dans la boucle du j car \xe0 la seconde it\xe9ration j devient \xe9gal \xe0 i et invalide la condition ",(0,i.jsx)(n.code,{children:"j < i"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["la troisi\xe8me fois c'est le ",(0,i.jsx)(n.code,{children:"break"})," qui entre en jeu et permet d'interrompre la boucle quand j est \xe9gal \xe0 2 (\xe0 noter que la condition de la boucle aurait aussi invalid\xe9 la condition ",(0,i.jsx)(n.code,{children:"j < i"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["enfin ici le ",(0,i.jsx)(n.code,{children:"break"})," prend tout son sens car s'il n'\xe9tait pas l\xe0, on aurait encore continu\xe9 un tour car j \xe9tant \xe9gal \xe0 3, la condition (",(0,i.jsx)(n.code,{children:"j < i"}),") serait valide car i est \xe9gal \xe0 4 et que ",(0,i.jsx)(n.code,{children:"3 < 4"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Comme nous venons de le voir, dans le cas de boucles imbriqu\xe9es cela arr\xeate seulement la boucle du niveau au dessus et pas toutes les boucles."})}),"\n",(0,i.jsx)(n.h4,{id:"continue",children:"Continue"}),"\n",(0,i.jsxs)(n.p,{children:["L\u2019autre mot-cl\xe9, ",(0,i.jsx)(n.code,{children:"continue"}),", permet de sauter l\u2019it\xe9ration courante."]}),"\n",(0,i.jsx)(n.p,{children:"Toutes les instructions restantes du bloc sont ignor\xe9es et la boucle continue au tour suivant."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'for (int i { 0 }; i < 5; ++i)\n{\n    if( i == 3)\n    {\n        continue;\n    }\n    std::cout << "i : " << i << std::endl;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Ce qui nous donne:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"i : 0\ni : 1\ni : 2\ni : 4\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsxs)(n.p,{children:["Comme cela interrompt la totalit\xe9 des instructions suivantes de la boucle cela peut \xeatre dangereux dans le cas d'une boucle ",(0,i.jsx)(n.strong,{children:"while"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nint main()\n{\n    int count { 10 };\n\n    while (count > 0)\n    {\n        std::cout << count << std::endl;\n\n        if (count == 5)\n        {\n            continue;\n        }\n        count--;\n    }\n\n    return 0;\n}\n"})}),(0,i.jsxs)(n.p,{children:["Ici, l'instruction de ",(0,i.jsx)(n.code,{children:"count--;"})," ne sera donc jamais appel\xe9e une fois que ",(0,i.jsx)(n.code,{children:"count"})," devient \xe9gal \xe0 5.\n",(0,i.jsx)(n.code,{children:"count"})," restera donc \xe9gal \xe0 5 ind\xe9finiment: C'est une ",(0,i.jsx)(n.strong,{children:"boucle infinie"}),"."]})]}),"\n",(0,i.jsx)(n.h2,{id:"en-r\xe9sum\xe9",children:"En r\xe9sum\xe9"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Une valeur bool\xe9enne est du type ",(0,i.jsx)(n.strong,{children:"bool"})," et peut prendre comme valeur ",(0,i.jsx)(n.code,{children:"true"})," ou ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["On obtient une valeur bool\xe9enne avec une condition sur nos variables (avec les op\xe9rateurs de comparaison ",(0,i.jsx)("kbd",{children:"=="}),", ",(0,i.jsx)("kbd",{children:"!="}),", ",(0,i.jsx)("kbd",{children:"<"}),", ",(0,i.jsx)("kbd",{children:"<="}),", ",(0,i.jsx)("kbd",{children:">"})," ou ",(0,i.jsx)("kbd",{children:">="}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Les op\xe9rateurs ",(0,i.jsx)("kbd",{children:"&&"}),", ",(0,i.jsx)("kbd",{children:"||"})," et ",(0,i.jsx)("kbd",{children:"!"})," permettent de modifier et combiner les valeurs bool\xe9ennes."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["On utilise les structures de contr\xf4le ",(0,i.jsx)(n.code,{children:"if"}),", ",(0,i.jsx)(n.code,{children:"else"}),", ",(0,i.jsx)(n.code,{children:"else if"})," pour ex\xe9cuter des instructions diff\xe9rentes en fonction des conditions."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Il existe trois types de boucle:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["la boucle ",(0,i.jsx)(n.code,{children:"while"})," qui permet d'ex\xe9cuter des instructions tant qu'une condition est v\xe9rifi\xe9e."]}),"\n",(0,i.jsxs)(n.li,{children:["la boucle ",(0,i.jsx)(n.code,{children:"Do while"})," qui permet de faire la m\xeame chose que la boucle ",(0,i.jsx)(n.code,{children:"while"})," mais en faisant le test seulement \xe0 la fin et permettant d'ex\xe9cuter les instructions ",(0,i.jsx)(n.strong,{children:"au moins une fois"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["la boucle ",(0,i.jsx)(n.code,{children:"for"})," plus utile en pratique quand l'on connait \xe0 l'avance le nombre d'it\xe9rations \xe0 effectuer. Elle permet aussi de mieux \"scoper\" les variables et ",(0,i.jsx)(n.strong,{children:"limiter leur port\xe9e"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Il existe deux mots-cl\xe9s ",(0,i.jsx)(n.code,{children:"break"})," et ",(0,i.jsx)(n.code,{children:"continue"})," qui permettent de contr\xf4ler plus finement les boucles."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["La structure de contr\xf4le ",(0,i.jsx)(n.code,{children:"switch"})," est une alternative au ",(0,i.jsx)(n.code,{children:"else if"})," compatible seulement avec des types entiers et les ",(0,i.jsx)(n.a,{href:"/Lessons/S1/Variables/#enum-un-type-suppl%C3%A9mentaire",children:(0,i.jsx)(n.strong,{children:"\xe9num\xe9rations"})}),"."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>l});var i=s(67294);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);