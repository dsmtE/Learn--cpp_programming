import{M as P,m as T,u as E,r as F,j as p,b as X,R as x,c as w,E as M,F as Y,w as R,a as m,V as q}from"./_virtual_settings-W9jktp4-.js";import{C as i,T as B,t as H,s as l}from"./styles-CIndU-LK.js";import{r as v,s as S}from"./utils-B3L5ltZ6.js";import{u as J}from"./useRandom-BZdmpElt.js";import{d as K}from"./delay-49EBeRuT.js";let _;_??(_=new P("mergeSort_intro",!1));_.loadData({version:0,timeEvents:[],seed:829095212});const N=_,y=T(function*(b){const L=E().variables.get("seed",42),W=E().variables.get("size",7),z=J(L()),n=F(W()).map(t=>z.nextInt(1,70)),r=Math.floor(W()/2),e=[],s=w(),f=w(),h=w(),u=28,a=16,c=128,d=u+c,C=4,D=8;b.fill(i.background),b.add(F(n.length).map(t=>p(x,{ref:X(e,t),size:c,lineWidth:D,stroke:i.surface,fill:i.background,radius:C,x:-156*(n.length-1)/2+d*t,alignItems:"center",justifyContent:"center",children:p(B,{text:n[t].toString(),...H})}))),b.add(p(Y,{children:[p(x,{ref:s,stroke:i.surface,lineWidth:6,radius:8,opacity:0,width:n.length*d-u+2*a,height:c+2*a}),p(x,{ref:f,stroke:i.cyan,lineWidth:6,radius:8,opacity:0,topLeft:()=>[s().left().x-c,s().bottomRight().y+2*a],width:r*d-u+2*a,height:c+2*a,fill:new M(i.cyan).desaturate(.5).alpha(.1)}),p(x,{ref:h,stroke:i.yellow,lineWidth:6,radius:8,opacity:0,topRight:()=>[s().right().x+c,s().bottomRight().y+2*a],width:(n.length-r)*d-u+2*a,height:c+2*a,fill:new M(i.yellow).desaturate(.5).alpha(.1)})]})),yield*R(.5),yield*m(l(.1,...e.slice(0,r).map(t=>t.stroke(i.cyan,.1))),l(.1,...e.slice(r).map(t=>t.stroke(i.yellow,.1)))),yield*R(.5);const g=c/2+2*a;yield*m(s().y(s().y()-g,.3),...e.map(t=>t.y(t.y()-g,.3)),s().opacity(1,.3),K(.1,m(f().opacity(1,.3),h().opacity(1,.3))));const j=e.map(t=>t.position());yield*m(l(.3,...e.slice(0,r).map((t,o)=>t.topLeft(f().topLeft().addY(a).addX(a+d*o),.4))),l(.3,...e.slice(r).map((t,o)=>t.topLeft(h().topLeft().addY(a).addX(a+d*o),.4))));const A=e.map(t=>t.position()),k=v([...S(n.slice(0,r)),...S(n.slice(r)).map(t=>t+r)]);yield*l(.1,...k.map((t,o)=>e[o].position(A[t],.3))),yield*R(.5);const O=[...e];k.forEach((t,o)=>e[t]=O[o]);const V=[...n];k.forEach((t,o)=>n[t]=V[o]);const G=v(S(n));{const t=e.slice();G.forEach((o,I)=>e[o]=t[I])}yield*l(.2,...e.map((t,o)=>t.position(j[o],.3))),yield*R(.5),yield*m(s().y(s().y()+g,.3),...e.map(t=>t.y(t.y()+g,.3)),s().opacity(0,.3),f().opacity(0,.3),h().opacity(0,.3),...e.map(t=>t.stroke(i.surface,.3))),yield*m(f().opacity(0,.3),h().opacity(0,.3),s().opacity(0,.3)),yield*l(.1,...e.map(t=>t.fill(i.green,.3)))});y.name="mergeSort_intro";N.attach(y.meta);y.onReplaced??(y.onReplaced=new q(y.config));export{y as d};
